Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/benchmark/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/half_precision_convert/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/index", "autoapi/neural_compressor/torch/algorithms/mixed_precision/module_wrappers/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/mx/index", "autoapi/neural_compressor/torch/algorithms/mx_quant/utils/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/half_precision_rewriter/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/save_load/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/export/index", "autoapi/neural_compressor/torch/export/pt2e_export/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/load_entry/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/2x_user_guide", "docs/source/3x/PT_DynamicQuant", "docs/source/3x/PT_MXQuant", "docs/source/3x/PT_MixedPrecision", "docs/source/3x/PT_SmoothQuant", "docs/source/3x/PT_StaticQuant", "docs/source/3x/PT_WeightOnlyQuant", "docs/source/3x/PyTorch", "docs/source/3x/TF_Quant", "docs/source/3x/TF_SQ", "docs/source/3x/TensorFlow", "docs/source/3x/autotune", "docs/source/3x/benchmark", "docs/source/3x/client_quant", "docs/source/3x/design", "docs/source/3x/llm_recipes", "docs/source/3x/quantization", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_2", "docs/source/api-doc/api_3", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/tf_quantization_autotune", "docs/source/api-doc/tf_quantization_common", "docs/source/api-doc/tf_quantization_config", "docs/source/api-doc/torch_quantization_autotune", "docs/source/api-doc/torch_quantization_common", "docs/source/api-doc/torch_quantization_config", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/design", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/benchmark/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/half_precision_convert/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/index.rst", "autoapi/neural_compressor/torch/algorithms/mixed_precision/module_wrappers/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/mx/index.rst", "autoapi/neural_compressor/torch/algorithms/mx_quant/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/half_precision_rewriter/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/export/index.rst", "autoapi/neural_compressor/torch/export/pt2e_export/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/load_entry/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/2x_user_guide.md", "docs/source/3x/PT_DynamicQuant.md", "docs/source/3x/PT_MXQuant.md", "docs/source/3x/PT_MixedPrecision.md", "docs/source/3x/PT_SmoothQuant.md", "docs/source/3x/PT_StaticQuant.md", "docs/source/3x/PT_WeightOnlyQuant.md", "docs/source/3x/PyTorch.md", "docs/source/3x/TF_Quant.md", "docs/source/3x/TF_SQ.md", "docs/source/3x/TensorFlow.md", "docs/source/3x/autotune.md", "docs/source/3x/benchmark.md", "docs/source/3x/client_quant.md", "docs/source/3x/design.md", "docs/source/3x/llm_recipes.md", "docs/source/3x/quantization.md", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_2.rst", "docs/source/api-doc/api_3.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/tf_quantization_autotune.rst", "docs/source/api-doc/tf_quantization_common.rst", "docs/source/api-doc/tf_quantization_config.rst", "docs/source/api-doc/torch_quantization_autotune.rst", "docs/source/api-doc/torch_quantization_common.rst", "docs/source/api-doc/torch_quantization_config.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/design.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common.benchmark", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.tensorflow.algorithms", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.core", "neural_compressor.tensorflow.algorithms.smoother", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant", "neural_compressor.tensorflow.algorithms.static_quant.keras", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow", "neural_compressor.tensorflow.keras", "neural_compressor.tensorflow.keras.layers.conv2d", "neural_compressor.tensorflow.keras.layers.dense", "neural_compressor.tensorflow.keras.layers.depthwise_conv2d", "neural_compressor.tensorflow.keras.layers", "neural_compressor.tensorflow.keras.layers.layer_initializer", "neural_compressor.tensorflow.keras.layers.pool2d", "neural_compressor.tensorflow.keras.layers.separable_conv2d", "neural_compressor.tensorflow.keras.quantization.config", "neural_compressor.tensorflow.keras.quantization", "neural_compressor.tensorflow.quantization.algorithm_entry", "neural_compressor.tensorflow.quantization.autotune", "neural_compressor.tensorflow.quantization.config", "neural_compressor.tensorflow.quantization", "neural_compressor.tensorflow.quantization.quantize", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.constants", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils", "neural_compressor.tensorflow.utils.model", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.tensorflow.utils.utility", "neural_compressor.torch.algorithms.base_algorithm", "neural_compressor.torch.algorithms", "neural_compressor.torch.algorithms.layer_wise", "neural_compressor.torch.algorithms.layer_wise.load", "neural_compressor.torch.algorithms.layer_wise.modified_pickle", "neural_compressor.torch.algorithms.layer_wise.utils", "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert", "neural_compressor.torch.algorithms.mixed_precision", "neural_compressor.torch.algorithms.mixed_precision.module_wrappers", "neural_compressor.torch.algorithms.mx_quant", "neural_compressor.torch.algorithms.mx_quant.mx", "neural_compressor.torch.algorithms.mx_quant.utils", "neural_compressor.torch.algorithms.pt2e_quant.core", "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter", "neural_compressor.torch.algorithms.pt2e_quant", "neural_compressor.torch.algorithms.pt2e_quant.save_load", "neural_compressor.torch.algorithms.pt2e_quant.utility", "neural_compressor.torch.algorithms.smooth_quant", "neural_compressor.torch.algorithms.smooth_quant.save_load", "neural_compressor.torch.algorithms.smooth_quant.smooth_quant", "neural_compressor.torch.algorithms.smooth_quant.utility", "neural_compressor.torch.algorithms.static_quant", "neural_compressor.torch.algorithms.static_quant.save_load", "neural_compressor.torch.algorithms.static_quant.static_quant", "neural_compressor.torch.algorithms.static_quant.utility", "neural_compressor.torch.algorithms.weight_only.autoround", "neural_compressor.torch.algorithms.weight_only.awq", "neural_compressor.torch.algorithms.weight_only.gptq", "neural_compressor.torch.algorithms.weight_only.hqq.bitpack", "neural_compressor.torch.algorithms.weight_only.hqq.config", "neural_compressor.torch.algorithms.weight_only.hqq.core", "neural_compressor.torch.algorithms.weight_only.hqq", "neural_compressor.torch.algorithms.weight_only.hqq.optimizer", "neural_compressor.torch.algorithms.weight_only.hqq.qtensor", "neural_compressor.torch.algorithms.weight_only.hqq.quantizer", "neural_compressor.torch.algorithms.weight_only", "neural_compressor.torch.algorithms.weight_only.modules", "neural_compressor.torch.algorithms.weight_only.rtn", "neural_compressor.torch.algorithms.weight_only.save_load", "neural_compressor.torch.algorithms.weight_only.teq", "neural_compressor.torch.algorithms.weight_only.utility", "neural_compressor.torch.export", "neural_compressor.torch.export.pt2e_export", "neural_compressor.torch", "neural_compressor.torch.quantization.algorithm_entry", "neural_compressor.torch.quantization.autotune", "neural_compressor.torch.quantization.config", "neural_compressor.torch.quantization", "neural_compressor.torch.quantization.load_entry", "neural_compressor.torch.quantization.quantize", "neural_compressor.torch.utils.auto_accelerator", "neural_compressor.torch.utils.constants", "neural_compressor.torch.utils.environ", "neural_compressor.torch.utils", "neural_compressor.torch.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "2.X API User Guide", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization on Client", "Design", "&lt;no title&gt;", "Quantization", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "2.0 API", "3.0 API", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Tensorflow Quantization AutoTune", "Tensorflow Quantization Base API", "Tensorflow Quantization Config", "Pytorch Quantization AutoTune", "Pytorch Quantization Base API", "Pytorch Quantization Config", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Design", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "Transform", "Tuning Strategies", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 23, 30, 37, 46, 57, 71, 77, 95, 187, 191, 192, 193, 208, 234, 238, 242, 283, 310, 314, 325, 326, 330, 340, 342], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 37, 191, 208, 266, 271, 314, 334, 338, 341], "sourc": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 82, 84, 85, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 280, 282, 323, 326, 333], "decor": [0, 6, 15, 37, 46, 57, 71, 120, 121, 123, 187, 208, 240, 242, 257, 280, 283, 342], "all": [0, 2, 5, 6, 8, 11, 16, 23, 30, 37, 39, 42, 44, 46, 48, 57, 71, 77, 78, 95, 98, 116, 149, 183, 185, 186, 187, 188, 191, 193, 208, 212, 215, 233, 234, 236, 246, 250, 257, 265, 268, 271, 272, 274, 277, 278, 279, 282, 283, 284, 285, 310, 311, 314, 318, 322, 326, 331, 332, 333, 334, 336, 337, 340, 341, 342], "subclass": [0, 23, 30, 37, 46, 57, 71, 208, 283], "paramet": [0, 5, 6, 7, 8, 10, 14, 15, 16, 19, 20, 21, 23, 30, 33, 37, 39, 40, 42, 43, 44, 46, 47, 51, 55, 57, 59, 63, 71, 75, 77, 79, 82, 97, 101, 120, 121, 123, 139, 168, 181, 186, 187, 191, 193, 199, 201, 203, 204, 206, 207, 208, 210, 212, 213, 215, 217, 220, 222, 226, 228, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243, 246, 248, 249, 250, 253, 254, 256, 257, 263, 265, 266, 267, 270, 271, 273, 277, 280, 284, 311, 314, 321, 325, 326, 329, 332, 334, 335, 337, 339, 340, 341, 342], "cl": [0, 15, 23, 30, 37, 46, 57, 71, 187, 193, 242, 257, 310], "The": [0, 5, 6, 7, 9, 10, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 29, 30, 37, 39, 40, 41, 43, 44, 46, 47, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 88, 89, 90, 93, 94, 95, 97, 98, 101, 107, 127, 140, 157, 181, 182, 183, 184, 185, 186, 187, 188, 191, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 217, 218, 220, 221, 222, 228, 230, 232, 233, 234, 236, 237, 238, 242, 243, 244, 246, 252, 253, 256, 257, 258, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 277, 278, 280, 283, 284, 285, 286, 288, 294, 297, 300, 308, 309, 310, 311, 314, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "str": [0, 6, 8, 10, 14, 15, 16, 21, 22, 23, 30, 33, 37, 39, 40, 42, 44, 46, 74, 77, 79, 95, 98, 99, 101, 187, 191, 193, 194, 199, 201, 203, 204, 208, 210, 212, 213, 220, 222, 226, 228, 230, 232, 234, 236, 237, 238, 240, 242, 246, 249, 250, 253, 257, 258, 267, 268, 271, 310, 311, 325, 341], "registr": [0, 23, 30, 37], "name": [0, 5, 6, 7, 10, 14, 16, 21, 22, 23, 26, 30, 35, 37, 41, 46, 51, 55, 57, 59, 75, 77, 79, 88, 89, 93, 107, 120, 121, 123, 156, 181, 186, 187, 191, 193, 198, 207, 208, 212, 213, 215, 222, 228, 237, 238, 240, 242, 244, 246, 248, 249, 250, 257, 263, 266, 267, 268, 269, 279, 280, 285, 310, 314, 316, 318, 323, 325, 326, 328, 329, 332, 334, 338, 339, 342, 343], "call": [0, 15, 42, 191, 208, 240, 271, 274, 277, 280, 283, 311, 320, 332, 334, 340, 341], "return": [0, 5, 6, 8, 14, 15, 19, 20, 23, 30, 33, 37, 39, 40, 42, 43, 44, 46, 47, 51, 55, 57, 59, 63, 71, 75, 77, 95, 97, 99, 101, 107, 120, 121, 123, 127, 181, 186, 187, 191, 193, 199, 201, 203, 204, 206, 207, 208, 210, 212, 213, 215, 220, 222, 226, 228, 230, 232, 233, 234, 236, 237, 240, 242, 243, 246, 250, 256, 257, 264, 268, 269, 272, 277, 280, 284, 285, 311, 314, 325, 328, 330, 332, 334, 337, 340, 342], "type": [0, 6, 7, 8, 10, 14, 15, 16, 21, 23, 30, 37, 39, 40, 42, 46, 55, 57, 63, 64, 71, 75, 77, 79, 97, 101, 127, 148, 168, 181, 186, 187, 191, 193, 198, 199, 201, 203, 204, 206, 208, 212, 213, 215, 220, 221, 222, 226, 228, 230, 232, 233, 234, 237, 242, 250, 256, 257, 261, 263, 264, 265, 266, 267, 268, 269, 271, 274, 283, 284, 314, 316, 318, 321, 326, 327, 329, 334, 335, 337, 339, 341, 342], "build": [0, 1, 3, 4, 8, 50, 52, 54, 55, 56, 186, 208, 271, 283, 284, 285, 322, 328, 333, 342], "dict": [0, 5, 8, 14, 16, 19, 20, 41, 42, 43, 44, 46, 47, 55, 59, 74, 77, 85, 95, 99, 101, 181, 186, 187, 191, 194, 199, 201, 206, 207, 208, 212, 213, 214, 215, 220, 222, 228, 230, 232, 233, 234, 237, 242, 243, 244, 246, 248, 250, 256, 257, 267, 268, 269, 274, 280, 284, 310, 316, 325, 332, 334, 340, 342], "algorithmschedul": 0, "conf": [0, 5, 16, 19, 20, 47, 57, 59, 60, 62, 63, 64, 68, 71, 75, 243, 280, 282, 285, 308, 320, 326, 327, 328, 331, 334, 335, 336, 337, 339, 340, 342], "control": [0, 16, 280, 326, 332, 342], "differ": [0, 4, 6, 8, 10, 11, 16, 23, 37, 46, 55, 57, 176, 186, 239, 252, 267, 268, 271, 274, 277, 278, 280, 284, 311, 314, 315, 319, 320, 321, 325, 326, 328, 330, 332, 334, 337, 340, 341, 342], "phase": [0, 242, 271, 277, 326, 332, 334, 336, 342], "base": [0, 6, 7, 8, 15, 16, 21, 23, 30, 37, 46, 48, 55, 56, 57, 68, 71, 75, 85, 101, 139, 168, 177, 183, 186, 188, 192, 204, 208, 212, 234, 237, 238, 240, 242, 262, 264, 265, 267, 268, 272, 274, 277, 283, 284, 285, 290, 310, 313, 314, 318, 326, 327, 332, 333, 334, 337, 339, 340, 342, 343], "fastbiascorrect": [1, 4], "threshold": [1, 244, 252, 325], "2": [1, 3, 5, 7, 8, 16, 22, 42, 44, 46, 57, 63, 93, 107, 127, 155, 191, 208, 228, 236, 257, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 277, 280, 282, 283, 292, 309, 311, 318, 319, 321, 322, 323, 324, 325, 327, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342], "0": [1, 3, 6, 7, 8, 16, 21, 24, 25, 28, 33, 37, 46, 57, 59, 64, 99, 107, 181, 183, 191, 208, 212, 220, 228, 234, 238, 250, 253, 263, 264, 265, 267, 270, 272, 273, 277, 280, 282, 292, 310, 311, 314, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 329, 332, 334, 335, 337, 338, 339, 340, 341, 342], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 8, 16, 21, 22, 24, 25, 28, 29, 33, 37, 42, 43, 44, 46, 57, 59, 77, 80, 88, 90, 94, 108, 127, 142, 155, 179, 181, 183, 187, 191, 208, 212, 213, 215, 220, 224, 228, 234, 236, 246, 253, 257, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 277, 278, 280, 282, 283, 285, 309, 311, 316, 318, 322, 324, 325, 327, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342], "fetch": [2, 8, 114, 183, 284], "file": [2, 14, 16, 19, 20, 21, 22, 23, 26, 36, 37, 42, 47, 57, 59, 181, 187, 191, 192, 193, 206, 208, 212, 256, 257, 267, 273, 279, 283, 284, 285, 314, 317, 320, 323, 325, 326, 328, 330, 334, 337, 341], "init": [2, 325, 342], "fast_bias_correct": [2, 16, 334], "smooth_quant": [2, 16, 189, 212, 310, 334, 340], "weight_correct": [2, 16, 334], "smoothquant": [3, 80, 205, 207, 208, 234, 261, 265, 267, 268, 270, 277, 324, 333, 337], "alpha": [3, 82, 99, 208, 212, 224, 234, 277, 310, 334, 342], "5": [3, 7, 16, 25, 33, 46, 59, 99, 208, 212, 234, 265, 267, 270, 277, 283, 316, 318, 322, 325, 326, 332, 334, 337, 340, 341, 342, 343], "fake": [3, 10, 77, 208, 224, 228, 267, 277, 326, 334, 337, 340], "input": [3, 8, 16, 19, 20, 21, 22, 23, 25, 33, 36, 37, 46, 47, 51, 55, 59, 82, 107, 113, 117, 120, 121, 123, 124, 125, 127, 135, 136, 138, 139, 155, 156, 181, 183, 186, 187, 203, 206, 208, 212, 220, 224, 228, 230, 237, 242, 243, 248, 249, 250, 253, 256, 257, 262, 266, 267, 268, 277, 283, 284, 308, 309, 311, 313, 314, 316, 318, 320, 325, 326, 327, 328, 332, 334, 337, 340, 341], "channel": [3, 4, 16, 33, 37, 176, 208, 228, 253, 263, 265, 267, 282, 283, 285, 321, 322, 329, 332, 337, 341, 343], "quantiz": [3, 5, 7, 11, 13, 15, 16, 19, 20, 33, 38, 64, 66, 68, 77, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 188, 190, 193, 197, 198, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 242, 243, 244, 250, 252, 253, 256, 257, 261, 264, 270, 272, 275, 283, 289, 290, 310, 311, 314, 315, 318, 319, 320, 321, 325, 328, 331, 333, 338, 341, 342], "more": [3, 10, 37, 181, 208, 234, 261, 263, 264, 265, 267, 268, 271, 277, 281, 282, 284, 309, 310, 314, 316, 321, 322, 324, 326, 327, 329, 330, 331, 332, 336, 337, 340, 342, 343], "detail": [3, 6, 37, 208, 234, 257, 258, 261, 264, 265, 267, 268, 269, 270, 271, 277, 278, 282, 284, 285, 309, 310, 318, 320, 324, 325, 326, 327, 332, 337, 338, 339, 340, 342], "pleas": [3, 16, 21, 22, 23, 26, 46, 59, 208, 215, 261, 264, 265, 266, 267, 268, 269, 270, 277, 280, 281, 282, 283, 308, 309, 313, 314, 316, 322, 324, 325, 327, 332, 334, 336, 337, 338, 339, 340, 342], "refer": [3, 16, 21, 39, 40, 46, 59, 208, 215, 234, 264, 265, 266, 268, 269, 270, 271, 280, 282, 283, 284, 308, 311, 313, 314, 316, 320, 322, 323, 325, 326, 327, 330, 335, 338, 341, 342], "accur": [3, 208, 215, 234, 266, 267, 277, 332, 337, 340], "effici": [3, 208, 266, 274, 277, 282, 309, 311, 331, 332, 333, 337, 340, 342], "post": [3, 16, 19, 20, 59, 149, 150, 208, 215, 234, 263, 265, 266, 267, 268, 270, 272, 277, 278, 282, 283, 284, 313, 314, 316, 321, 322, 329, 332, 333, 335, 337, 340, 342], "train": [3, 16, 19, 20, 21, 23, 37, 38, 59, 110, 133, 208, 215, 234, 246, 263, 264, 265, 266, 267, 268, 270, 272, 282, 283, 284, 289, 313, 316, 319, 321, 327, 329, 331, 333, 335, 337, 339, 340, 342], "larg": [3, 208, 263, 265, 267, 268, 270, 271, 277, 282, 311, 326, 329, 333, 335, 337, 340, 343], "languag": [3, 39, 208, 226, 236, 263, 265, 267, 268, 270, 271, 277, 278, 282, 316, 329, 333, 335, 337, 340], "model": [3, 5, 7, 10, 16, 19, 20, 21, 23, 37, 38, 46, 47, 57, 59, 60, 62, 63, 64, 68, 71, 77, 79, 82, 84, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 181, 184, 186, 187, 188, 191, 193, 201, 203, 206, 207, 208, 210, 212, 215, 226, 227, 228, 230, 232, 233, 236, 237, 242, 243, 248, 249, 250, 253, 256, 257, 259, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 277, 279, 280, 282, 283, 285, 289, 308, 309, 310, 311, 313, 314, 315, 319, 320, 321, 323, 325, 327, 330, 331, 333, 334, 338, 339, 341, 342], "spiq": [3, 208, 277, 340], "data": [3, 15, 16, 19, 20, 38, 47, 59, 63, 75, 77, 79, 97, 101, 109, 181, 184, 187, 191, 198, 199, 204, 208, 213, 228, 243, 246, 250, 257, 261, 262, 263, 264, 266, 267, 268, 271, 277, 282, 283, 309, 311, 314, 318, 322, 325, 326, 327, 329, 334, 336, 337, 338, 339, 340, 341, 342], "free": [3, 19, 20, 59, 208, 265, 270, 277, 278, 330, 339, 340], "per": [3, 5, 16, 193, 208, 228, 232, 252, 263, 265, 267, 273, 283, 285, 311, 329, 332, 336, 337, 343], "static": [3, 16, 59, 75, 83, 84, 85, 95, 97, 99, 208, 211, 212, 232, 234, 237, 250, 268, 283, 284, 285, 316, 319, 321, 326, 335, 340, 342, 343], "For": [3, 7, 10, 14, 16, 23, 37, 43, 44, 46, 47, 59, 208, 228, 234, 257, 265, 267, 268, 269, 270, 274, 277, 278, 280, 281, 283, 285, 313, 314, 316, 318, 319, 321, 332, 336, 337, 340, 342, 343], "torch": [3, 7, 14, 16, 38, 47, 59, 250, 253, 256, 262, 263, 264, 265, 266, 267, 272, 274, 277, 280, 285, 286, 314, 316, 317, 319, 326, 327, 328, 329, 334, 337, 340], "backend": [3, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 32, 34, 37, 47, 48, 49, 51, 69, 234, 264, 267, 268, 280, 285, 314, 320, 321, 326, 327, 337, 341, 342], "we": [3, 4, 5, 7, 16, 39, 42, 66, 120, 121, 123, 127, 139, 176, 191, 208, 261, 262, 265, 266, 267, 268, 270, 271, 272, 273, 274, 277, 278, 280, 282, 283, 284, 285, 310, 311, 314, 316, 318, 319, 324, 325, 326, 330, 331, 332, 334, 335, 337, 338, 339, 340, 342], "onli": [3, 4, 5, 16, 21, 59, 69, 77, 107, 116, 123, 139, 155, 176, 191, 208, 223, 224, 226, 227, 228, 234, 250, 257, 261, 264, 268, 272, 273, 283, 284, 285, 308, 309, 310, 311, 314, 317, 318, 319, 324, 326, 327, 332, 333, 334, 335, 340, 342], "handl": [3, 13, 114, 181, 208, 218, 254, 280, 281, 310, 311, 340], "layer": [3, 16, 84, 85, 87, 187, 190, 193, 208, 215, 224, 244, 246, 257, 261, 265, 266, 268, 277, 283, 284, 285, 313, 317, 321, 332, 337, 338], "whose": [3, 55, 186, 208, 320, 340, 342], "smooth": [3, 16, 79, 80, 81, 82, 97, 99, 207, 208, 232, 234, 268, 282, 310, 319, 332, 342], "scale": [3, 4, 33, 37, 82, 88, 89, 90, 93, 94, 151, 176, 208, 217, 220, 221, 224, 228, 262, 263, 265, 266, 267, 271, 277, 329, 334, 337, 339, 340, 341, 342], "could": [3, 19, 20, 23, 47, 59, 191, 208, 243, 261, 264, 266, 267, 269, 271, 277, 278, 280, 313, 317, 326, 331, 332, 334, 337, 340], "absorb": [3, 208, 228, 267, 337], "support": [3, 6, 16, 19, 20, 21, 23, 30, 33, 37, 38, 46, 47, 51, 57, 59, 69, 75, 149, 208, 232, 242, 243, 246, 252, 253, 257, 259, 261, 262, 266, 269, 272, 277, 282, 284, 310, 319, 324, 326, 333, 336, 339, 342], "other": [3, 44, 55, 120, 121, 123, 186, 192, 208, 263, 268, 271, 277, 278, 280, 284, 285, 290, 310, 318, 319, 321, 323, 326, 328, 329, 330, 332, 334, 340, 341, 342, 343], "later": [3, 191, 208, 238, 262, 310], "onnx": [3, 16, 47, 54, 248, 249, 250, 255, 279, 282, 283, 284, 286, 311, 315, 316, 318, 321, 327, 328, 329, 333, 337, 340, 342], "insert": [3, 84, 130, 153, 155, 179, 208, 228, 237, 266, 267, 268, 270, 277, 280, 284, 311, 321, 326, 332, 334, 336, 337, 340], "mul": [3, 108, 118, 119, 122, 267, 316, 337, 340], "befor": [3, 16, 21, 84, 153, 155, 215, 226, 236, 240, 267, 277, 279, 285, 311, 313, 314, 317, 318, 326, 334, 337, 339, 342], "conv": [3, 16, 111, 115, 119, 124, 125, 126, 144, 155, 280, 284, 285, 326, 332, 334, 342], "linear": [3, 16, 198, 208, 218, 222, 224, 228, 265, 266, 267, 277, 280, 316, 326, 332, 337, 340, 342], "op": [3, 16, 64, 66, 68, 75, 76, 77, 82, 104, 106, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 134, 138, 141, 143, 144, 145, 146, 148, 153, 155, 159, 160, 161, 167, 169, 170, 171, 172, 176, 179, 181, 207, 208, 212, 228, 232, 242, 248, 250, 252, 257, 264, 265, 268, 277, 282, 283, 284, 285, 318, 326, 327, 332, 334, 336, 338, 340, 342], "fuse": [3, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 143, 144, 145, 146, 148, 167, 172, 212, 280, 340], "kernel": [3, 16, 267, 283, 284, 342], "futur": [3, 7, 19, 20, 261, 268, 321, 324, 326], "weightcorrect": 4, "ep": [4, 327], "1e": [4, 208, 277, 340], "05": [4, 16, 46, 208, 325, 340, 343], "correct": [4, 16, 42, 43, 44, 46, 176, 278], "int8": [4, 5, 16, 33, 75, 77, 88, 89, 90, 93, 94, 95, 99, 140, 159, 160, 161, 167, 169, 170, 171, 172, 176, 204, 228, 234, 236, 248, 249, 250, 256, 257, 263, 265, 267, 268, 269, 271, 277, 279, 280, 283, 284, 285, 308, 313, 318, 324, 326, 327, 329, 333, 334, 336, 337, 338, 339, 340, 341], "weight": [4, 7, 16, 46, 59, 66, 75, 77, 79, 82, 113, 114, 176, 193, 208, 217, 223, 224, 226, 227, 228, 234, 250, 257, 258, 261, 262, 265, 266, 268, 269, 270, 271, 272, 283, 284, 285, 309, 313, 318, 319, 320, 324, 326, 330, 332, 333, 334, 335, 340, 342], "distribut": [4, 16, 176, 183, 252, 261, 267, 271, 277, 284, 311, 322, 333, 334, 337, 338, 340, 343], "close": [4, 176, 309], "fp32": [4, 16, 19, 20, 46, 64, 68, 75, 97, 101, 132, 167, 172, 176, 187, 201, 206, 207, 210, 226, 228, 232, 246, 249, 250, 253, 256, 257, 264, 265, 266, 267, 268, 269, 271, 277, 279, 283, 285, 318, 324, 325, 326, 327, 334, 336, 337, 338, 339, 340, 342, 343], "r": [4, 176, 265, 266, 267, 269, 271, 273, 277, 322, 334, 343], "w_int8": [4, 176], "u": [4, 176], "w_fp32": [4, 176], "i": [4, 5, 7, 10, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 37, 39, 42, 44, 46, 47, 57, 59, 64, 69, 77, 102, 104, 107, 108, 113, 117, 123, 135, 138, 168, 176, 181, 183, 187, 191, 192, 201, 203, 204, 208, 212, 215, 221, 222, 226, 228, 230, 234, 236, 238, 240, 242, 243, 253, 256, 257, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 294, 297, 300, 308, 309, 310, 311, 313, 314, 316, 317, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "varianc": [4, 176], "ratio": [4, 16, 33, 37, 176, 324, 326, 332, 341, 343], "between": [4, 16, 37, 43, 46, 176, 201, 208, 257, 263, 267, 268, 271, 277, 280, 283, 284, 285, 309, 321, 325, 326, 329, 334, 337, 338, 339, 340, 341, 342], "wise": [4, 16, 63, 64, 68, 176, 190, 193, 199, 261, 284, 321, 332, 337, 340, 342], "": [4, 6, 16, 23, 36, 37, 44, 46, 47, 51, 59, 176, 181, 187, 191, 208, 226, 228, 236, 257, 261, 262, 264, 265, 266, 267, 269, 271, 273, 277, 278, 279, 284, 285, 310, 314, 316, 317, 318, 319, 321, 326, 327, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343], "equal": [4, 176, 187, 257, 263, 329, 332, 337], "minim": [4, 63, 176, 266, 267, 271, 277, 284, 285, 309, 315, 325, 326, 332, 334, 342], "round": [4, 176, 199, 234, 262, 267, 268, 277, 282, 333, 334, 337, 340], "scale_c": [4, 176], "shift": [4, 33, 176, 341], "notic": [4, 176, 264, 267, 323, 327, 338], "can": [4, 16, 19, 20, 23, 37, 42, 44, 46, 47, 57, 59, 176, 191, 208, 237, 243, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 280, 282, 283, 284, 285, 308, 310, 311, 313, 314, 316, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343], "chang": [4, 16, 66, 148, 176, 208, 237, 257, 268, 279, 284, 311, 314, 317, 323, 326, 332, 341, 342], "first": [4, 6, 16, 21, 42, 64, 75, 176, 187, 191, 208, 228, 257, 263, 264, 267, 273, 277, 280, 282, 283, 284, 285, 322, 327, 329, 334, 336, 337, 339, 340, 342], "an": [4, 16, 23, 37, 38, 39, 43, 44, 47, 59, 82, 120, 121, 123, 176, 181, 191, 192, 204, 212, 228, 242, 243, 257, 259, 263, 264, 265, 266, 267, 268, 270, 271, 272, 277, 278, 280, 282, 283, 285, 309, 311, 312, 316, 324, 325, 326, 327, 329, 330, 332, 333, 334, 337, 339, 340, 341, 342], "empir": [4, 176], "solut": [4, 176, 265, 267, 270, 277, 282, 283, 284, 317, 333, 337, 338, 340, 342], "make": [4, 176, 257, 264, 265, 267, 270, 277, 278, 283, 284, 308, 310, 311, 318, 325, 326, 332, 334, 335, 336, 337, 339, 340, 342], "thi": [4, 6, 7, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 37, 39, 42, 43, 44, 46, 47, 57, 59, 63, 68, 77, 139, 156, 168, 175, 176, 180, 183, 191, 192, 208, 212, 237, 243, 256, 257, 261, 264, 265, 266, 267, 269, 270, 271, 272, 277, 278, 279, 280, 283, 284, 285, 309, 310, 311, 313, 314, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 332, 334, 336, 337, 338, 339, 340, 341, 342], "don": [4, 16, 176, 265, 266, 280, 332, 342], "t": [4, 16, 37, 44, 120, 121, 123, 176, 191, 264, 265, 266, 271, 273, 280, 283, 310, 314, 326, 327, 332, 334, 337, 342], "min": [4, 16, 176, 228, 257, 263, 267, 271, 277, 329, 332, 334, 337, 340, 341, 342], "max": [4, 16, 37, 43, 44, 63, 176, 208, 228, 234, 257, 263, 267, 271, 277, 282, 322, 326, 329, 332, 334, 337, 340, 341, 342], "valu": [4, 5, 16, 19, 20, 21, 24, 25, 33, 37, 42, 46, 47, 59, 63, 68, 75, 77, 109, 120, 121, 123, 142, 176, 183, 191, 193, 208, 212, 220, 243, 244, 246, 257, 262, 263, 264, 265, 267, 270, 271, 277, 280, 284, 285, 309, 318, 325, 326, 327, 329, 330, 332, 334, 337, 340, 341, 342], "us": [5, 6, 8, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 36, 37, 39, 40, 42, 46, 57, 59, 63, 66, 68, 71, 75, 77, 82, 84, 85, 97, 101, 102, 123, 183, 187, 191, 199, 200, 201, 203, 204, 207, 208, 211, 212, 213, 220, 221, 222, 228, 233, 237, 238, 242, 243, 244, 245, 246, 249, 250, 251, 253, 257, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 277, 278, 279, 280, 283, 284, 308, 309, 310, 313, 314, 316, 318, 319, 320, 323, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343], "evalu": [5, 7, 19, 20, 21, 39, 42, 43, 44, 46, 47, 57, 59, 233, 243, 246, 268, 270, 271, 272, 277, 283, 284, 310, 313, 320, 321, 324, 325, 326, 327, 330, 332, 334, 339, 340, 342], "perform": [5, 16, 21, 33, 46, 57, 59, 64, 68, 79, 80, 148, 208, 262, 264, 266, 267, 269, 271, 272, 273, 274, 277, 279, 280, 282, 283, 284, 308, 312, 313, 315, 316, 319, 321, 322, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 16, 21, 23, 33, 37, 42, 46, 57, 59, 85, 88, 89, 90, 93, 94, 99, 102, 124, 125, 142, 144, 167, 172, 176, 179, 180, 181, 183, 191, 198, 199, 201, 204, 208, 212, 213, 215, 220, 222, 224, 228, 234, 237, 246, 253, 256, 257, 265, 267, 269, 271, 272, 273, 283, 284, 311, 318, 325, 326, 334, 337, 340, 341, 342], "set": [5, 6, 7, 8, 15, 16, 19, 20, 21, 23, 26, 37, 42, 46, 47, 55, 59, 84, 98, 104, 148, 181, 183, 185, 186, 191, 201, 204, 208, 226, 228, 233, 234, 236, 242, 243, 257, 264, 265, 267, 268, 269, 270, 272, 273, 274, 277, 278, 282, 284, 308, 311, 314, 316, 317, 318, 320, 321, 325, 326, 327, 332, 334, 337, 339, 340, 342], "specifi": [5, 10, 16, 19, 20, 37, 42, 46, 47, 59, 156, 191, 199, 203, 208, 212, 213, 234, 236, 242, 243, 256, 257, 274, 277, 284, 285, 314, 318, 325, 326, 330, 332, 337, 341, 342], "environ": [5, 238, 241, 264, 268, 274, 278, 282, 308, 342], "variabl": [5, 16, 23, 63, 77, 192, 238, 264, 274, 332, 342], "new": [5, 23, 37, 57, 181, 183, 188, 208, 228, 238, 261, 264, 265, 266, 267, 277, 279, 284, 314, 326, 327, 332, 333, 334, 337, 338, 339, 341], "env": [5, 317], "two": [5, 23, 28, 42, 69, 191, 257, 263, 264, 266, 267, 270, 272, 275, 277, 279, 280, 310, 311, 314, 316, 318, 326, 327, 329, 332, 334, 336, 337, 339, 340, 342], "case": [5, 8, 16, 36, 37, 57, 123, 127, 191, 236, 238, 261, 267, 271, 277, 285, 310, 311, 313, 314, 318, 320, 325, 330, 332, 333, 334, 337, 338, 340, 341, 343], "exist": [5, 55, 107, 186, 187, 240, 257, 264, 268, 316, 325, 342], "alreadi": [5, 23, 36, 191, 264, 268, 283, 317, 321, 342], "param": [5, 8, 10, 46, 63, 183, 257, 283, 328, 342], "true": [5, 7, 16, 21, 23, 24, 36, 37, 40, 46, 57, 59, 74, 88, 89, 90, 94, 95, 99, 138, 179, 181, 183, 191, 193, 201, 207, 208, 213, 215, 218, 222, 224, 227, 228, 234, 237, 246, 250, 253, 256, 257, 262, 265, 266, 267, 268, 269, 271, 272, 273, 277, 282, 284, 311, 314, 318, 325, 326, 334, 335, 337, 340, 341, 342], "set_all_env_var": 5, "configur": [5, 6, 7, 8, 15, 16, 19, 20, 23, 26, 46, 47, 57, 59, 68, 77, 97, 101, 201, 203, 204, 206, 208, 212, 217, 222, 232, 234, 237, 242, 243, 245, 246, 250, 255, 256, 268, 272, 274, 280, 283, 284, 326, 330, 332, 334, 337, 338, 340, 341, 342, 343], "neural": [5, 8, 16, 33, 34, 37, 38, 45, 46, 47, 51, 58, 59, 66, 67, 73, 86, 98, 99, 100, 101, 185, 188, 189, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 247, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 279, 283, 284, 285, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 327, 328, 329, 330, 331, 333, 334, 337, 338, 340, 341, 342, 343], "compressor": [5, 8, 16, 33, 34, 37, 38, 45, 46, 47, 51, 58, 59, 67, 73, 86, 98, 99, 100, 101, 185, 188, 189, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 247, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 279, 283, 284, 285, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 342, 343], "physic": [5, 8, 278, 308], "core": [5, 8, 16, 81, 202, 219, 267, 273, 274, 279, 282, 308, 322, 323, 343], "get_architectur": 5, "get": [5, 8, 15, 16, 37, 46, 55, 59, 68, 75, 77, 95, 98, 120, 121, 123, 181, 183, 186, 187, 193, 208, 212, 215, 228, 234, 242, 246, 250, 253, 257, 261, 265, 268, 273, 277, 284, 309, 317, 321, 322, 324, 326, 333, 337, 340, 342, 344], "architectur": [5, 261, 264, 267, 274, 277, 282, 308, 319, 326, 332, 333, 337], "system": [5, 8, 191, 257, 263, 264, 274, 308, 329, 332, 343], "get_threads_per_cor": 5, "thread": [5, 16, 311, 317], "get_thread": 5, "list": [5, 6, 7, 8, 10, 16, 19, 20, 21, 33, 37, 39, 40, 42, 43, 44, 46, 47, 55, 59, 74, 79, 95, 98, 99, 101, 107, 181, 186, 193, 201, 208, 212, 213, 215, 228, 233, 234, 242, 243, 244, 249, 250, 257, 265, 268, 270, 271, 280, 282, 283, 316, 318, 322, 324, 326, 330, 332, 334, 336, 340, 342], "get_physical_id": 5, "socket": [5, 8, 257, 343], "get_core_id": 5, "id": [5, 36, 39, 41, 42, 43, 44, 325, 339, 342], "get_bounded_thread": 5, "core_id": 5, "bind": [5, 274], "instanc": [5, 8, 16, 19, 20, 43, 44, 46, 47, 59, 63, 77, 204, 243, 257, 267, 273, 278, 279, 280, 283, 308, 319, 326, 337, 342, 343], "run_inst": 5, "b_dataload": [5, 16, 308, 326], "none": [5, 6, 7, 10, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 37, 42, 46, 47, 57, 59, 60, 62, 63, 64, 68, 71, 75, 80, 84, 85, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 116, 142, 156, 181, 183, 187, 188, 191, 193, 198, 199, 200, 208, 212, 213, 215, 218, 221, 224, 226, 227, 228, 230, 233, 234, 236, 237, 242, 243, 244, 246, 249, 250, 253, 256, 257, 263, 267, 268, 271, 273, 282, 283, 284, 311, 325, 329, 334, 337, 341, 342], "b_func": [5, 308], "run": [5, 16, 19, 20, 36, 47, 59, 63, 79, 181, 191, 208, 243, 264, 267, 268, 271, 273, 274, 277, 282, 283, 308, 314, 317, 318, 326, 333, 334, 337, 338, 339, 342], "object": [5, 7, 14, 16, 19, 20, 21, 22, 23, 37, 38, 42, 46, 47, 55, 56, 59, 63, 77, 127, 139, 168, 181, 183, 186, 187, 191, 192, 194, 201, 204, 206, 208, 212, 228, 242, 243, 246, 256, 257, 261, 266, 268, 271, 280, 284, 289, 308, 310, 311, 317, 325, 326, 328, 331, 332, 334, 341, 342, 343], "benchmarkconfig": [5, 16, 308, 326], "contain": [5, 16, 19, 20, 21, 22, 23, 42, 43, 44, 47, 59, 120, 121, 123, 127, 175, 181, 191, 201, 204, 207, 208, 212, 220, 243, 246, 250, 256, 261, 267, 271, 282, 309, 317, 321, 325, 332, 337, 342], "accuraci": [5, 7, 16, 19, 20, 46, 47, 57, 59, 64, 243, 263, 265, 266, 267, 271, 272, 274, 280, 282, 284, 285, 309, 311, 313, 314, 315, 316, 319, 325, 326, 329, 330, 331, 332, 333, 337, 338, 339, 340, 343], "goal": [5, 47, 59, 272, 277, 284, 311, 331, 334, 342], "tune": [5, 6, 7, 10, 13, 16, 19, 20, 21, 23, 47, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 98, 208, 233, 234, 243, 257, 264, 265, 266, 267, 268, 272, 275, 282, 283, 284, 309, 310, 311, 314, 319, 321, 323, 326, 327, 330, 332, 333, 336, 338, 339], "prefer": [5, 59, 267, 277, 332, 337], "calibr": [5, 16, 19, 20, 59, 81, 97, 101, 142, 207, 208, 213, 233, 237, 252, 261, 266, 267, 268, 271, 277, 283, 285, 320, 321, 332, 334, 337, 342], "space": [5, 16, 19, 20, 44, 47, 59, 63, 68, 75, 268, 272, 277, 278, 279, 283, 284, 285, 310, 332, 334, 340], "etc": [5, 36, 44, 47, 59, 188, 256, 282, 321, 332, 339, 342], "dataload": [5, 19, 20, 21, 32, 59, 79, 82, 183, 208, 213, 215, 228, 243, 246, 261, 271, 280, 282, 283, 284, 313, 314, 320, 326, 327, 331, 332, 334, 335, 336, 337, 340, 341], "framework": [5, 6, 11, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 37, 46, 47, 48, 49, 51, 69, 75, 84, 95, 185, 246, 261, 264, 266, 271, 272, 277, 283, 285, 309, 310, 314, 315, 319, 320, 321, 325, 326, 327, 332, 333, 334, 341, 342, 343], "custom": [5, 46, 57, 88, 89, 90, 91, 93, 94, 192, 228, 256, 268, 272, 277, 308, 313, 332, 333, 337, 339], "If": [5, 7, 10, 16, 19, 20, 23, 37, 47, 59, 120, 121, 123, 127, 191, 208, 226, 228, 230, 236, 242, 243, 268, 271, 277, 279, 280, 284, 308, 310, 311, 314, 317, 322, 323, 325, 326, 330, 332, 334, 337, 339, 340, 341, 342], "user": [5, 16, 19, 20, 23, 26, 30, 37, 46, 47, 57, 59, 64, 77, 191, 201, 208, 212, 234, 242, 243, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 280, 283, 284, 285, 289, 308, 310, 311, 313, 316, 318, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 341, 342], "pass": [5, 15, 46, 59, 130, 181, 187, 191, 192, 206, 208, 226, 236, 256, 257, 267, 277, 279, 280, 283, 308, 313, 314, 320, 325, 326, 332, 334, 336, 340], "need": [5, 10, 16, 19, 20, 23, 30, 37, 46, 47, 57, 59, 68, 155, 183, 199, 206, 208, 226, 236, 243, 250, 256, 257, 267, 270, 272, 274, 277, 280, 283, 310, 311, 314, 317, 321, 326, 332, 334, 335, 336, 337, 338, 340, 341, 342], "generate_prefix": [5, 8], "core_list": [5, 8], "gener": [5, 7, 8, 19, 20, 23, 24, 25, 26, 37, 39, 47, 59, 63, 95, 99, 102, 140, 181, 183, 208, 212, 213, 215, 233, 234, 243, 263, 264, 265, 267, 268, 269, 274, 277, 279, 280, 283, 285, 311, 325, 326, 327, 329, 330, 332, 333, 334, 336, 337, 340, 341, 342], "command": [5, 8, 243, 273, 274, 314], "prefix": [5, 8, 181, 191, 193, 228], "numactl": [5, 8, 317], "index": [5, 16, 23, 120, 121, 123, 183, 257, 277, 282, 322, 325, 337, 340], "bound": [5, 37, 42, 63, 127, 208, 325, 341], "specif": [5, 6, 8, 16, 21, 22, 23, 24, 28, 30, 46, 59, 183, 185, 204, 208, 242, 263, 264, 266, 267, 268, 271, 274, 278, 283, 284, 309, 310, 311, 318, 320, 324, 325, 326, 327, 328, 329, 330, 332, 337, 342], "call_on": 5, "cmd": [5, 322], "log_fil": 5, "execut": [5, 11, 16, 59, 60, 62, 107, 188, 191, 207, 215, 243, 246, 256, 257, 266, 267, 277, 313, 326, 327, 331, 332, 334, 337, 339, 342, 343], "one": [5, 37, 39, 42, 46, 155, 156, 191, 208, 212, 228, 264, 267, 268, 271, 272, 273, 277, 283, 309, 313, 314, 318, 321, 322, 325, 326, 327, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342], "dump": [5, 8, 192, 208, 212, 242, 250, 257, 271, 277, 279, 334], "log": [5, 13, 15, 179, 208, 254, 273, 280, 339, 342], "window": [5, 8, 273, 274, 308, 322], "config_inst": 5, "raw_cmd": [5, 8], "multi": [5, 8, 42, 46, 59, 273, 311, 321, 326, 330, 332, 334, 342], "trigger": [5, 8, 273], "sub": [5, 119, 212, 310, 342], "process": [5, 7, 13, 15, 16, 19, 20, 21, 22, 23, 33, 37, 47, 59, 60, 62, 63, 79, 207, 208, 242, 243, 256, 257, 262, 263, 266, 267, 270, 271, 272, 274, 277, 283, 284, 285, 309, 311, 313, 314, 316, 326, 329, 331, 332, 334, 335, 337, 340, 341], "raw": [5, 22, 26, 29, 68, 207, 210, 226, 232, 325, 342], "summary_benchmark": 5, "summari": [5, 8, 243, 343], "profil": [5, 16, 38], "benchmark_with_raw_cmd": 5, "string": [5, 15, 16, 23, 39, 42, 51, 55, 181, 186, 187, 191, 192, 215, 242, 246, 257, 271, 325, 341], "exampl": [5, 6, 7, 10, 14, 16, 21, 22, 23, 33, 37, 42, 43, 44, 46, 47, 57, 59, 77, 187, 191, 203, 206, 221, 228, 230, 238, 242, 243, 256, 257, 261, 265, 271, 272, 274, 278, 282, 284, 285, 289, 319, 320, 321, 336, 338, 341, 342, 344], "accord": [5, 16, 21, 22, 23, 37, 66, 68, 188, 237, 242, 246, 271, 272, 277, 283, 314, 332, 336, 340, 341, 342], "config": [5, 6, 7, 10, 14, 15, 19, 20, 21, 38, 47, 75, 76, 77, 80, 84, 85, 96, 97, 98, 100, 101, 185, 201, 204, 207, 208, 212, 219, 222, 226, 233, 235, 237, 242, 243, 246, 256, 257, 262, 264, 266, 267, 268, 269, 282, 284, 285, 289, 290, 308, 310, 311, 313, 314, 316, 321, 325, 326, 327, 328, 331, 332, 334, 336, 337, 339, 342], "from": [5, 6, 7, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 39, 42, 43, 44, 47, 55, 57, 59, 75, 77, 84, 114, 120, 121, 123, 181, 183, 186, 188, 191, 193, 201, 203, 206, 207, 208, 210, 212, 228, 232, 236, 242, 243, 246, 248, 249, 250, 253, 256, 257, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 283, 285, 308, 310, 311, 313, 314, 315, 316, 317, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "import": [5, 7, 15, 16, 47, 57, 59, 181, 236, 240, 243, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 280, 282, 285, 308, 311, 313, 314, 316, 319, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342], "fit_with_raw_cmd": 5, "iter": [5, 16, 19, 20, 23, 24, 47, 59, 79, 97, 101, 181, 183, 208, 212, 213, 220, 228, 234, 243, 246, 267, 271, 272, 280, 283, 308, 311, 326, 332, 334, 340, 342], "100": [5, 6, 7, 16, 23, 97, 98, 101, 238, 271, 277, 308, 314, 320, 322, 326, 334, 341, 342, 343], "cores_per_inst": [5, 16, 308, 326], "4": [5, 8, 16, 30, 33, 37, 39, 40, 42, 77, 107, 213, 224, 228, 234, 262, 263, 265, 266, 267, 268, 273, 277, 278, 282, 283, 285, 308, 314, 315, 318, 321, 322, 325, 326, 329, 332, 334, 337, 340, 341, 342, 343], "num_of_inst": [5, 16, 308, 326], "7": [5, 8, 16, 57, 208, 220, 228, 265, 267, 270, 277, 285, 308, 317, 318, 326, 332, 334, 338, 340, 342, 343], "test": [5, 16, 37, 279, 282, 343], "py": [5, 8, 16, 40, 42, 43, 44, 181, 238, 269, 273, 274, 280, 283, 310, 314, 322, 326, 334, 338], "fit": [5, 16, 47, 59, 63, 243, 280, 282, 308, 311, 314, 320, 325, 326, 327, 328, 332, 334, 335, 336, 337], "pb": [5, 16, 47, 55, 59, 186, 271, 308, 314, 326, 328, 343], "eval_dataload": [5, 16, 19, 20, 47, 59, 60, 62, 63, 64, 68, 71, 243, 308, 320, 325, 326, 334, 335, 342], "configregistri": [6, 14], "A": [6, 7, 13, 15, 16, 23, 37, 39, 42, 43, 44, 46, 47, 51, 55, 63, 79, 82, 108, 127, 128, 181, 185, 186, 187, 192, 199, 201, 204, 207, 208, 210, 220, 222, 228, 238, 243, 257, 265, 267, 268, 277, 279, 284, 310, 311, 315, 318, 324, 325, 326, 328, 332, 333, 334, 337, 340, 341, 342], "registri": [6, 238], "manag": [6, 243, 246, 326], "algorithm": [6, 10, 16, 38, 39, 46, 86, 95, 97, 101, 187, 231, 232, 234, 236, 237, 242, 246, 252, 267, 268, 271, 272, 274, 277, 282, 283, 284, 285, 310, 313, 318, 319, 321, 324, 332, 334], "within": [6, 7, 42, 55, 186, 264, 278, 280, 285, 309, 327, 332, 333, 337, 340, 342], "register_config": [6, 310], "framework_nam": [6, 310], "algo_nam": [6, 101, 237, 310], "prioriti": [6, 238, 240, 310], "float": [6, 16, 21, 33, 40, 42, 43, 44, 74, 79, 82, 99, 188, 208, 213, 228, 234, 237, 238, 257, 262, 263, 264, 265, 266, 267, 269, 270, 272, 277, 310, 325, 329, 334, 340, 341], "int": [6, 10, 15, 16, 21, 22, 33, 37, 40, 42, 46, 77, 79, 80, 84, 97, 98, 101, 181, 199, 208, 212, 213, 218, 220, 221, 224, 228, 234, 249, 250, 253, 257, 267, 271, 282, 310, 311, 325, 326, 337, 341], "usag": [6, 7, 10, 42, 187, 228, 238, 239, 242, 268, 269, 274, 277, 284, 314, 315, 330, 337, 341], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 238, 267, 277, 284, 332, 337, 340], "number": [6, 7, 15, 16, 22, 33, 37, 43, 44, 46, 63, 79, 120, 121, 183, 208, 213, 221, 228, 238, 246, 257, 262, 267, 272, 273, 277, 308, 311, 314, 325, 332, 334, 337, 339, 340, 341, 342], "indic": [6, 16, 21, 42, 183, 191, 204, 221, 238, 271, 280, 311, 317], "higher": [6, 16, 19, 20, 47, 59, 238, 243, 274, 277, 280, 316, 325, 332, 334, 337, 339], "which": [6, 16, 21, 22, 23, 33, 39, 44, 46, 51, 57, 59, 63, 109, 136, 156, 187, 191, 208, 215, 220, 221, 242, 257, 261, 264, 266, 267, 268, 269, 271, 272, 277, 278, 280, 282, 283, 284, 285, 309, 311, 314, 317, 318, 321, 325, 326, 327, 328, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342], "tri": [6, 16, 310, 342], "auto": [6, 7, 16, 61, 67, 98, 208, 233, 234, 238, 240, 257, 265, 268, 275, 280, 282, 309, 319, 332, 334, 337], "stage": [6, 15, 60, 62, 69, 332, 342], "default": [6, 10, 15, 16, 19, 20, 21, 22, 23, 33, 37, 39, 46, 55, 77, 95, 99, 149, 181, 186, 187, 191, 193, 203, 204, 207, 208, 213, 220, 226, 228, 230, 232, 233, 234, 236, 237, 242, 246, 249, 250, 253, 257, 263, 264, 265, 267, 268, 271, 272, 273, 274, 280, 283, 310, 311, 318, 321, 325, 326, 327, 329, 330, 332, 334, 336, 337, 339, 340, 341, 342], "baseconfig": [6, 7, 10, 95, 97, 98, 101, 233, 234, 237, 268, 271, 310], "white_list": [6, 95, 99, 234], "util": [6, 7, 9, 16, 38, 40, 67, 86, 97, 98, 100, 101, 190, 197, 202, 205, 209, 213, 223, 231, 232, 234, 261, 271, 274, 284, 285, 286, 309, 310, 314, 326, 332, 334, 342], "op_name_or_module_typ": [6, 95, 99, 234], "default_white_list": [6, 95, 99, 234], "params_list": [6, 10], "tunabl": [6, 10], "composableconfig": [6, 310], "repres": [6, 7, 10, 11, 23, 28, 42, 44, 46, 201, 221, 266, 267, 271, 277, 278, 285, 309, 316, 332, 334, 335, 342], "compos": [6, 37, 246, 341], "allow": [6, 63, 228, 264, 266, 267, 272, 314, 325, 326, 327, 332, 337, 340, 342], "multipl": [6, 17, 18, 21, 22, 24, 25, 26, 27, 28, 32, 34, 37, 47, 48, 49, 51, 57, 271, 308, 316, 319, 326, 331, 332, 339, 340, 342], "togeth": [6, 16, 37, 322, 333, 341], "oper": [6, 10, 16, 33, 79, 95, 156, 181, 201, 208, 262, 264, 265, 266, 267, 268, 269, 270, 271, 277, 280, 308, 311, 316, 332, 334, 337, 340, 341, 342], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 310], "fwk_name": [6, 310], "retriev": [6, 13, 183, 201, 208, 332], "given": [6, 37, 42, 59, 120, 121, 123, 188, 193, 201, 204, 208, 222, 228, 237, 242, 268, 272, 285, 332, 340, 341], "union": [6, 46, 230, 233, 234, 242, 243, 268, 271, 325], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 98, 233, 264, 268, 269, 270, 271, 272], "callabl": [7, 16, 44, 80, 97, 98, 101, 191, 207, 232, 233, 234, 237, 238, 242, 243, 268, 271, 310, 311], "eval_arg": [7, 98, 233, 264, 268, 269, 271], "wrapper": [7, 37, 42, 46, 51, 55, 79, 128, 185, 186, 196, 224, 228, 271, 336], "collect": [7, 8, 35, 37, 44, 46, 187, 198, 207, 208, 211, 214, 216, 225, 244, 257, 271, 277, 284, 334, 342], "note": [7, 42, 69, 108, 188, 192, 261, 262, 264, 265, 266, 267, 270, 273, 277, 282, 284, 285, 310, 311, 314, 316, 318, 319, 322, 324, 326, 332, 334, 337, 340, 342], "deprec": [7, 310, 338, 341], "def": [7, 19, 20, 59, 120, 121, 123, 187, 242, 243, 264, 265, 268, 269, 271, 272, 277, 280, 283, 310, 311, 313, 314, 325, 326, 334, 340, 342], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 9, 95, 97, 98, 99, 101, 233, 234, 237], "sampler": [7, 74, 183, 213, 234, 267, 272, 311, 314], "config_sourc": 7, "sequentialsampl": [7, 183], "size": [7, 23, 29, 33, 37, 55, 57, 150, 183, 186, 213, 221, 228, 257, 263, 266, 267, 277, 278, 284, 311, 314, 317, 326, 329, 330, 332, 334, 335, 337, 340, 341, 343], "sampl": [7, 16, 21, 22, 23, 33, 37, 46, 63, 130, 183, 208, 213, 267, 271, 272, 273, 277, 311, 315, 321, 334, 337, 340, 341, 342, 343], "element": [7, 42, 183, 199, 228, 257, 263, 267, 277, 321, 325, 329, 332, 337, 340], "sequenti": [7, 60, 62, 183, 187, 215, 272, 342], "alwai": [7, 42, 46, 59, 272, 325, 326, 337], "same": [7, 16, 21, 37, 42, 82, 136, 181, 208, 257, 263, 267, 272, 273, 277, 283, 285, 308, 311, 314, 318, 326, 329, 332, 334, 337, 340, 341, 342], "order": [7, 39, 40, 63, 68, 77, 267, 272, 277, 280, 325, 337, 340, 342], "_configset": 7, "configload": 7, "config_set": [7, 264, 269, 270, 271, 272], "default_sampl": [7, 272], "skip_verified_config": 7, "bool": [7, 15, 16, 21, 23, 33, 37, 40, 46, 74, 82, 95, 99, 181, 191, 193, 201, 204, 207, 208, 213, 215, 218, 220, 221, 222, 228, 234, 237, 240, 250, 253, 256, 257, 267, 268, 311, 325, 341], "yield": [7, 19, 20, 47, 59, 63, 183, 243, 277, 311, 334, 342], "tuningconfig": [7, 98, 233, 264, 268, 269, 270, 271, 272], "tolerable_loss": [7, 16, 272, 326, 342], "01": [7, 16, 220, 234, 267, 326, 337, 342, 343], "max_trial": [7, 16, 264, 272, 326, 342], "pipelin": [7, 279, 313, 326, 331], "tune_config": [7, 98, 233, 264, 268, 269, 270, 271, 272, 284], "config1": 7, "config2": 7, "3": [7, 8, 16, 23, 37, 42, 181, 191, 208, 236, 257, 263, 264, 266, 267, 269, 271, 272, 273, 277, 280, 282, 292, 309, 310, 311, 314, 316, 318, 319, 322, 325, 326, 327, 329, 330, 332, 334, 337, 338, 339, 340, 341, 342, 343], "stop": [7, 16, 261, 272, 326, 342], "when": [7, 16, 21, 22, 30, 37, 40, 59, 97, 101, 107, 117, 123, 181, 191, 192, 201, 243, 266, 267, 271, 272, 273, 274, 277, 278, 284, 310, 311, 326, 332, 334, 337, 340, 341, 342], "either": [7, 16, 42, 191, 266, 271, 272, 274, 277, 331, 334], "follow": [7, 23, 39, 42, 141, 156, 188, 215, 263, 264, 265, 270, 273, 274, 277, 278, 279, 280, 282, 283, 284, 285, 310, 311, 313, 314, 317, 318, 322, 323, 325, 326, 327, 328, 329, 331, 332, 334, 337, 340, 342], "condit": [7, 21, 22, 23, 37, 60, 62, 138, 272, 323, 341, 342], "met": [7, 272, 277, 318, 334], "trial": [7, 272, 342], "reach": [7, 16, 279, 311, 332, 342], "maximum": [7, 16, 21, 37, 40, 55, 63, 108, 186, 208, 220, 267, 277, 285, 309, 326, 332, 334, 340, 341], "metric": [7, 16, 19, 20, 38, 47, 59, 243, 246, 261, 270, 283, 284, 314, 326, 327, 334, 339, 340, 342, 343], "loss": [7, 16, 46, 243, 264, 266, 267, 271, 277, 309, 313, 314, 315, 324, 325, 326, 327, 331, 332, 333, 334, 337, 340, 342], "toler": [7, 271], "calcul": [7, 16, 24, 25, 43, 44, 68, 113, 183, 208, 220, 244, 257, 265, 267, 271, 277, 309, 325, 326, 330, 332, 334, 337, 339, 340, 342], "relative_loss": 7, "fp32_baselin": [7, 246, 283], "eval_result_of_q_model": 7, "99": [7, 99, 324, 343], "so": [7, 37, 77, 237, 261, 263, 267, 268, 271, 277, 280, 283, 317, 321, 327, 329, 334, 336, 337, 340, 341], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 237, 268], "init_tun": 7, "tupl": [7, 16, 19, 20, 33, 37, 47, 59, 74, 98, 101, 194, 201, 203, 206, 207, 208, 212, 213, 220, 221, 230, 232, 233, 234, 237, 242, 243, 250, 256, 268, 271, 284, 310, 325, 326, 334, 341], "tuninglogg": [7, 13], "initi": [7, 19, 20, 21, 59, 75, 78, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 96, 181, 191, 195, 204, 242, 243, 268, 271, 277, 285, 325, 332, 334, 340, 342], "api": [8, 42, 46, 59, 74, 75, 86, 98, 99, 100, 101, 123, 128, 156, 185, 187, 188, 215, 231, 233, 234, 235, 237, 239, 257, 265, 267, 272, 277, 280, 282, 286, 288, 294, 297, 300, 316, 317, 319, 321, 322, 326, 338, 339, 342, 344], "intel": [8, 38, 45, 46, 58, 59, 67, 73, 86, 98, 99, 100, 101, 187, 188, 189, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 247, 259, 261, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 278, 279, 281, 283, 284, 285, 309, 312, 313, 315, 316, 317, 318, 319, 323, 324, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 340, 342, 343], "get_linux_numa_info": 8, "numa": [8, 273], "inform": [8, 16, 19, 20, 46, 185, 221, 257, 263, 265, 267, 271, 273, 274, 278, 279, 281, 282, 283, 284, 285, 286, 288, 294, 297, 300, 309, 310, 318, 326, 328, 329, 332, 336, 337, 338, 340, 343, 344], "linux": [8, 273, 274, 308, 317], "demo": [8, 268, 326], "numa_index": 8, "physical_cpu": 8, "xxx": [8, 23, 326], "logical_cpu": 8, "e": [8, 16, 191, 267, 274, 277, 278, 279, 282, 315, 332, 337, 340, 342], "g": [8, 16, 191, 267, 274, 277, 279, 315, 332, 337, 338, 340, 342], "numa_info": 8, "23": [8, 324, 343], "48": [8, 277, 340, 343], "71": [8, 324, 343], "24": [8, 273, 332, 342, 343], "47": [8, 273, 324, 343], "72": [8, 277, 324, 340, 343], "95": [8, 46, 324, 325, 343], "get_windows_numa_info": 8, "due": [8, 277, 285, 316, 332, 334, 340], "avail": [8, 16, 51, 208, 240, 264, 267, 268, 274, 282, 286, 288, 294, 297, 300, 310, 315, 317, 319, 321, 332, 342, 343], "info": [8, 15, 35, 51, 187, 207, 208, 212, 242, 253, 254, 257, 280, 310, 328], "dump_numa_info": 8, "stat": [8, 242], "shell": [8, 282], "numa_node_index": 8, "cpu": [8, 15, 16, 143, 144, 145, 146, 187, 191, 193, 196, 208, 215, 224, 226, 228, 236, 238, 253, 257, 264, 266, 271, 273, 284, 308, 309, 321, 326, 327, 333, 334, 335, 336, 337], "node": [8, 55, 79, 103, 107, 108, 109, 110, 113, 115, 117, 120, 121, 123, 127, 130, 133, 135, 136, 137, 150, 156, 168, 181, 186, 201, 208, 228, 238, 248, 250, 273, 283, 314, 335, 342, 343], "parse_str2list": 8, "cpu_rang": 8, "pars": [8, 21, 22, 33, 37, 181, 186, 207, 208, 212, 284, 285, 341], "8": [8, 16, 36, 191, 199, 208, 213, 228, 234, 262, 263, 265, 267, 268, 277, 280, 284, 309, 310, 318, 322, 329, 332, 333, 337, 340, 342, 343], "machin": [8, 39, 267, 271, 274, 316, 322, 333, 340], "readabl": [8, 310], "format_list2str": 8, "format": [8, 16, 21, 22, 23, 42, 75, 84, 85, 107, 181, 185, 186, 199, 226, 236, 239, 250, 253, 263, 264, 266, 268, 271, 273, 277, 282, 284, 285, 310, 314, 316, 325, 326, 327, 328, 329, 333, 334, 337], "back": [8, 37, 191], "human": [8, 342], "get_reversed_numa_info": 8, "revers": 8, "get_numa_nod": 8, "reversed_numa_info": 8, "current": [8, 16, 63, 69, 123, 208, 228, 242, 257, 266, 267, 268, 272, 280, 282, 283, 285, 309, 310, 314, 318, 319, 326, 330, 332, 334, 337, 340, 342], "set_cores_for_inst": 8, "arg": [8, 21, 22, 23, 63, 107, 194, 215, 228, 232, 242, 253, 254, 263, 268, 314, 326, 329, 332, 334, 337, 340, 341], "each": [8, 16, 23, 26, 33, 37, 40, 42, 43, 44, 68, 82, 183, 191, 207, 208, 212, 228, 257, 261, 267, 270, 273, 277, 279, 283, 284, 285, 310, 313, 318, 326, 330, 332, 335, 337, 339, 341, 342], "ar": [8, 16, 21, 37, 42, 46, 60, 62, 63, 77, 120, 121, 188, 191, 201, 204, 208, 212, 246, 256, 257, 262, 263, 264, 266, 267, 268, 270, 271, 274, 277, 278, 279, 280, 283, 284, 310, 311, 313, 314, 315, 316, 318, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342], "below": [8, 16, 46, 59, 108, 119, 127, 261, 263, 265, 267, 268, 271, 272, 277, 279, 280, 282, 283, 284, 285, 311, 314, 319, 320, 325, 329, 330, 331, 332, 334, 337, 339, 340, 342], "num_inst": [8, 273], "b": [8, 21, 127, 213, 257, 267, 277, 279, 309, 325, 332, 337, 340, 342], "num_cores_per_inst": [8, 273], "c": [8, 23, 127, 257, 267, 273, 277, 317, 337, 342], "argpars": 8, "argument": [8, 16, 191, 201, 208, 226, 233, 236, 237, 268, 271, 272, 337], "instance_index": 8, "node_index": 8, "cpu_index": 8, "num_cpu": 8, "core_list_per_inst": 8, "start": [8, 16, 37, 42, 64, 261, 322, 333, 341, 342, 344], "command_prefix": 8, "run_multi_instance_command": 8, "subprocess": [8, 310, 311], "script": [8, 39, 40, 43, 44, 279, 282, 314, 321, 333], "summary_latency_throughput": 8, "logfile_dict": 8, "interfac": [8, 97, 139, 186, 188, 246, 264, 266, 268, 271, 277, 321, 326, 334, 338], "modul": [9, 12, 190, 202, 205, 209, 219, 223, 229, 241, 261, 264, 267, 268, 272, 280, 282, 290, 310, 311, 319, 321, 325, 326, 328, 332, 336, 337], "base_tun": [9, 98, 233, 269, 271], "benchmark": [9, 16, 38, 57, 257, 261, 282, 289, 290, 319, 328, 342, 343], "tuning_param": 9, "paramlevel": 10, "enumer": [10, 11, 243, 263, 283, 313, 314, 326, 329, 331, 332], "level": [10, 64, 254, 263, 277, 278, 329, 340, 342], "op_level": 10, "op_type_level": 10, "model_level": 10, "tuningparam": 10, "default_v": 10, "ani": [10, 42, 44, 74, 98, 188, 191, 217, 230, 237, 238, 257, 268, 271, 278, 282, 285, 310, 314, 332, 339, 342], "tunable_typ": 10, "option": [10, 15, 16, 19, 20, 21, 37, 42, 46, 47, 59, 75, 77, 187, 188, 191, 193, 203, 204, 208, 210, 213, 220, 226, 228, 230, 232, 233, 234, 236, 237, 242, 243, 249, 250, 251, 253, 257, 267, 268, 271, 277, 284, 285, 310, 311, 318, 322, 326, 332, 334, 337, 339, 340, 341, 342], "defin": [10, 16, 19, 20, 47, 59, 139, 243, 256, 269, 271, 272, 277, 278, 283, 284, 311, 313, 318, 321, 325, 326, 331, 332, 334, 337, 339, 340, 342], "fakealgoconfig": 10, "algo": [10, 84, 85, 204, 237, 246], "simpl": [10, 37, 271, 277, 326, 332, 339, 340, 342], "like": [10, 16, 19, 20, 23, 46, 55, 59, 127, 148, 150, 181, 183, 186, 191, 243, 264, 267, 271, 277, 279, 280, 282, 283, 284, 313, 321, 331, 332, 334, 337, 338, 340, 342], "give": [10, 284, 342], "enough": [10, 208, 271, 277, 334], "creat": [10, 16, 21, 23, 42, 75, 77, 183, 192, 201, 204, 246, 261, 277, 278, 283, 328, 332, 334, 339, 342], "implicitli": [10, 191], "simple_attr": 10, "complex": [10, 264, 310, 326, 327, 332], "develop": [10, 57, 263, 264, 279, 280, 310, 322, 326, 327, 329, 332, 333, 336, 339], "explicitli": [10, 16, 266, 274, 320, 332], "complex_attr": 10, "model_attr": 10, "todo": [10, 21, 24, 42, 75, 183, 215, 238], "explain": [10, 277, 285, 340], "agnost": [11, 268], "mode": [11, 15, 30, 42, 55, 75, 156, 186, 191, 199, 208, 232, 237, 242, 256, 257, 267, 268, 283, 284, 321, 334, 336, 337, 342], "constant": [12, 63, 73, 184, 241, 250, 251, 310, 311, 318, 341], "logger": [12, 15, 244, 251, 257], "save_load": [12, 202, 205, 209, 223], "function": [13, 16, 19, 20, 22, 79, 92, 175, 192, 216, 251, 261, 264, 266, 267, 268, 271, 277, 279, 280, 283, 284, 285, 308, 311, 313, 316, 320, 321, 324, 325, 326, 327, 332, 334, 337, 339, 340, 342], "unifi": [13, 188, 230, 283, 284, 285, 311, 320, 321, 325, 326, 328], "It": [13, 19, 20, 44, 46, 47, 59, 64, 68, 107, 191, 228, 237, 243, 263, 266, 267, 268, 269, 271, 272, 277, 283, 284, 285, 309, 317, 319, 326, 329, 332, 334, 337, 339, 342], "assist": [13, 338], "valid": [13, 16, 23, 42, 55, 88, 90, 93, 94, 108, 120, 121, 186, 204, 282, 283, 315, 318, 321, 323, 326, 332, 334, 337, 338], "team": [13, 44, 278, 336], "save": [14, 16, 23, 55, 59, 181, 186, 191, 193, 203, 206, 210, 226, 243, 244, 249, 250, 253, 257, 268, 269, 277, 280, 283, 320, 326, 327, 328, 331, 334, 335, 337, 340], "load": [14, 21, 36, 37, 47, 55, 59, 181, 186, 190, 192, 193, 203, 206, 207, 208, 210, 212, 226, 236, 239, 242, 256, 257, 271, 284, 311, 317, 334, 335, 340], "save_config_map": 14, "config_map": [14, 222], "qconfig_file_path": 14, "map": [14, 16, 37, 41, 43, 44, 46, 191, 222, 237, 248, 250, 267, 277, 310, 314, 325, 326, 332, 334, 337], "json": [14, 22, 37, 206, 208, 212, 256, 267, 328, 337, 341], "path": [14, 21, 22, 23, 37, 47, 55, 59, 75, 79, 181, 186, 193, 200, 207, 208, 210, 211, 212, 226, 237, 249, 250, 253, 257, 266, 267, 268, 274, 280, 283, 314, 320, 325, 326, 327, 328, 331, 337, 341], "load_config_map": 14, "config_name_map": 14, "reload": 14, "get_all_config": 14, "singleton": [15, 156, 187, 257], "lazyimport": [15, 257], "module_nam": [15, 193, 257], "lazi": [15, 257], "python": [15, 23, 38, 128, 181, 191, 192, 238, 257, 259, 274, 280, 282, 310, 314, 317, 322, 326, 332, 333, 341], "till": [15, 257, 342], "cpuinfo": [15, 187, 257], "dump_elapsed_tim": [15, 187, 257, 283], "customized_msg": [15, 187, 257], "elaps": [15, 187, 257], "time": [15, 16, 37, 46, 57, 63, 181, 187, 191, 257, 266, 267, 268, 270, 272, 274, 277, 284, 311, 314, 317, 326, 330, 332, 333, 334, 337, 339, 340, 341, 342], "set_random_se": [15, 16, 257], "seed": [15, 16, 187, 213, 234, 257, 267, 326], "random": [15, 16, 33, 37, 63, 67, 109, 187, 213, 257, 267, 326, 332, 341], "set_workspac": [15, 16, 257], "workspac": [15, 16, 256, 257, 328], "get_workspac": 15, "set_resume_from": [15, 16, 257], "resume_from": [15, 16, 257], "set_tensorboard": [15, 16, 257], "tensorboard": [15, 16, 246, 257, 283, 326], "log_process": 15, "call_count": 15, "func": [15, 181, 257, 334], "keep": [15, 64, 191, 280, 283, 310, 338], "track": [15, 339], "processortyp": [15, 234, 242], "processor": [15, 234, 242, 264, 274, 277, 282, 324, 327, 333, 334, 336], "detect_processor_type_based_on_hw": 15, "detect": [15, 16, 42, 46, 51, 212, 238, 242, 268, 279, 280, 332, 342], "hardwar": [15, 242, 263, 266, 274, 282, 283, 321, 326, 329, 332, 333], "server": [15, 274], "client": [15, 282], "statist": [15, 257, 258], "header": [15, 257, 317], "field_nam": [15, 257], "output_handl": [15, 257], "printer": [15, 257], "x": [16, 37, 63, 108, 127, 208, 272, 277, 282, 309, 310, 314, 319, 322, 327, 328, 334, 335, 340, 341], "dotdict": [16, 57, 257], "access": [16, 120, 121, 123, 253, 257], "yaml": [16, 19, 20, 21, 23, 84, 256, 257, 283, 285, 320, 325, 326, 330, 341], "attribut": [16, 136, 242, 257, 283, 311, 318, 320, 326], "instead": [16, 257, 266, 332, 337], "dictionari": [16, 36, 42, 120, 121, 123, 187, 191, 199, 208, 212, 226, 236, 242, 257], "notat": [16, 257], "random_se": [16, 63, 326], "1978": 16, "default_workspac": 16, "global": [16, 77, 185, 257, 267, 268, 269, 280, 326, 332, 342], "you": [16, 21, 46, 59, 191, 208, 261, 279, 280, 284, 310, 311, 314, 317, 322, 323, 325, 327, 332, 334, 337, 338, 339, 340], "want": [16, 21, 64, 120, 121, 123, 243, 280, 283, 311, 314, 326, 330, 334, 337, 339, 342], "should": [16, 19, 20, 21, 23, 37, 40, 46, 47, 59, 97, 101, 108, 191, 208, 222, 226, 236, 243, 250, 257, 266, 268, 269, 270, 271, 273, 277, 280, 283, 284, 285, 314, 325, 326, 330, 332, 334, 337, 341, 342], "directori": [16, 22, 23, 55, 186, 203, 226, 236, 253, 256, 257, 314, 317], "where": [16, 42, 46, 77, 191, 203, 257, 277, 285, 309, 340], "intermedi": [16, 277, 280, 321, 334], "histori": [16, 256, 257, 342], "store": [16, 23, 79, 203, 208, 320], "nc_workspac": 16, "datetim": 16, "now": [16, 37, 280, 285, 314, 341, 342], "strftime": 16, "y": [16, 37, 63, 155, 277, 310, 317, 340, 341], "m": [16, 208, 228, 273, 279, 322, 332, 343], "d_": 16, "h": [16, 37, 314, 341], "resum": [16, 19, 20, 60, 62, 63, 64, 68, 71], "wa": [16, 191, 263, 265, 283, 326, 329, 333, 342], "automat": [16, 23, 26, 33, 238, 242, 268, 271, 273, 274, 280, 282, 308, 321, 326, 327, 331, 332, 334, 340, 341, 342], "dure": [16, 57, 191, 192, 208, 237, 242, 257, 265, 266, 268, 271, 277, 282, 284, 319, 326, 328, 330, 331, 332, 334, 340], "last": [16, 208, 264, 265, 267, 311, 327, 334, 337, 340], "flag": [16, 40], "whether": [16, 21, 33, 37, 40, 42, 46, 101, 181, 187, 191, 204, 207, 208, 215, 220, 221, 228, 237, 240, 246, 253, 256, 257, 267, 273, 283, 325, 334, 337, 340, 341], "visual": [16, 339, 342], "displai": [16, 74, 75, 187, 257], "2022": [16, 267, 277, 323, 332, 337, 340], "workspace_path": 16, "output": [16, 19, 20, 39, 46, 47, 55, 59, 104, 107, 112, 127, 150, 156, 181, 186, 187, 203, 208, 210, 212, 220, 226, 228, 237, 243, 249, 250, 253, 254, 257, 267, 268, 269, 277, 280, 283, 284, 313, 314, 316, 318, 320, 325, 326, 328, 331, 332, 334, 337, 340, 341, 342], "devic": [16, 132, 142, 143, 144, 145, 146, 149, 153, 167, 172, 180, 191, 193, 196, 208, 212, 213, 215, 218, 220, 224, 226, 228, 234, 236, 240, 242, 253, 264, 267, 268, 274, 277, 282, 284, 311, 326, 327, 332, 335, 337], "warmup": [16, 308, 326], "model_nam": [16, 282], "inter_num_of_thread": [16, 326], "intra_num_of_thread": [16, 326], "ni_workload_nam": 16, "empti": [16, 193, 242, 267, 268, 335], "includ": [16, 21, 23, 30, 37, 188, 192, 213, 226, 232, 236, 242, 257, 267, 268, 271, 272, 274, 278, 283, 284, 285, 311, 322, 323, 324, 325, 326, 332, 334, 336, 337, 342], "itex": [16, 85, 155, 249, 271, 327, 334, 340], "ipex": [16, 206, 207, 208, 212, 232, 236, 240, 256, 264, 265, 321, 324, 326, 327, 340], "onnxrt_trt_ep": [16, 327, 334], "onnxrt_cuda_ep": [16, 327, 334], "onnxrt_dnnl_ep": [16, 327, 334], "onnxrt_dml_ep": [16, 334], "inter": 16, "intra": 16, "accuracycriterion": [16, 326, 342], "higher_is_bett": [16, 46, 59, 342], "criterion": [16, 313, 326, 332, 334, 340, 342], "rel": [16, 57, 326, 342, 343], "better": [16, 19, 20, 47, 59, 148, 243, 264, 267, 277, 310, 313, 325, 327, 332, 333, 334, 337, 339, 340, 342], "absolut": [16, 46, 208, 263, 277, 325, 326, 329, 332, 334, 342], "how": [16, 37, 191, 228, 242, 261, 264, 266, 267, 268, 269, 270, 271, 277, 279, 280, 281, 283, 311, 313, 314, 320, 325, 326, 332, 333, 334, 340, 341, 342], "much": [16, 37, 277, 340, 341], "accept": [16, 272, 278, 308, 310, 311, 337], "accuracy_criterion": [16, 57, 326, 330, 342], "tuningcriterion": [16, 326, 330, 339, 342], "strategi": [16, 17, 23, 38, 261, 272, 277, 282, 283, 284, 285, 289, 309, 310, 311, 314, 321, 326, 333, 334, 336, 337, 338], "basic": [16, 36, 67, 71, 74, 243, 263, 321, 326, 329, 339], "strategy_kwarg": [16, 339, 342], "timeout": [16, 326, 342], "doc": [16, 46, 59, 74, 75, 187, 238, 257, 282, 322, 325, 326], "tuning_strategi": 16, "md": [16, 46, 59], "constraint": [16, 326, 332, 339, 342], "guarante": [16, 326], "models": [16, 57, 326, 330], "footprint": [16, 57, 313, 326, 330, 332, 335], "second": [16, 21, 64, 117, 191, 257, 267, 274, 277, 326, 337, 340, 342], "mean": [16, 33, 37, 44, 46, 68, 208, 220, 226, 236, 267, 269, 277, 280, 284, 285, 311, 314, 318, 325, 326, 332, 334, 335, 337, 340, 341, 342, 343], "earli": [16, 277, 326, 334, 342], "combin": [16, 19, 20, 33, 47, 59, 187, 212, 243, 257, 267, 270, 280, 283, 321, 326, 331, 333, 334, 336, 337, 341, 342], "field": [16, 23, 42, 263, 280, 283, 285, 314, 326, 329, 339, 342], "decid": [16, 40, 271, 273, 283, 284, 326, 334, 338, 342], "exit": [16, 60, 62, 272, 326], "tuning_criterion": [16, 326, 330, 339, 342], "posttrainingquantconfig": [16, 59, 280, 282, 285, 311, 316, 325, 326, 328, 334, 335, 336, 337, 339, 340, 342], "domain": [16, 332, 342], "recip": [16, 102, 263, 272, 282, 319, 326, 329, 335, 337, 340, 342], "quant_format": [16, 250, 316], "approach": [16, 234, 266, 267, 277, 280, 282, 309, 321, 326, 332, 333, 335, 337, 342], "calibration_sampling_s": [16, 326], "op_type_dict": [16, 266, 282, 285, 334, 337, 342], "op_name_dict": [16, 266, 326, 334, 342], "reduce_rang": [16, 285], "example_input": [16, 203, 206, 207, 208, 212, 227, 228, 230, 233, 237, 250, 256, 262, 265, 266, 267, 268, 316], "excluded_precis": [16, 234, 336], "quant_level": [16, 337, 340, 342], "gpu": [16, 142, 149, 191, 208, 238, 267, 271, 308, 321, 326, 327, 334, 335], "npu": [16, 334], "xpu": [16, 212, 238, 271, 334], "cv": [16, 266, 268, 271, 332], "object_detect": [16, 42], "nlp": [16, 264, 268, 271, 277, 332, 334], "recommendation_system": 16, "adaptor": [16, 77, 84, 85, 246, 261, 282, 285, 321, 335, 336, 338, 340], "overrid": [16, 257, 310], "quantiztaion": [16, 212], "do": [16, 21, 39, 42, 206, 250, 256, 268, 278, 284, 310, 314, 318, 321, 325, 326, 332, 336, 338, 340, 342], "quant": [16, 75, 81, 83, 84, 85, 95, 99, 208, 211, 228, 233, 234, 267, 277, 280, 310, 324, 326, 334], "smooth_quant_arg": [16, 334, 340], "layer_wise_qu": [16, 335], "fast": [16, 267, 271, 332, 333, 337], "bia": [16, 176, 198, 218, 224, 337], "gemm_to_matmul": [16, 334], "convert": [16, 21, 33, 36, 37, 42, 75, 79, 84, 85, 102, 103, 106, 107, 108, 109, 110, 119, 127, 139, 151, 167, 172, 188, 194, 201, 232, 237, 242, 249, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 277, 280, 284, 319, 326, 327, 334, 336, 337, 340, 341, 342], "gemm": 16, "matmul": [16, 99, 106, 112, 118, 126, 146, 155, 164, 173, 318, 337, 342], "add": [16, 21, 23, 75, 106, 117, 155, 181, 257, 261, 265, 279, 280, 282, 285, 311, 314, 316, 318, 325, 326, 339, 340, 342], "graph_optimization_level": [16, 334], "disable_al": 16, "enable_bas": 16, "enable_extend": 16, "enable_al": 16, "first_conv_or_matmul_quant": [16, 334], "last_conv_or_matmul_quant": [16, 334], "pre_post_process_quant": [16, 334], "preprocess": [16, 21, 37, 77, 228, 246, 314, 341], "postprocess": [16, 34, 37, 46, 59, 246, 283, 326, 341], "add_qdq_pair_to_weight": [16, 334], "qdq": [16, 84, 140, 158, 228, 248, 249, 250, 270, 283, 316, 321, 334, 340], "pair": [16, 153, 201, 264, 266, 284, 311, 326, 327], "optypes_to_exclude_output_qu": [16, 334], "optyp": [16, 248, 284], "dedicated_qdq_pair": [16, 334], "dedic": 16, "qoper": [16, 316], "requir": [16, 55, 186, 228, 264, 266, 267, 271, 277, 280, 283, 284, 308, 309, 311, 313, 314, 317, 318, 326, 327, 328, 332, 334, 337, 338, 339, 340, 342], "onnxruntim": [16, 23, 30, 283, 309, 311, 321, 322, 327], "tensorflow": [16, 21, 22, 23, 26, 28, 30, 37, 38, 40, 42, 46, 47, 55, 59, 69, 249, 250, 257, 270, 279, 283, 284, 290, 309, 310, 311, 313, 315, 318, 319, 321, 326, 327, 328, 329, 332, 333, 339, 340, 342], "method": [16, 21, 23, 30, 37, 75, 77, 82, 176, 188, 191, 192, 212, 226, 236, 246, 251, 253, 254, 267, 268, 269, 271, 277, 280, 282, 309, 310, 311, 313, 325, 326, 331, 332, 334, 336, 337, 340, 341, 342], "dynam": [16, 75, 183, 191, 204, 230, 232, 234, 250, 267, 268, 282, 283, 311, 316, 319, 321, 326, 333, 342, 343], "weight_onli": [16, 189, 234, 256, 263, 282, 310, 329, 335, 337], "ptq": [16, 59, 265, 266, 270, 271, 280, 314, 321, 326, 334, 340, 342], "both": [16, 181, 238, 266, 267, 269, 274, 277, 278, 283, 313, 326, 332, 334, 337, 340, 342], "meet": [16, 60, 62, 267, 269, 271, 272, 277, 280, 284, 330, 333, 334, 337, 342], "criteria": [16, 272, 280, 340], "bayesian": [16, 67, 332], "mse": [16, 46, 59, 67, 257, 267, 277, 325, 337, 338], "mse_v2": [16, 67], "hawq_v2": [16, 67], "exhaust": [16, 67, 208], "els": [16, 57, 181, 228, 337], "advanc": [16, 263, 264, 267, 269, 271, 277, 278, 284, 289, 324, 329, 332, 334, 337], "reduc": [16, 234, 264, 265, 266, 267, 270, 271, 277, 283, 309, 313, 326, 327, 332, 333, 334, 335, 336, 337, 340, 342], "dtype": [16, 24, 25, 33, 37, 183, 196, 201, 204, 208, 218, 224, 228, 234, 253, 264, 267, 268, 277, 282, 284, 285, 316, 318, 334, 337, 340, 341], "activ": [16, 75, 77, 82, 88, 89, 90, 94, 208, 212, 234, 262, 265, 266, 267, 270, 271, 277, 283, 284, 285, 309, 313, 318, 326, 334, 337, 340], "layer1": [16, 326, 332, 334], "conv1": [16, 269, 334], "bit": [16, 77, 208, 216, 221, 224, 228, 234, 262, 263, 264, 267, 268, 277, 282, 285, 309, 313, 327, 329, 333, 334, 337, 340], "precis": [16, 19, 20, 44, 46, 47, 57, 61, 64, 75, 85, 194, 195, 196, 201, 232, 234, 257, 261, 263, 266, 267, 268, 272, 277, 282, 283, 284, 289, 308, 309, 313, 314, 318, 319, 321, 329, 333, 334, 337, 340, 342], "exclud": [16, 283, 309, 336], "enabl": [16, 155, 204, 264, 266, 267, 271, 284, 285, 314, 327, 332, 333, 340, 342], "mix": [16, 47, 61, 75, 195, 232, 234, 261, 268, 282, 283, 289, 319, 321], "bf16": [16, 75, 140, 194, 196, 201, 271, 283, 284, 318, 326, 336, 342, 343], "disabl": [16, 187, 278, 336, 337, 340], "conserv": [16, 67], "In": [16, 42, 57, 242, 261, 267, 268, 271, 277, 278, 280, 282, 283, 284, 311, 313, 314, 325, 326, 330, 331, 332, 334, 336, 337, 339, 340, 341, 342], "docstr": 16, "quantizationawaretrainingconfig": [16, 243, 280, 313, 316, 326, 334, 336, 342], "awar": [16, 66, 234, 243, 267, 268, 272, 283, 284, 285, 309, 313, 314, 316, 321, 331, 333, 337, 342], "qat": [16, 55, 282, 313, 314, 319, 321, 326, 334], "copi": [16, 257, 311], "deepcopi": 16, "model_origin": [16, 59, 336], "qat_op_name_dict": 16, "compression_manag": [16, 243, 280, 313, 326, 331, 332, 334], "prepare_compress": [16, 243, 280, 313, 326, 331, 332, 334], "weightpruningconfig": [16, 326, 331, 332], "pruning_config": [16, 326, 332], "target_spars": [16, 326, 332], "9": [16, 265, 273, 280, 322, 326, 332, 340, 342, 343], "pruning_typ": [16, 326, 332], "snip_momentum": [16, 326, 332], "pattern": [16, 23, 75, 111, 112, 114, 131, 148, 153, 154, 155, 167, 172, 201, 262, 266, 270, 273, 283, 310, 318, 321, 326, 331, 340, 342, 343], "4x1": [16, 326, 332, 343], "op_nam": [16, 76, 208, 212, 228, 242, 257, 258, 266, 284, 326, 332], "excluded_op_nam": [16, 124, 125, 326, 332], "start_step": [16, 326, 332], "end_step": [16, 326, 332], "pruning_scop": [16, 326, 332], "pruning_frequ": [16, 326, 332], "min_sparsity_ratio_per_op": [16, 326, 332], "max_sparsity_ratio_per_op": [16, 326, 332], "98": [16, 326, 332, 343], "sparsity_decay_typ": [16, 326, 332], "exp": [16, 263, 326, 329, 332], "pruning_op_typ": [16, 326, 332], "low_memory_usag": 16, "kwarg": [16, 23, 35, 37, 46, 47, 48, 50, 52, 54, 55, 56, 59, 74, 76, 88, 89, 90, 93, 94, 159, 160, 161, 162, 163, 164, 165, 168, 169, 171, 173, 186, 193, 194, 213, 215, 226, 228, 232, 236, 242, 243, 253, 254, 256, 257, 311], "prune": [16, 257, 261, 282, 314, 315, 318, 319, 321, 331, 333], "singl": [16, 21, 37, 42, 46, 59, 101, 183, 201, 208, 267, 280, 282, 322, 332, 335, 340], "sequenc": [16, 21, 36, 37, 40, 44, 116, 213, 267, 277, 283, 318, 332, 337, 341], "local": [16, 226, 236, 257, 267, 269, 282, 317, 322, 332, 339], "link": [16, 21, 46, 59, 268, 309, 316, 337, 343], "out": [16, 21, 22, 23, 207, 208, 267, 269, 271, 277, 279, 280, 282, 332, 334, 337], "By": [16, 39, 191, 267, 274, 284, 285, 325, 328, 332, 333, 337, 342], "correspond": [16, 21, 39, 42, 46, 207, 208, 212, 222, 246, 257, 268, 277, 283, 318, 326, 332, 334, 339, 342], "sparsiti": [16, 257, 261, 267, 282, 321, 326, 343], "after": [16, 21, 33, 37, 64, 131, 181, 201, 208, 240, 253, 257, 262, 266, 267, 270, 277, 282, 284, 313, 316, 321, 325, 326, 330, 331, 332, 334, 336, 337, 339, 340, 341, 342], "90": [16, 324, 335, 343], "magnitud": [16, 46, 208, 321, 332], "snip": [16, 321, 332, 343], "magnitude_progress": 16, "snip_progress": 16, "snip_momentum_progress": 16, "pattern_lock": 16, "most": [16, 46, 264, 267, 271, 277, 326, 327, 332, 334, 337, 340, 342, 343], "feasibl": 16, "under": [16, 23, 156, 187, 242, 253, 256, 272, 279, 282, 323, 325, 326, 331, 332, 333, 335, 337, 342], "situat": [16, 314, 332], "structur": [16, 76, 215, 257, 261, 268, 277, 321, 332, 333, 334, 343], "unstructur": [16, 321, 332, 343], "nxm": [16, 332], "8x1": 16, "channelx1": [16, 332], "1xchannel": [16, 332], "n": [16, 22, 37, 40, 277, 285, 310, 324, 332, 334, 340, 341], "directli": [16, 42, 46, 269, 282, 325, 326, 332, 334], "our": [16, 176, 208, 263, 282, 316, 326, 329, 339], "itrex": [16, 265, 340], "some": [16, 21, 267, 277, 282, 284, 285, 310, 316, 319, 322, 325, 326, 330, 332, 334, 336, 337, 340, 342], "step": [16, 243, 262, 265, 266, 267, 277, 284, 285, 313, 314, 326, 331, 332, 336, 337, 339, 340, 342], "integ": [16, 42, 46, 265, 267, 270, 277, 283, 285, 309, 334, 337, 340, 342], "end": [16, 21, 36, 37, 60, 62, 181, 283, 284, 285, 313, 318, 322, 326, 330, 332, 337, 341, 342], "determin": [16, 222, 252, 262, 266, 272, 274, 278, 280, 309, 332, 334], "score": [16, 39, 40, 42, 43, 44, 46, 66, 246, 280, 325, 330, 332, 339, 342], "gather": 16, "sort": [16, 68, 267, 337, 342], "sinc": [16, 39, 267, 277, 316, 325, 331, 337], "lead": [16, 264, 267, 271, 277, 310, 326, 327, 332, 337, 340], "less": [16, 108, 187, 228, 257, 308, 326, 332], "frequenc": [16, 326, 332], "minimum": [16, 208, 220, 263, 285, 309, 326, 329, 332, 340, 342], "restrict": [16, 123, 191, 332, 339], "everi": [16, 120, 121, 123, 267, 283, 311, 335, 337, 342], "schedul": [16, 267, 326, 331], "increas": [16, 263, 267, 312, 321, 329, 337, 342], "cube": [16, 332], "local_config": 16, "6": [16, 263, 265, 267, 270, 277, 318, 329, 334, 340, 342, 343], "queri": [16, 84, 85, 212, 242, 277, 284, 285, 334], "kei": [16, 55, 186, 187, 191, 193, 208, 228, 244, 246, 257, 267, 277, 282, 284, 333, 337, 342], "self": [16, 57, 116, 228, 268, 283, 284, 311, 321, 325, 339, 342], "attent": [16, 21, 212, 278, 332], "dens": [16, 91, 332, 343], "update_config": 16, "10": [16, 23, 63, 220, 272, 273, 282, 308, 316, 322, 326, 332, 341, 342, 343], "hpoconfig": 16, "search_spac": 16, "searcher": 16, "xgb": 16, "loss_typ": [16, 326], "reg": 16, "min_train_sampl": 16, "42": [16, 213, 234, 267, 343], "hyperparamet": [16, 277, 339, 340, 342], "optim": [16, 63, 107, 127, 128, 132, 133, 181, 219, 234, 243, 244, 257, 261, 266, 267, 270, 271, 272, 274, 277, 282, 308, 310, 313, 314, 318, 321, 322, 324, 326, 328, 333, 334, 336, 337, 339, 340, 342], "search": [16, 19, 20, 39, 63, 201, 215, 228, 257, 261, 267, 268, 270, 282, 310, 321, 325, 332, 333, 337, 340, 342], "grid": [16, 332], "bo": 16, "knowledgedistillationlossconfig": [16, 313, 326, 331], "temperatur": [16, 326], "ce": [16, 326], "loss_weight": [16, 326], "knowledg": [16, 270, 313, 315, 321, 326, 328], "distil": [16, 261, 282, 315, 319, 321, 331], "entropi": [16, 309, 342], "probabl": [16, 252, 267, 277, 337], "length": [16, 21, 37, 42, 213, 267, 277, 325, 333, 334, 337, 341], "item": [16, 36, 75, 187, 257, 277, 309, 314, 332, 340, 342], "student": [16, 21, 313, 343], "groundtruth": [16, 42], "label": [16, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37, 39, 41, 46, 47, 59, 183, 208, 243, 271, 280, 311, 325, 326, 334, 341], "teacher": [16, 313, 326, 343], "kl": [16, 204, 208, 234, 244, 252, 284, 285, 309, 318, 326, 342], "sum": [16, 46], "multipli": [16, 262, 263, 267, 329, 337], "distillationconfig": [16, 243, 313, 326, 331], "criterion_conf": 16, "d_conf": [16, 313, 326, 331], "teacher_model": [16, 313, 326], "intermediatelayersknowledgedistillationlossconfig": 16, "layer_map": 16, "add_origin_loss": 16, "relationship": 16, "student_layer_nam": 16, "student_layer_output_process": 16, "teacher_layer_nam": 16, "teacher_layer_output_process": 16, "bert": [16, 21, 37, 282, 325, 327, 332, 341, 343], "desir": [16, 33, 37, 204, 265, 284, 285, 332, 340, 341], "its": [16, 23, 37, 40, 41, 63, 113, 148, 201, 203, 248, 264, 267, 272, 277, 278, 323, 325, 327, 332, 337, 339, 341, 342], "take": [16, 19, 20, 37, 46, 47, 59, 63, 183, 243, 264, 267, 271, 274, 278, 280, 311, 318, 326, 332, 334, 336, 337, 341, 342], "serv": [16, 55, 186, 277], "numer": [16, 46, 263, 264, 267, 271, 285, 327, 329, 333, 334, 337], "abbrevi": 16, "further": [16, 123, 264, 277, 278, 282, 327, 328, 334], "layer_nam": [16, 208, 332], "student_model": [16, 326], "l1": 16, "len": [16, 37, 314, 341], "origin": [16, 21, 37, 64, 77, 79, 181, 193, 208, 222, 226, 228, 236, 237, 253, 257, 267, 268, 269, 271, 277, 279, 332, 334, 337, 341, 342], "selfknowledgedistillationlossconfig": [16, 326], "student1_layer_name1": 16, "teacher_layer_name1": 16, "student2_layer_name1": 16, "student1_layer_name2": 16, "teacher_layer_name2": 16, "student2_layer_name2": 16, "soft": 16, "l2": [16, 332], "hard": [16, 311], "resblock": 16, "featur": [16, 21, 22, 33, 37, 208, 264, 269, 277, 279, 282, 308, 311, 312, 326, 327, 328, 332, 333, 338, 341], "deepst": 16, "fc": [16, 332], "02": [16, 324, 343], "nn": [16, 47, 59, 193, 203, 207, 208, 212, 215, 222, 224, 226, 228, 230, 232, 233, 236, 237, 242, 250, 253, 256, 267, 268, 277, 280, 326, 328, 337, 340], "crossentropyloss": [16, 326], "sgd": [16, 326], "lr": [16, 213, 234, 267, 314, 326], "0001": [16, 326], "learning_r": [16, 326], "altern": [16, 59, 191], "distil_loss": [16, 326], "mixedprecisionconfig": [16, 47, 232, 234, 264, 326, 327], "mixedprecis": [16, 326], "target": [16, 63, 84, 201, 215, 253, 268, 314, 326, 332, 341, 342], "convers": [16, 107, 108, 201, 264, 265, 277, 279, 283, 284, 326, 327, 334, 336, 340], "fp16": [16, 75, 194, 196, 201, 213, 234, 277, 334], "fallback": [16, 66, 68, 69, 264, 265, 266, 316, 327, 336, 342], "won": [16, 334, 337], "work": [16, 97, 101, 268, 271, 273, 274, 277, 281, 284, 310, 311, 336, 337, 338, 340], "tensor": [16, 37, 55, 68, 79, 123, 181, 186, 187, 191, 193, 199, 201, 203, 206, 207, 208, 212, 217, 218, 220, 221, 228, 233, 237, 248, 250, 253, 256, 257, 262, 263, 268, 271, 280, 285, 310, 311, 329, 332, 334, 338, 341, 342], "trace": [16, 66, 203, 207, 208, 212, 233, 237, 250, 266, 268, 280, 342], "mix_precis": [16, 38, 326, 327], "converted_model": [16, 47, 326, 327], "exportconfig": 16, "opset_vers": [16, 249, 250, 316], "14": [16, 249, 250, 282, 316, 322, 324, 343], "input_nam": [16, 55, 120, 121, 186, 249, 250, 316], "output_nam": [16, 55, 186, 249, 250, 316], "dynamic_ax": [16, 250, 316], "common": [16, 35, 38, 95, 97, 98, 99, 101, 175, 191, 192, 232, 233, 234, 237, 242, 246, 265, 269, 270, 271, 278, 310, 313, 314, 316, 319, 320, 322, 326, 334, 340], "export": [16, 42, 231, 251, 261, 262, 264, 266, 317], "select": [16, 21, 228, 232, 238, 253, 267, 277, 280, 309, 321, 322, 332, 334, 337, 342], "opset": [16, 249, 250, 316], "version": [16, 38, 107, 224, 240, 249, 250, 261, 265, 278, 280, 283, 310, 318, 322, 323, 326, 333, 340, 342], "qlinear": [16, 23, 30, 46, 248, 283], "ax": [16, 199, 250], "onnxqlinear2qdqconfig": 16, "onnxqlinear2qdq": 16, "torch2onnxconfig": [16, 316], "torch2onnx": [16, 247], "qdq_op_fp32_bia": 16, "qdq_op_int32_bia": 16, "qdq_op_fp32_bias_qdq": 16, "resnet50": [16, 269, 282, 314, 316, 327, 332, 334, 339, 343], "int8_onnx_config": [16, 316], "randn": [16, 316], "224": [16, 33, 282, 314, 316, 326, 341], "batch_siz": [16, 21, 22, 183, 213, 234, 250, 267, 311, 314, 316, 320, 326, 334], "q_model": [16, 59, 97, 101, 212, 262, 265, 266, 270, 272, 280, 311, 314, 316, 320, 325, 326, 328, 334, 335, 336, 337], "tf2onnxconfig": [16, 316], "tf2onnx": [16, 247], "axi": [16, 220, 221], "addit": [16, 243, 267, 284, 285, 337, 338, 342], "keyword": [16, 191, 208, 226, 236], "output_graph": 16, "nasconfig": 16, "search_algorithm": 16, "dyna": 16, "na": [16, 51, 271, 321, 343], "mxnet": [16, 23, 26, 30, 37, 46, 47, 52, 59, 279, 282, 283, 284, 309, 311, 315, 318, 321, 326, 327, 328, 342], "kera": [16, 23, 30, 50, 55, 83, 86, 98, 101, 123, 186, 187, 269, 271, 284, 311, 314, 328], "pytorch": [16, 21, 23, 26, 30, 37, 46, 47, 56, 59, 69, 188, 189, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 250, 251, 257, 263, 268, 279, 280, 282, 283, 284, 285, 290, 309, 310, 311, 313, 315, 318, 319, 321, 322, 324, 326, 327, 328, 329, 332, 333, 337, 338, 340, 342], "built": [17, 18, 21, 22, 27, 29, 31, 32, 33, 34, 37, 46, 49, 57, 59, 97, 101, 128, 243, 271, 272, 283, 314, 326, 330, 334, 339, 341, 342], "sigopt": [18, 333], "tpe": 18, "provid": [19, 20, 37, 42, 47, 59, 156, 204, 208, 243, 251, 253, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 282, 283, 284, 285, 308, 311, 313, 314, 315, 319, 321, 322, 324, 325, 326, 327, 328, 332, 334, 337, 340, 342, 343], "sigopttunestrategi": 19, "q_dataload": [19, 20, 60, 62, 63, 64, 68, 71, 320, 342], "q_func": [19, 20, 60, 62, 63, 64, 68, 71, 208, 283, 284, 326, 342], "eval_func": [19, 20, 47, 59, 60, 62, 63, 64, 68, 71, 79, 243, 280, 311, 313, 314, 326, 334, 335, 336, 337, 342], "eval_metr": [19, 20, 47, 59, 60, 62, 63, 64, 68, 71, 243, 325, 334], "q_hook": [19, 20, 60, 62, 63, 64, 68, 71], "hpo": [19, 332], "low": [19, 20, 24, 25, 47, 183, 264, 267, 272, 277, 283, 284, 308, 309, 314, 326, 327, 333, 334, 337, 340, 342], "loader": [19, 20, 47, 59, 79, 97, 101, 226, 243, 253, 311, 334], "mandatori": [19, 20, 59, 326], "dataset": [19, 20, 32, 42, 43, 44, 46, 47, 59, 79, 82, 183, 213, 243, 246, 265, 267, 269, 270, 271, 277, 282, 283, 284, 311, 314, 325, 326, 332, 334, 337, 338, 340, 342, 343], "_": [19, 20, 59, 264, 265, 267, 268, 271, 273, 277, 280, 282, 283, 284, 309, 314, 316, 318, 322, 326, 327, 328, 330, 332, 334, 337, 338, 339, 340, 342], "depend": [19, 20, 47, 59, 243, 279, 282, 317, 318, 322, 334, 342], "implement": [19, 20, 21, 23, 39, 47, 57, 59, 66, 156, 176, 180, 188, 191, 243, 267, 285, 311, 325, 326, 332, 334, 337, 338, 342], "well": [19, 20, 47, 59, 243, 263, 277, 282, 310, 329, 332, 334, 338, 340], "taken": [19, 20, 47, 59, 243, 334], "reserv": [19, 20], "abl": [19, 20, 47, 59, 243, 271, 277, 334], "pre": [19, 20, 21, 47, 59, 132, 193, 234, 243, 266, 267, 272, 277, 310, 313, 326, 332, 333, 334, 337, 342], "through": [19, 20, 46, 47, 59, 266, 267, 268, 277, 282, 308, 318, 320, 321, 325, 330, 331, 332, 334, 337], "tuner": [19, 20, 47, 59, 243, 334], "encapsul": [19, 20, 47, 59, 156, 243, 328], "scalar": [19, 20, 47, 59, 243, 325, 334, 342], "pseudo": [19, 20, 59, 243, 267, 337], "code": [19, 20, 59, 191, 234, 243, 261, 264, 267, 269, 280, 282, 283, 284, 285, 313, 314, 320, 321, 323, 325, 330, 331, 332, 333, 334, 339, 340, 341], "someth": [19, 20, 23, 59, 243], "fefin": 20, "tpetunestrategi": 20, "pytorchbertdataset": 21, "task": [21, 28, 46, 176, 265, 267, 274, 277, 313, 316, 321, 325, 326, 332, 335, 337, 340, 343], "model_typ": [21, 257], "transform": [21, 22, 23, 24, 25, 26, 28, 30, 32, 103, 176, 178, 179, 180, 183, 201, 207, 208, 212, 215, 227, 234, 240, 265, 266, 267, 270, 277, 280, 282, 309, 313, 314, 315, 319, 324, 326, 332, 333, 336, 337, 340, 342], "filter": [21, 22, 23, 24, 25, 26, 28, 32, 88, 94, 183, 201, 222, 257, 285, 321, 332], "construct": [21, 24, 25, 28, 35, 46, 51, 55, 77, 183, 185, 186, 191, 246, 272, 278, 284, 285, 314, 332, 342], "tensordataset": 21, "full": [21, 22, 23, 253, 257, 267, 282, 309, 317, 323, 332, 337, 338], "repo": [21, 260, 279, 315, 344], "http": [21, 23, 39, 40, 42, 43, 44, 46, 59, 215, 234, 267, 280, 282, 322, 323, 326, 332, 338], "github": [21, 39, 40, 43, 44, 46, 59, 234, 267, 279, 282, 315, 322, 323, 326, 338], "com": [21, 39, 40, 43, 44, 46, 59, 234, 278, 310, 322, 323, 326, 338, 339, 343], "huggingfac": [21, 226, 236, 253, 263, 315, 329, 340, 343], "your": [21, 261, 266, 279, 282, 310, 311, 314, 323, 326, 332, 333, 339, 342], "easi": [21, 266, 268, 271, 316, 326, 333, 334, 337, 339], "ad": [21, 39, 63, 262, 264, 267, 284, 285, 327, 332, 337], "classifi": [21, 46], "squad": [21, 37, 43, 44, 46, 325, 332, 341, 343], "distilbert": [21, 327, 333, 343], "xlnet": 21, "xlm": [21, 343], "101": [21, 46, 277, 325, 340, 343], "2043": 21, "2001": 21, "onnxrtbertdataset": 21, "data_dir": 21, "model_name_or_path": [21, 226, 236, 326, 335], "max_seq_length": [21, 37, 215, 341], "128": [21, 24, 25, 37, 183, 213, 215, 234, 267, 272, 277, 326, 334, 337, 341, 343], "do_lower_cas": [21, 36, 37, 341], "mrpc": [21, 46, 325, 332, 342, 343], "dynamic_length": 21, "onnxrt": [21, 23, 30, 37, 46, 255, 283, 327, 334, 343], "dir": [21, 253, 256, 317, 320], "shortcut": 21, "token": [21, 34, 37, 39, 40, 213, 253, 265, 267, 277, 282, 325, 326, 337, 339, 340, 341, 342], "longer": [21, 37, 213, 274, 341], "than": [21, 37, 108, 187, 213, 238, 257, 263, 267, 277, 282, 308, 320, 329, 330, 331, 332, 334, 337, 339, 341, 342], "truncat": [21, 37, 213, 341], "shorter": [21, 37, 341], "pad": [21, 37, 88, 90, 93, 94, 124, 125, 341], "lowercas": 21, "fine": [21, 268, 310, 332, 333, 334], "choic": [21, 267, 271, 277, 283, 325, 340], "qqp": [21, 325, 343], "qnli": [21, 325, 343], "rte": [21, 325, 343], "st": [21, 325], "cola": [21, 325, 343], "mnli": [21, 325, 343], "wnli": [21, 325], "mobilebert": 21, "roberta": [21, 343], "fix": [21, 181, 267, 311, 332, 334, 337, 342], "uncas": [21, 37, 341, 343], "load_and_cache_exampl": 21, "cach": [21, 267, 277, 317, 334, 337], "helper": [21, 22, 23, 36, 55, 156, 181, 186, 212, 248, 249, 250, 255], "convert_examples_to_featur": [21, 37], "max_length": 21, "label_list": [21, 46], "output_mod": 21, "classif": [21, 37, 46, 316, 325, 332, 333], "pad_token": 21, "pad_token_segment_id": 21, "mask_padding_with_zero": 21, "inputfeatur": [21, 37], "properti": [21, 77, 323], "input_id": [21, 37, 326], "vocabulari": [21, 36, 37, 341], "attention_mask": [21, 326], "mask": [21, 42, 332, 343], "avoid": [21, 191, 208, 228, 242, 273, 280, 310], "usual": [21, 271, 277, 284, 331, 332, 334, 335, 340], "NOT": [21, 318], "token_type_id": [21, 326], "segment": [21, 40, 42, 279], "portion": 21, "them": [21, 191, 267, 268, 277, 280, 285, 311, 316, 318, 320, 322, 331, 332, 337, 342], "problem": [21, 46, 192, 264, 325, 327], "regress": [21, 279], "seq_length": 21, "tensorflowbertdataset": 21, "root": [21, 22, 23, 26, 46, 314, 325, 326], "label_fil": [21, 37, 341], "tfrecord": [21, 22, 23], "guid": [21, 264, 271, 280, 282, 310, 322], "parsedecodebert": 21, "tensorflowmodelzoobertdataset": [21, 22], "num_cor": [21, 22, 26], "28": [21, 22, 26, 343], "three": [21, 60, 62, 127, 264, 268, 272, 277, 280, 283, 284, 309, 322, 327, 331, 334, 336, 339, 340], "tf": [21, 22, 23, 37, 53, 55, 82, 99, 101, 157, 181, 183, 185, 186, 187, 269, 271, 282, 310, 314, 322, 328, 333, 336, 341], "record": [21, 22, 23, 29, 228, 257, 272, 337, 339, 342], "resiz": [21, 22, 33, 37, 341], "coco": [22, 29, 42, 46, 325, 332], "parsedecodecoco": 22, "cocorecorddataset": 22, "interleav": 22, "parallel": [22, 326, 342], "cocoraw": 22, "img_dir": 22, "val2017": 22, "anno_dir": 22, "annot": [22, 42, 284, 285, 325, 332, 342], "instances_val2017": 22, "arrang": [22, 23, 26, 332], "wai": [22, 23, 26, 55, 186, 267, 270, 277, 285, 311, 325, 326, 331, 332, 334, 337, 340, 342], "jpg": [22, 26, 28, 282], "imag": [22, 23, 26, 28, 33, 37, 42, 264, 277, 314, 316, 332, 340, 341, 343], "coconpi": 22, "npy_dir": 22, "npy": 22, "tensorflowdataset": 23, "pytorchdataset": 23, "mxnetdataset": 23, "onnxrtqldataset": 23, "onnxrtitdataset": 23, "IT": [23, 30, 333], "pytorchmxnetwrapdataset": 23, "datafunc": 23, "pytorchmxnetwrapfunct": [23, 37], "framework_dataset": 23, "convent": [23, 42, 263, 279, 329], "imageclassifi": 23, "choos": [23, 228, 253, 268, 277, 321, 333, 338, 340, 342], "tensorflow_itex": [23, 26, 28, 30, 311], "onnxrt_qdq": [23, 30], "onnxrt_qlinearop": [23, 30, 37], "onnxrt_integerop": [23, 30, 37], "pytorch_ipex": [23, 30, 326], "pytorch_fx": [23, 30, 326], "dataset_registri": 23, "dataset_typ": 23, "dataset_format": 23, "data_format": [23, 33, 88, 90, 93, 94], "eg": [23, 228], "raw_imag": 23, "overwrit": 23, "__getitem__": [23, 37, 311, 326], "__len__": 23, "iterabledataset": 23, "also": [23, 37, 39, 46, 57, 59, 192, 264, 267, 268, 269, 270, 277, 279, 283, 284, 285, 311, 315, 319, 321, 325, 326, 330, 332, 333, 334, 336, 337, 340, 342], "__iter__": [23, 311, 326], "over": [23, 46, 191, 284, 315, 321, 325, 332, 340, 342], "download_url": 23, "url": [23, 215, 279, 282, 322, 323, 332], "filenam": [23, 257], "md5": 23, "download": [23, 193, 242, 282, 322, 338], "address": [23, 264, 267, 272, 278, 310, 327, 333], "gen_bar_updat": 23, "progress": [23, 332, 334], "bar": [23, 333], "check_integr": 23, "fpath": 23, "check": [23, 120, 121, 181, 187, 201, 208, 212, 222, 237, 240, 248, 256, 257, 271, 273, 282, 314, 322, 338], "checksum": 23, "calculate_md5": 23, "chunk_siz": 23, "1024": [23, 179], "cifar10": 23, "cifar100": 23, "databas": 23, "extract": [23, 77, 120, 121, 123], "otherwis": [23, 37, 191, 201, 208, 222, 257, 267, 278, 284, 337, 341], "www": [23, 343], "toronto": 23, "edu": 23, "kriz": 23, "cifar": [23, 343], "tar": 23, "gz": 23, "manual": [23, 332], "subset": [23, 26], "internet": 23, "put": [23, 191], "again": [23, 336], "pytorchcifar10": 23, "mxnetcifar10": 23, "tensorflowcifar10": 23, "pytorchcifar100": 23, "mxnetcifar100": 23, "tensorflowcifar100": 23, "mnist": [23, 314], "modifi": [23, 77, 280, 285, 314, 318, 332], "nation": [23, 278], "institut": 23, "standard": [23, 37, 279, 284, 310, 316, 325, 341, 342], "technologi": [23, 263, 324, 326, 329], "fashionmnist": 23, "npz": 23, "idx1": 23, "ubyt": 23, "idx3": 23, "t10k": 23, "pytorchmnist": 23, "mxnetmnist": 23, "tensorflowmnist": 23, "pytorchfashionmnist": 23, "mxnetfashionmnist": 23, "tensorflowfashionmnist": 23, "imagefold": [23, 314, 326], "expect": [23, 267, 269, 277, 278, 279, 317, 324, 334, 337, 342], "folder": [23, 28, 47, 59, 181, 256, 267, 268, 337], "subfold": 23, "belong": [23, 51, 334], "class_1": 23, "png": 23, "xxy": 23, "xxz": 23, "class_n": 23, "123": [23, 341], "nsdf3": 23, "asd932_": 23, "categori": [23, 41, 308], "mxnetimagefold": 23, "tensorflowtfrecorddataset": 23, "tensorflowimagerecord": 23, "imagenet": [23, 26, 33, 269, 326, 332, 341, 343], "000": [23, 282], "001": [23, 277, 314, 340], "099": 23, "tensorflowvocrecord": 23, "pascal": 23, "voc": [23, 46], "2012": 23, "val": [23, 26, 221, 326], "00000": 23, "00004": 23, "00001": 23, "00003": 23, "dummi": [24, 25, 46, 112, 183, 271, 282, 325, 326], "dummydataset": [24, 25, 183, 271], "shape": [24, 25, 33, 37, 42, 181, 183, 215, 221, 230, 267, 271, 277, 282, 318, 326, 337, 340, 341], "high": [24, 25, 183, 271, 322, 333, 342], "127": [24, 25, 183, 277, 334, 340], "float32": [24, 25, 37, 42, 183, 224, 253, 267, 277, 283, 308, 326, 334, 337, 340, 341], "rang": [24, 25, 37, 183, 228, 243, 253, 262, 263, 264, 267, 268, 271, 273, 277, 282, 283, 285, 309, 313, 314, 326, 329, 331, 332, 334, 337, 340, 341], "stand_norm": [24, 25, 183], "real": [24, 183, 277, 284, 309, 314, 333, 334], "dummy_v2": [25, 183], "sparse_dummy_v2": 25, "input_shap": [25, 183], "label_shap": [25, 183], "sparsedummydataset": 25, "dense_shap": 25, "sparse_ratio": 25, "imagenetraw": 26, "data_path": 26, "image_list": 26, "img1": 26, "img2": 26, "imgx": 26, "read": [26, 37, 181, 191, 336, 339], "val_map": 26, "txt": [26, 317, 322], "pytorchimagenetraw": 26, "mxnetimagenetraw": 26, "tensorflowimagenetraw": 26, "inteltensorflow": [26, 28], "tensorflowimagenetdataset": 26, "onnxrtimagenetdataset": 26, "class": [27, 47, 59, 81, 83, 87, 101, 192, 195, 242, 267, 268, 269, 271, 272, 280, 284, 310, 311, 325, 326, 330, 331, 334, 338, 342], "bert_dataset": 27, "coco_dataset": 27, "dummy_dataset": 27, "dummy_dataset_v2": 27, "imagenet_dataset": 27, "style_transfer_dataset": 27, "style": [28, 310, 320], "transfer": [28, 277, 313, 326, 340], "styletransferdataset": 28, "content_fold": 28, "style_fold": 28, "crop_ratio": 28, "resize_shap": 28, "256": [28, 33, 234, 314, 326, 341], "image_format": 28, "holder": 28, "labelbalancecocorecordfilt": 29, "balanc": [29, 208, 263, 265, 267, 271, 277, 329, 337, 340], "labelbalancecocorawfilt": 29, "tensorflowfilt": 30, "onnxrtqlfilt": 30, "onnxrtitfilt": 30, "pytorchfilt": 30, "mxnetfilt": 30, "filter_registri": 30, "filter_typ": 30, "__call__": 30, "write": [30, 181, 257, 314, 320, 326], "coco_filt": 31, "quantizedinput": [33, 341], "uint8": [33, 42, 77, 204, 228, 234, 271, 277, 283, 318, 334, 341], "point": [33, 43, 44, 63, 220, 228, 257, 262, 263, 264, 265, 266, 267, 270, 277, 325, 329, 334, 337, 340, 341, 342], "labelshift": [33, 341], "label_shift": [33, 341], "parsedecodeimagenet": [33, 341], "proto": [33, 37, 341], "parsedecodeimagenettransform": 33, "decod": [33, 39, 191, 325, 341], "v1": [33, 43, 44, 46, 55, 181, 186, 265, 314, 316, 317, 325, 328, 332, 338, 339, 340, 343], "tensorflowtransposelastchannel": 33, "transpos": [33, 37, 126, 249, 337, 341], "nhwc": [33, 107], "nchw": [33, 107], "tensorflowshiftrescal": 33, "rescal": [33, 37, 341], "tensorflowresizecropimagenettransform": 33, "height": [33, 37, 314, 341], "width": [33, 37, 277, 309, 314, 332, 334, 341], "random_crop": [33, 341], "resize_sid": [33, 341], "resize_method": 33, "bilinear": [33, 37, 341], "random_flip_left_right": [33, 341], "mean_valu": [33, 341], "channels_last": 33, "subpixel": 33, "rgb": 33, "seri": [33, 282, 322, 326, 341], "applic": [33, 267, 269, 277, 285, 316, 333, 337, 340, 341], "result": [33, 37, 39, 42, 43, 44, 46, 59, 66, 181, 201, 203, 212, 243, 256, 257, 261, 262, 265, 267, 270, 272, 273, 277, 278, 282, 311, 314, 321, 323, 325, 326, 330, 332, 333, 334, 337, 339, 340, 341, 342, 343], "crop": [33, 37, 341], "flip": [33, 37, 341], "left": [33, 37, 277, 340, 341], "right": [33, 42, 191, 277, 278, 279, 280, 340, 341], "std": [33, 37, 326, 341], "bilinearimagenettransform": 33, "central_fract": [33, 341], "875": [33, 341], "fraction": [33, 341], "onnxbilinearimagenettransform": 33, "onnxresizecropimagenettransform": 33, "std_valu": 33, "229": [33, 326], "225": [33, 326, 343], "resizewithaspectratio": 33, "87": [33, 343], "inter_pol": 33, "cv2": 33, "inter_area": 33, "aspect": [33, 37, 341], "imagenet_transform": 34, "postprocess_cl": [35, 326], "user_postprocess": 35, "just": [35, 37, 57, 149, 183, 208, 266, 271, 277, 317, 326, 331, 334, 340, 341, 342], "convert_to_unicod": 36, "text": [36, 37, 39, 44, 263, 265, 267, 277, 316, 323, 329, 332, 333, 337, 340, 341, 343], "unicod": 36, "assum": [36, 42, 283, 318], "utf": [36, 191], "load_vocab": 36, "vocab_fil": [36, 37, 341], "convert_by_vocab": 36, "vocab": 36, "whitespace_token": 36, "whitespac": [36, 44], "clean": [36, 193, 326], "split": [36, 37, 135, 213, 277, 280, 335, 337, 340, 341], "piec": [36, 39, 267, 277, 325, 337], "fulltoken": 36, "tokenzi": 36, "basictoken": 36, "punctuat": [36, 39, 44], "lower": [36, 37, 44, 64, 208, 262, 263, 266, 271, 277, 313, 329, 332, 333, 334, 340, 341, 342], "wordpiecetoken": 36, "unk_token": 36, "unk": 36, "max_input_chars_per_word": 36, "200": [36, 213, 234, 267, 280, 342], "wordpiec": [36, 37, 341], "concat_gener": 37, "inc": [37, 97, 101, 226, 236, 268, 271, 272, 278, 282, 284, 324, 333, 338, 342], "abstract": [37, 139, 283, 285, 320], "own": [37, 57, 127, 191, 261, 277, 284, 311, 321, 325, 330, 337, 339], "inherit": [37, 188, 283, 284], "tensorflowtransform": 37, "mxnettransform": 37, "pytorchtransform": 37, "onnxrtqltransform": 37, "onnxrtittransform": 37, "transform_registri": 37, "transform_typ": 37, "basetransform": 37, "tensorflowwrapfunct": 37, "transform_func": 37, "pytorchmxnettransform": 37, "get_torchvision_map": 37, "interpol": [37, 325, 332, 341], "torchvis": [37, 282, 315], "composetransform": 37, "transform_list": [37, 341], "sever": [37, 175, 263, 264, 274, 277, 313, 321, 326, 327, 329, 332, 335, 340, 341, 342], "croptoboundingbox": [37, 341], "offset_height": [37, 341], "offset_width": [37, 341], "target_height": [37, 341], "target_width": [37, 341], "box": [37, 42, 46, 280, 325, 341, 342], "vertic": [37, 341], "coordin": [37, 63, 341, 342], "top": [37, 46, 279, 325, 341], "corner": [37, 279, 283, 285, 341], "horizont": [37, 341], "mxnetcroptoboundingbox": 37, "onnxrtcroptoboundingbox": 37, "tensorflowcroptoboundingbox": 37, "resizewithratio": [37, 341], "min_dim": [37, 341], "800": [37, 341], "max_dim": [37, 341], "1365": [37, 341], "constant_valu": 37, "np": [37, 63, 314, 340, 341, 342], "arrai": [37, 42, 191, 257, 341], "smaller": [37, 123, 263, 326, 329, 332, 341], "dimens": [37, 120, 121, 183, 208, 267, 337, 341], "ensur": [37, 63, 266, 269, 314, 334, 341], "longest": [37, 341], "side": [37, 282, 341], "doesn": [37, 191, 264, 271, 283, 314, 326, 327], "exce": [37, 337, 341], "zero": [37, 88, 89, 90, 94, 208, 217, 220, 221, 228, 257, 263, 266, 267, 277, 329, 332, 334, 337, 340, 341, 342], "tensorflowresizewithratio": 37, "perm": [37, 341], "permut": [37, 341], "tensorflowtranspos": 37, "mxnettranspos": 37, "pytorchtranspos": 37, "randomverticalflip": [37, 341], "randomli": [37, 63, 277, 340, 341, 342], "tensorflowrandomverticalflip": 37, "randomhorizontalflip": [37, 326, 341], "tensorflowrandomhorizontalflip": 37, "toarrai": [37, 341], "pil": [37, 341], "ndarrai": [37, 120, 121, 123, 244, 317, 341], "numpi": [37, 42, 120, 121, 123, 317, 340, 341], "casttftransform": 37, "castonnxtransform": 37, "castpytorchtransform": 37, "centercroptftransform": 37, "center": [37, 281, 282, 322, 341, 342], "paddedcentercroptransform": 37, "crop_pad": 37, "resizetftransform": 37, "nearest": [37, 234, 267, 268, 277, 337, 341], "bicub": [37, 341], "resizepytorchtransform": 37, "randomcroptftransform": 37, "randomresizedcroppytorchtransform": 37, "08": [37, 341, 343], "randomresizedcropmxnettransform": 37, "randomresizedcroptftransform": 37, "normalizetftransform": 37, "normal": [37, 44, 267, 277, 326, 330, 337, 340, 341], "deviat": [37, 341], "broadcast": [37, 314, 341], "rescalekeraspretraintransform": 37, "rescaletftransform": 37, "rescaletransform": 37, "alignimagechanneltransform": 37, "dim": [37, 277, 340, 341], "align": [37, 278, 337, 341], "w": [37, 215, 265, 277, 332, 340, 341], "must": [37, 42, 279, 280, 284, 308, 311, 322, 334, 341], "pytorchalignimagechannel": 37, "tondarraytransform": 37, "resizemxnettransform": 37, "resizetransform": 37, "cropresizetftransform": 37, "boundari": [37, 341], "area": [37, 42, 263, 325, 329, 341], "pytorchcropresizetransform": 37, "mxnetcropresizetransform": 37, "cropresizetransform": 37, "centercroptransform": 37, "mxnetnormalizetransform": 37, "pytorchnormalizetransform": 37, "normalizetransform": 37, "randomcroptransform": 37, "randomresizedcroptransform": 37, "get_final_text": 37, "pred_text": 37, "orig_text": 37, "project": [37, 260, 278, 279, 333, 339, 342, 344], "predict": [37, 39, 43, 44, 46, 59, 181, 267, 277, 325, 337, 340, 341], "squadexampl": 37, "qas_id": 37, "question_text": 37, "doc_token": 37, "orig_answer_text": 37, "start_posit": 37, "end_posit": 37, "is_imposs": 37, "without": [37, 77, 181, 240, 263, 277, 278, 314, 326, 329, 332, 333, 334, 342], "answer": [37, 43, 44, 278, 332, 341, 343], "posit": [37, 237, 278, 325], "unique_id": 37, "example_index": 37, "doc_span_index": 37, "token_to_orig_map": 37, "token_is_max_context": 37, "input_mask": [37, 326], "segment_id": [37, 326], "read_squad_exampl": 37, "input_fil": 37, "doc_strid": [37, 341], "max_query_length": [37, 341], "output_fn": 37, "inputbatch": 37, "collecttransform": 37, "10833": 37, "tfsquadv1posttransform": 37, "n_best_siz": [37, 341], "20": [37, 220, 332, 341, 343], "384": [37, 341], "64": [37, 234, 264, 272, 277, 324, 337, 340, 341, 343], "max_answer_length": [37, 341], "30": [37, 315, 321, 341, 343], "total": [37, 46, 213, 267, 332, 337, 341, 343], "best": [37, 68, 228, 267, 268, 269, 270, 272, 278, 282, 310, 322, 330, 334, 337, 340, 341, 342], "nbest_predict": [37, 341], "question": [37, 43, 44, 277, 278, 279, 282, 283, 322, 332, 340, 341, 343], "becaus": [37, 191, 270, 277, 280, 334, 340, 341, 342], "anoth": [37, 39, 257, 341, 342], "up": [37, 151, 212, 277, 282, 314, 315, 317, 318, 321, 332, 333, 334, 339, 341, 342], "long": [37, 267, 310, 317, 337, 341], "document": [37, 261, 264, 269, 270, 277, 284, 285, 289, 314, 324, 327, 332, 338, 341], "chunk": [37, 341], "stride": [37, 88, 90, 93, 94, 341], "tfmodelzoocollecttransform": 37, "zoo": [37, 282, 315, 343], "tfsquadv1modelzooposttransform": 37, "squadv1": [37, 341], "see": [37, 39, 192, 267, 277, 278, 279, 280, 281, 310, 323, 326, 337, 340, 342], "parsedecodevoctransform": 37, "open": [38, 191, 246, 259, 278, 282, 316, 317, 326, 333], "librari": [38, 259, 264, 271, 282, 322, 326, 327, 333, 334], "popular": [38, 259, 261, 268, 272, 277, 282, 283, 284, 309, 315, 316, 324, 326, 332, 334, 337, 342], "compress": [38, 57, 215, 234, 243, 253, 259, 261, 265, 267, 268, 270, 272, 277, 282, 289, 319, 321, 326, 330, 331, 332, 333, 334, 340, 343], "techniqu": [38, 259, 261, 266, 271, 272, 277, 282, 319, 321, 326, 331, 332, 333, 334, 343], "contrib": 38, "unicoderegex": 39, "hoc": 39, "hack": 39, "recogn": [39, 242, 342], "symbol": [39, 47, 59, 280, 328], "nondigit_punct_r": 39, "compil": [39, 262, 266, 326], "regular": 39, "express": [39, 278], "preced": [39, 277, 340, 342], "digit": [39, 257, 333], "punct_nondigit_r": 39, "symbol_r": 39, "bleu_token": 39, "offici": [39, 43, 44, 181, 278, 340], "mose": 39, "smt": 39, "mosesdecod": 39, "blob": [39, 40, 43, 44, 46, 59, 326], "master": [39, 40, 43, 44, 46, 59, 326, 342], "mteval": 39, "v14": 39, "pl": 39, "l954": 39, "l983": 39, "comput": [39, 40, 43, 44, 46, 208, 212, 220, 243, 257, 263, 264, 266, 267, 277, 309, 311, 313, 316, 325, 326, 327, 329, 332, 333, 334, 337, 340, 342], "bilingu": 39, "understudi": 39, "qualiti": [39, 310], "ha": [39, 120, 121, 123, 127, 187, 191, 199, 215, 238, 264, 269, 271, 277, 279, 283, 284, 285, 311, 316, 321, 326, 327, 332, 334, 336, 339, 340, 342], "been": [39, 187, 191, 199, 207, 208, 212, 264, 267, 271, 277, 285, 310, 326, 327, 337, 340], "translat": [39, 40, 263, 329, 332, 342], "natur": [39, 267, 316], "approxim": [39, 40, 267, 284, 325, 337], "glue": [39, 46, 325, 326], "word": [39, 267, 277, 310, 325, 332, 337, 343], "ngram": [39, 325], "breviti": [39, 40, 325], "penalti": [39, 40, 325], "doe": [39, 77, 97, 101, 266, 267, 271, 310, 311, 325, 326, 337, 338, 341], "have": [39, 42, 46, 59, 77, 82, 127, 136, 181, 191, 207, 208, 212, 263, 264, 265, 267, 272, 277, 278, 279, 284, 285, 310, 311, 314, 318, 323, 325, 326, 327, 329, 330, 332, 334, 335, 337, 340, 342], "beam": [39, 325], "bleu": [40, 45, 325, 332], "tensor2tensor": 40, "bleu_hook": 40, "compute_bleu": 40, "reference_corpu": 40, "translation_corpu": 40, "max_ord": 40, "use_bp": 40, "against": [40, 201], "gram": 40, "appli": [40, 97, 101, 162, 163, 164, 167, 169, 173, 181, 188, 201, 208, 224, 232, 237, 242, 261, 263, 266, 270, 271, 272, 277, 278, 284, 285, 326, 329, 331, 332, 334, 336, 339, 340, 342], "bleu_scor": 40, "third": [42, 279, 323], "parti": [42, 277, 279, 323, 334], "pycocotool": [42, 317], "noth": [42, 342], "relat": [42, 77, 202, 205, 209, 219, 241, 246, 285, 319, 332, 337], "thu": [42, 277, 326, 332, 334], "cannot": [42, 267, 280, 310, 317, 337], "slim": [42, 53, 55, 186, 187, 328, 332], "jonathanhuang": 42, "wrap": [42, 101, 185, 280, 314], "image_id": [42, 325], "encod": [42, 191, 341], "invok": [42, 284], "groundtruth_dict": 42, "exportgroundtruthtococo": 42, "groundtruth_boxes_list": 42, "groundtruth_classes_list": 42, "max_num_class": 42, "output_path": 42, "detections_list": 42, "exportdetectionstococo": 42, "detection_boxes_list": 42, "detection_scores_list": 42, "detection_classes_list": 42, "cocowrapp": 42, "loadannot": 42, "cocoevalwrapp": 42, "agnostic_mod": 42, "computemetr": 42, "detection_typ": 42, "bbox": [42, 280, 325], "hold": [42, 63], "being": [42, 285], "iou_typ": 42, "iou_thr": [42, 46, 325], "map_point": [42, 46, 325], "cocoev": 42, "To": [42, 57, 188, 263, 264, 265, 266, 267, 270, 272, 273, 277, 279, 282, 284, 285, 310, 314, 327, 329, 332, 336, 337, 338, 340, 342], "mscoco": 42, "org": [42, 215, 234, 280, 282, 322, 332], "Then": [42, 277, 284, 340, 342], "exportsingleimagegroundtruthtococo": 42, "next_annotation_id": 42, "category_id_set": 42, "groundtruth_box": 42, "groundtruth_class": 42, "groundtruth_mask": 42, "groundtruth_is_crowd": 42, "ingest": 42, "here": [42, 265, 266, 267, 270, 271, 274, 277, 284, 314, 315, 316, 318, 324, 325, 334, 338, 339, 340, 343], "match": [42, 43, 131, 191, 201, 266, 271, 273, 282, 337], "ones": [42, 191, 332], "exportsingleimagedetectionstococo": 42, "associ": [42, 191, 201], "uniqu": [42, 277, 334], "identifi": [42, 55, 120, 121, 123, 186, 191, 272, 332, 337], "assign": [42, 257, 314, 342], "continu": [42, 267, 324, 326, 332], "drop": [42, 213, 264, 265, 267, 277, 279, 326, 327, 332, 337, 340, 343], "num_gt_box": 42, "num_detect": [42, 46, 325, 326], "image_height": 42, "image_width": 42, "detection_mask": 42, "crowd": 42, "rais": [42, 47, 120, 121, 123, 191, 192, 208, 228, 230, 242, 282, 310, 332, 333], "valueerror": [42, 120, 121, 123, 228, 317], "insid": [42, 267, 313, 317, 332, 335, 342], "exportsingleimagedetectionboxestococo": 42, "detection_box": [42, 326], "detection_scor": [42, 326], "detection_class": [42, 326], "exporsingleimagedetectionboxestococo": 42, "exportsingleimagedetectionmaskstococo": 42, "allenai": [43, 44], "bi": [43, 44], "att": [43, 44], "flow": [43, 44, 277, 280, 326], "f1_score": [43, 44], "ground_truth": [43, 44], "f1": [43, 45, 46, 314, 325, 326, 339, 343], "ground": [43, 44], "truth": [43, 44], "metric_max_over_ground_truth": [43, 44], "metric_fn": [43, 44], "exact_match_scor": 43, "exact": [43, 213], "averag": [43, 44, 46, 267, 325, 326, 337, 342, 343], "articl": [43, 44], "paragraph": [43, 44], "qa": [43, 44, 282], "normalize_answ": 44, "remov": [44, 79, 104, 110, 113, 127, 133, 136, 137, 138, 148, 150, 242, 278, 326, 332], "extra": [44, 191, 267, 326, 337], "replac": [44, 193, 201, 208, 222, 228, 262, 263, 266, 310, 314, 326, 329, 338], "newlin": [44, 257], "tab": 44, "abc": [44, 283, 342], "harmon": [44, 46], "recal": [44, 46], "equat": [44, 46, 277, 334, 340], "answer_start": 44, "177": [44, 343], "denver": 44, "bronco": 44, "nfl": 44, "afc": 44, "super": 44, "bowl": 44, "50": [44, 277, 284, 332, 340, 343], "56be4db0acb8001400a502ec": 44, "form": 44, "percentag": [44, 267, 309, 337], "bleu_util": 45, "coco_label_map": 45, "coco_tool": 45, "evaluate_squad": 45, "user_metr": [46, 59], "metric_cl": [46, 59, 326], "recommend": [46, 240, 264, 274, 282, 283, 318, 319, 332, 342], "design": [46, 64, 261, 266, 268, 271, 282, 326, 332, 334], "sub_class": [46, 59], "basemetr": [46, 59], "tensorflowmetr": 46, "maintain": [46, 266, 267, 271, 277, 278, 279, 310, 328, 332, 337, 338], "pytorchmetr": 46, "mxnetmetr": 46, "onnxrtqlmetr": 46, "onnxrtitmetr": 46, "metric_registri": 46, "metric_typ": 46, "cross": [46, 273, 320, 342], "decorator_metr": 46, "single_output": 46, "hvd": [46, 314], "wrappytorchmetr": 46, "wrapmxnetmetr": 46, "wraponnxrtmetr": 46, "binari": [46, 181, 317, 325, 338], "proport": 46, "were": [46, 191, 332], "pred_list": 46, "pytorchloss": 46, "print": [46, 130, 215, 220, 257, 273, 277, 314, 325, 326, 332, 340, 342], "mae": [46, 325], "compare_label": [46, 59, 325], "error": [46, 68, 191, 208, 254, 267, 277, 317, 325, 337, 340, 342], "actual": [46, 266, 314, 317], "compar": [46, 257, 263, 266, 267, 272, 277, 313, 325, 329, 332, 334, 337, 339, 342], "pred": [46, 181, 325], "rmse": [46, 325, 342], "squar": [46, 68, 267, 325, 342], "estim": [46, 55, 186, 342], "tensorflowtopk": 46, "k": [46, 59, 325, 332], "among": [46, 263, 277, 329, 340], "outcom": 46, "consid": [46, 181, 278, 309, 310, 342], "find": [46, 63, 120, 121, 123, 181, 257, 272, 283, 324, 332, 337, 339, 340, 342], "num_correct": 46, "num_sampl": 46, "generaltopk": 46, "cocomapv2": [46, 325], "anno_path": [46, 325], "map_kei": 46, "detectionboxes_precis": 46, "output_index_map": [46, 325], "tensorflowmap": 46, "tensorflowcocomap": 46, "tensorflowvocmap": 46, "squadf1": [46, 325], "miou": 46, "num_class": 46, "21": [46, 277, 324, 333, 340, 343], "iou": 46, "intersect": [46, 201, 283, 325], "onnxrtglu": 46, "roc": 46, "dlrm": 46, "register_customer_metr": 46, "mani": [46, 59, 228, 267, 271, 277, 310, 311, 322, 337, 342], "tell": [46, 59, 191], "what": [46, 59, 212, 243, 271, 278, 333], "topk": [46, 59, 314, 325, 326, 334], "matrix": [46, 59, 270, 277], "updat": [46, 59, 127, 193, 208, 212, 261, 267, 317, 324, 325, 326, 332, 337, 340, 342], "across": [47, 188, 263, 272, 312, 319, 326, 329, 332, 335, 340, 342], "frozen": [47, 55, 59, 186, 328], "graph_def": [47, 55, 59, 79, 82, 107, 181, 186, 249], "ckpt": [47, 55, 59, 181, 186, 343], "savedmodel": [47, 55, 59, 186], "onnx_ml_pb2": [47, 328], "modelproto": [47, 248, 328], "gluon": [47, 59, 328], "hybirdblock": [47, 59], "mixed_precis": [47, 189, 326], "obj": [47, 57, 59, 243, 246, 257], "measur": [47, 181, 252, 267, 271, 277, 283, 308, 319, 325, 326, 337, 342], "variou": [47, 188, 263, 266, 268, 271, 285, 321, 329, 332, 335], "dl": [47, 264, 320, 333, 343], "assertionerror": [47, 230, 242], "basemodel": [48, 97, 98, 101, 186, 271], "plai": [48, 186, 267, 277, 333, 337, 340], "graph": [48, 55, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 166, 168, 172, 175, 176, 178, 179, 180, 181, 186, 201, 236, 262, 266, 277, 280, 283, 314, 320, 328, 334, 335, 336], "role": [48, 186, 267, 277, 337, 340], "base_model": 49, "keras_model": 49, "mxnet_model": 49, "nets_factori": 49, "onnx_model": 49, "tensorflow_model": 49, "torch_model": 49, "kerasmodel": [50, 186], "get_model_fwk_nam": 51, "fwk": 51, "mxnetmodel": 52, "net": [53, 187, 282], "factori": [53, 187], "tfslimnetsfactori": [53, 187], "onnxmodel": 54, "get_model_typ": [55, 186], "validate_graph_nod": [55, 186], "node_nam": [55, 120, 121, 123, 186, 284], "compat": [55, 181, 186, 279, 314, 328, 332, 338], "graphdef": [55, 127, 181, 186, 328], "validate_and_inference_input_output": [55, 186], "input_tensor_nam": [55, 181, 186], "output_tensor_nam": [55, 181, 186], "infer": [55, 57, 59, 79, 97, 101, 186, 212, 228, 243, 264, 265, 266, 267, 270, 271, 277, 282, 283, 284, 309, 313, 319, 326, 327, 330, 332, 333, 334, 337, 340, 342], "graph_sess": [55, 186], "session": [55, 181, 186, 326], "sess": [55, 181, 186], "graph_def_sess": [55, 186], "frozen_pb_sess": [55, 186], "load_saved_model": [55, 186], "saved_model_tag": [55, 186], "signatur": [55, 186], "tag": [55, 186, 191, 277, 340], "metagraphdef": [55, 186], "analyz": [55, 156, 186, 339, 340], "input_tensor": [55, 181, 186], "output_tensor": [55, 181, 186], "try_loading_kera": [55, 186], "try": [55, 186, 271, 277, 280, 282, 317, 332, 334, 340, 342], "keras_sess": [55, 186], "slim_sess": [55, 186], "checkpoint_sess": [55, 186], "estimator_sess": [55, 186], "input_fn": [55, 186], "saved_model_sess": [55, 186], "tensorflowbasemodel": [55, 186], "tensorflowsavedmodelmodel": [55, 186], "tensorflowllmmodel": [55, 186], "exceed": [55, 186], "protobuf": [55, 186], "2gb": [55, 186], "tensorflowqatmodel": 55, "tensorflowcheckpointmodel": [55, 186], "checkpoint": [55, 186, 191, 226, 236, 256, 328], "tensorflowmodel": [55, 186], "pytorchbasemodel": 56, "pytorchmodel": 56, "pytorchfxmodel": 56, "ipexmodel": 56, "driven": [57, 282, 319, 326, 330], "objective_registri": 57, "objective_custom_registri": 57, "obj_cl": 57, "eural_compressor": 57, "objective_cl": 57, "user_object": 57, "__class__": 57, "__name__": 57, "objective_cfg": 57, "deep_get": [57, 187, 257], "usr_cfg": 57, "deep_set": [57, 257], "user_obj_cfg": 57, "With": [57, 148, 271, 277, 280, 283, 285, 311, 322, 326, 330, 332, 333, 334, 339, 340, 342, 343], "easili": [57, 272, 277, 283, 330, 340], "special": [57, 191, 268, 280, 311, 325, 326, 330, 332, 337], "peak": [57, 273, 330], "memori": [57, 127, 208, 228, 257, 263, 264, 265, 267, 270, 273, 277, 309, 311, 313, 326, 327, 329, 330, 332, 334, 335, 337, 340, 342, 343], "block": [57, 212, 228, 263, 267, 321, 329, 330, 332, 337, 342], "multiobject": 57, "metric_criterion": 57, "metric_weight": 57, "obj_criterion": 57, "obj_weight": 57, "is_measur": 57, "calib_dataload": [59, 80, 97, 98, 101, 269, 270, 271, 272, 280, 282, 311, 320, 325, 326, 334, 335, 336, 337], "calib_func": [59, 80, 97, 98, 101, 102, 228, 271, 336], "entir": [59, 243, 265, 267, 270, 280, 284, 285, 309, 332], "autotunestrategi": 60, "There": [60, 62, 262, 266, 270, 277, 310, 318, 321, 326, 337, 340, 342], "onc": [60, 62, 181, 191, 271, 284, 285, 311, 332, 333, 342, 343], "polici": [60, 62, 68, 272, 278, 282, 344], "automixedprecisiontunestrategi": 61, "basictunestrategi": 62, "bayesiantunestrategi": 63, "acq_max": 63, "ac": 63, "gp": 63, "y_max": 63, "n_warmup": 63, "10000": [63, 332], "n_iter": 63, "acquisit": 63, "gaussian": [63, 342], "relev": [63, 284, 285, 310, 332], "known": [63, 191, 263, 326, 329, 332, 334, 342], "limit": [63, 192, 257, 263, 267, 268, 271, 282, 324, 329, 334, 337], "acq": 63, "randomst": 63, "scipi": 63, "x_max": 63, "targetspac": 63, "pbound": 63, "9527": [63, 326], "append": [63, 280, 313, 326, 331], "while": [63, 264, 266, 267, 271, 277, 283, 284, 315, 321, 327, 332, 334, 337, 340], "duplic": [63, 150, 154], "bayesianoptim": 63, "verbos": [63, 220, 250], "conservativetunestrategi": 64, "o0": [64, 342], "who": [64, 278], "exhaustivetunestrategi": 65, "hawq_v2tunestrategi": 66, "hawq": [66, 342], "v2": [66, 265, 311, 314, 316, 317, 324, 338, 340, 342, 343], "hessian": [66, 267, 337, 342], "network": [66, 234, 263, 264, 277, 309, 313, 316, 326, 329, 333, 334, 340, 342], "made": [66, 277, 283, 334, 338, 342], "small": [66, 120, 121, 122, 123, 267, 277, 332, 337, 342, 343], "impact": [66, 332, 338, 342], "auto_mixed_precis": 67, "msetunestrategi": 68, "those": [68, 127, 191, 257, 266, 271, 277, 313, 320, 326, 327, 331, 332, 334, 342], "mse_v2tunestrategi": 69, "revert": [69, 77, 342], "fx": [69, 201, 230, 236, 262, 264, 266, 321, 327, 333, 334, 336], "randomtunestrategi": 70, "strategy_registri": [71, 342], "tunestrategi": [71, 342], "tunestrategymeta": 71, "metaclass": 71, "tuning_sampl": 73, "tuning_spac": [73, 74, 76], "tuning_struct": [73, 74, 75], "tuningord": 74, "Not": [74, 75, 187, 257, 310], "tuningsampl": 74, "tuningspac": [74, 75], "tuning_order_lst": 74, "initial_op_tuning_cfg": 74, "modelwisetuningsampl": 74, "tuning_items_prior": 74, "op_dtype_dict": 74, "optuningconfig": [74, 75, 76], "optypewisetuningsampl": 74, "opwisetuningsampl": 74, "fallbacktuningsampl": 74, "op_dtyp": 74, "accumul": [74, 263, 267, 329, 342], "skip_first": 74, "lowerbitssampl": 74, "blockfallbacktuningsampl": 74, "op_block_lst": 74, "target_dtyp": [74, 201], "smoothquantsampl": 74, "alpha_list": 74, "weightonlyquantsampl": 74, "tuningitem": 75, "item_typ": 75, "capabl": [75, 85, 264, 267, 277, 284, 285, 308, 318, 326, 327, 332, 334, 342], "intern": [75, 183, 311, 325, 332], "merg": [75, 154, 183, 273, 342], "tree": 75, "pattern_to_intern": 75, "default_dtyp": 75, "pattern_to_path": 75, "quant_mode_from_pattern": 75, "internal_pattern": 75, "initial_tuning_cfg_with_quant_mod": 75, "op_name_typ": 75, "quant_mod": [75, 85, 88, 89, 90, 93, 94, 284, 285], "cfg": [75, 124, 125, 207, 208, 212, 246, 284, 285], "step1": 75, "step2": 75, "complet": [75, 283, 284, 332, 334, 342, 343], "step3": 75, "step4": 75, "step5": 75, "op_typ": [76, 79, 82, 99, 208, 212, 265, 266], "op_quant_mod": 76, "quanttyp": 77, "quantopt": 77, "quant_typ": 77, "quant_opt": 77, "preprocess_user_cfg": 77, "op_user_cfg": 77, "op_user_cfg_modifi": 77, "group_siz": [77, 221, 224, 228, 234, 267, 272, 337], "32": [77, 208, 213, 224, 228, 234, 263, 264, 271, 272, 314, 320, 329, 337, 343], "ordereddefaultdict": 77, "extract_data_typ": 77, "data_typ": [77, 213], "sign": [77, 234, 267, 277, 279, 282, 285, 309, 333, 334, 337, 339], "unsign": [77, 285, 337], "reverted_data_typ": 77, "signed_flag": 77, "get_adaptor_nam": 77, "build_slave_faker_model": 77, "slave": [77, 342], "virtual": [77, 333], "classregist": 77, "smoother": 78, "static_qu": [78, 189, 269, 310], "smoothquantcalibr": 79, "percentil": [79, 99, 228, 309], "outlier": [79, 265, 267, 270, 277, 284, 309, 337, 340], "smoothquantcalibrationllm": 79, "model_path": [79, 181, 215, 234, 267], "temp_path": 79, "weight_name_map": 79, "llm": [79, 82, 215, 234, 263, 265, 266, 267, 270, 277, 319, 329, 332, 333, 335, 337, 340], "temporari": [79, 208, 257, 278], "median": 79, "autotrack": [79, 181], "compon": [80, 272, 280, 310, 314, 322, 323, 331, 332], "sq": [80, 207, 271, 324, 340], "smoothquantconfig": [80, 97, 99, 232, 234, 265, 270, 271], "calib_iter": [80, 84, 97, 98, 101, 271, 284], "scaler": 81, "smoothquantscal": 82, "scales_per_op": [82, 99], "factor": [82, 208, 220, 262, 265, 267, 271, 277, 337, 340, 343], "individu": [82, 277, 278, 332, 340], "share": [82, 135, 150, 155, 228, 267, 277, 317, 318, 337, 340, 342], "smoothquantscalerllm": 82, "kerasadaptor": 84, "framework_specific_info": [84, 85, 283], "kerasqueri": 84, "local_config_fil": [84, 85], "kerasconfigconvert": 84, "quant_config": [84, 85, 97, 101, 187, 188, 198, 200, 207, 211, 213, 214, 215, 222, 225, 227, 237, 242, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 319, 329], "staticquantconfig": [84, 85, 95, 99, 187, 232, 234, 266, 269, 270, 271, 272], "kerassurgeri": 84, "fakequ": [84, 141], "tensorflowadaptor": 85, "stock": [85, 340], "spr": 85, "tensorflow_itexadaptor": 85, "tensorflowconfig": 85, "tensorflowqueri": [85, 283], "performance_onli": [85, 102, 153, 167, 172, 180, 326], "itex_mod": [85, 102, 142, 153, 167, 172], "tensorflowconfigconvert": 85, "qconv2d": 88, "kernel_s": [88, 90, 94], "dilation_r": [88, 90, 94], "group": [88, 221, 228, 267, 277, 282, 321, 332, 337, 341, 342, 343], "use_bia": [88, 89, 90, 94], "kernel_initi": [88, 89], "glorot_uniform": [88, 89, 90, 94], "bias_initi": [88, 89, 90, 94], "kernel_regular": [88, 89], "bias_regular": [88, 89, 90, 94], "activity_regular": [88, 89, 90, 94], "kernel_constraint": [88, 89], "bias_constraint": [88, 89, 90, 94], "act_min_valu": [88, 89, 90, 93, 94], "act_max_valu": [88, 89, 90, 93, 94], "weight_min_valu": [88, 89, 90, 93, 94], "weight_max_valu": [88, 89, 90, 93, 94], "granular": [88, 89, 90, 93, 94, 204, 263, 277, 283, 284, 285, 318, 321, 329, 334, 340], "per_tensor": [88, 89, 90, 93, 94, 95, 99, 204, 234, 269, 284, 285, 318, 334], "quant_statu": [88, 89, 90, 93, 94], "calib": [88, 89, 90, 93, 94, 284], "quant_t": [88, 89, 90, 93, 94], "s8": [88, 89, 90, 93, 94, 250], "quant_round_mod": [88, 89, 90, 93, 94], "half_away_from_zero": [88, 89, 90, 93, 94], "quant_narrow_rang": [88, 89, 90, 93, 94], "quant_axi": [88, 89, 90, 93, 94], "initialize_int8_conv2d": 88, "fp32_layer": [88, 89, 90, 93, 94], "q_config": [88, 89, 90, 93, 94, 250, 283], "qdens": 89, "unit": [89, 279, 332], "initialize_int8_dens": 89, "depthwis": [90, 208], "conv2d": [90, 91, 94, 99, 106, 112, 113, 114, 118, 119, 124, 161, 171, 176, 208, 284, 285, 316, 318, 340, 342], "qdepthwiseconv2d": 90, "depth_multipli": [90, 94], "depthwise_initi": [90, 94], "depthwise_regular": [90, 94], "depthwise_constraint": [90, 94], "depthwiseconv2d": 90, "initialize_int8_depthwise_conv2d": 90, "depthwise_conv2d": 91, "layer_initi": 91, "pool2d": 91, "separable_conv2d": 91, "qavgpool2d": 93, "pool_siz": 93, "averagepooling2d": 93, "qmaxpool2d": 93, "maxpooling2d": 93, "initialize_int8_avgpool": 93, "avgpool": [93, 165, 174, 318], "initialize_int8_maxpool": 93, "maxpool": [93, 165, 174, 318], "separ": [94, 213, 278, 310, 320, 322, 323, 331], "qseparableconv2d": 94, "pointwise_initi": 94, "pointwise_regular": 94, "pointwise_constraint": 94, "separableconv2d": 94, "initialize_int8_separable_conv2d": 94, "operatorconfig": [95, 234], "weight_dtyp": [95, 99, 269], "weight_sym": [95, 99, 269, 271, 272], "weight_granular": [95, 99, 269], "act_dtyp": [95, 99, 234, 263, 265, 266, 269, 329], "act_sym": [95, 99, 213, 234, 266, 269, 271, 272], "act_granular": [95, 99, 234, 269], "get_all_registered_config": [95, 234], "get_default_static_quant_config": [95, 99], "entri": [97, 98, 101, 120, 121, 123, 232, 233, 236, 237, 257, 268, 310, 323], "static_quant_entri": [97, 232], "main": [97, 98, 101, 215, 232, 233, 237, 238, 267, 268, 269, 271, 273, 274, 277, 280, 311, 314, 326, 332, 334, 337], "substitut": [97, 101, 271], "smooth_quant_entri": [97, 232, 310], "smooth_quant_config": 97, "get_all_config_set": [98, 233], "weight_algorithm": 99, "minmax": [99, 204, 208, 234, 266, 284, 285, 309, 318, 334], "act_algorithm": 99, "fold": [99, 115, 116, 208, 227, 228, 234, 250, 265, 267, 318, 337, 340], "999": 99, "record_max_info": [99, 208], "weight_clip": [99, 208], "auto_alpha_arg": [99, 234, 340], "default_sq_alpha_arg": 99, "get_default_sq_config": [99, 234], "rtn": [99, 188, 223, 232, 233, 234, 268, 274, 277, 310, 335, 337], "algorithm_entri": [100, 235, 310], "autotun": [100, 235, 269, 270, 271, 277, 290, 310], "need_appli": [101, 237], "configs_map": [101, 194, 232, 237], "quantize_model": [101, 269, 270, 271, 277], "quantize_model_with_single_config": 101, "graphconvert": 102, "qt_config": 102, "int8_sequ": 102, "fp32_op": [102, 103, 153], "bf16_op": [102, 103, 153, 284, 336], "data_load": [102, 283], "fake_qu": [102, 141, 153, 167, 172], "qdq_enabl": 102, "new_api": [102, 124, 125, 130, 132, 144, 167, 172, 176], "use_bf16": 102, "rewrit": [103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 201], "bf16convert": [103, 336], "dequant": [104, 141, 143, 144, 145, 146, 148, 193, 208, 218, 224, 228, 257, 277, 280, 284, 340], "cast": [104, 336, 341], "rerewrit": 104, "dequantizecastoptim": 104, "b16": 104, "bf16_convert": 105, "dequantize_cast_optim": 105, "biasadd": [106, 112, 117, 119, 155, 318], "convertaddtobiasaddoptim": 106, "addv2": [106, 122, 318], "layout": 107, "convertlayoutoptim": 107, "abov": [107, 265, 266, 267, 269, 277, 283, 284, 285, 332, 334, 340, 342], "leakyrelu": [108, 340], "convertleakyreluoptim": 108, "subgraph": [108, 119, 335, 342], "coeffici": [108, 332], "nan": 109, "convertnantorandom": 109, "const": [109, 110, 116, 117, 120, 121, 123, 135, 150], "consist": [109, 116, 267, 279, 280, 310, 340, 342], "placehold": [110, 183, 204, 310], "convertplaceholdertoconst": 110, "dilat": 111, "contract": 111, "dilatedcontract": 111, "spacetobatchnd": 111, "batchtospacend": 111, "inject": [112, 326], "injectdummybiasaddoptim": 112, "fusion": [112, 114, 123, 131, 155, 162, 163, 164, 167, 168, 169, 173, 270, 280, 283, 318], "expanddim": 113, "expanddimsoptim": 113, "next": [113, 183, 267, 277, 284, 285, 311, 337, 342], "reshap": [114, 120, 121, 126, 208, 277, 340], "fetchweightfromreshapeoptim": 114, "pack": [114, 216, 221], "batchnorm": [115, 120, 280, 340], "foldbatchnormnodesoptim": 115, "graphfoldconstantoptim": 116, "supported_op_typ": 116, "fusebiasaddandaddoptim": 117, "columnwis": 118, "fusecolumnwisemuloptim": 118, "depthwiseconv2dn": [118, 124, 161, 171, 318], "math": [119, 277, 334], "fuseconvwithmathoptim": 119, "elimin": 119, "realdiv": [119, 122], "decompos": [120, 121], "fusedecomposedbnoptim": 120, "input_graph_def": [120, 121, 123], "node_name_from_input": [120, 121, 123], "strip": [120, 121, 123, 136, 137, 181], "off": [120, 121, 123, 267, 277, 279, 337], "port": [120, 121, 123], "underli": [120, 121, 123, 191], "node_from_map": [120, 121, 123], "node_map": [120, 121, 123], "pull": [120, 121, 123], "nodedef": [120, 121, 123], "isn": [120, 121, 123], "present": [120, 121, 123, 277, 333, 340], "values_from_const": [120, 121, 123], "node_def": [120, 121, 123], "valid_reshape_input": [120, 121], "reshape_in0_ndef": [120, 121], "reshape_in1_ndef": [120, 121], "bypass_reshap": [120, 121], "input_node_map": [120, 121], "get_const_dim_count": [120, 121], "instancenorm": [121, 340], "fusedecomposedinoptim": 121, "gelu": 122, "fusegeluoptim": 122, "sqrt": 122, "erf": 122, "layernorm": [123, 277, 340], "fuselayernormoptim": 123, "remap": [123, 191], "fusedbatcnormv3": 123, "And": [123, 271, 277, 279, 280, 308, 310, 326, 340], "2d": [123, 277, 340], "3d": [123, 277, 333, 340], "fusepadwithconv2doptim": 124, "itex_qdq_mod": [124, 125], "conv3d": [124, 161], "fusepadwithfp32conv2doptim": 125, "fusetransposereshapeoptim": 126, "cse": [127, 150], "graphcseoptim": 127, "introduc": [127, 261, 267, 277, 283, 284, 285, 318, 326, 334, 337, 338, 340], "ident": [127, 133, 278], "d": [127, 212, 320, 332], "child": [127, 193, 215], "b1": 127, "c1c2": 127, "d1": [127, 257], "c1": 127, "c2": 127, "relu": [127, 131, 155, 280, 318, 340], "relu6": [127, 318], "grappler": [128, 318], "grappleroptim": 128, "input_output_nam": 128, "opt_cfg": 128, "leverag": [128, 253, 262, 266, 269, 272, 277, 282, 316, 331, 334, 337, 342], "convert_add_to_biasadd": 129, "convert_layout": 129, "convert_leakyrelu": 129, "convert_nan_to_random": 129, "convert_placeholder_to_const": 129, "dilated_contract": 129, "dummy_biasadd": 129, "expanddims_optim": 129, "fetch_weight_from_reshap": 129, "fold_batch_norm": 129, "fold_const": 129, "fuse_biasadd_add": 129, "fuse_column_wise_mul": 129, "fuse_conv_with_math": 129, "fuse_decomposed_bn": 129, "fuse_decomposed_in": 129, "fuse_gelu": 129, "fuse_layer_norm": 129, "fuse_pad_with_conv": 129, "fuse_pad_with_fp32_conv": 129, "fuse_reshape_transpos": 129, "graph_cse_optim": 129, "grappler_pass": 129, "insert_print_nod": 129, "move_squeeze_after_relu": 129, "pre_optim": 129, "remove_training_nod": 129, "rename_batch_norm": 129, "split_shared_input": 129, "strip_equivalent_nod": [129, 181], "strip_unused_nod": [129, 181], "switch_optim": 129, "insertprintminmaxnod": 130, "pre_node_nam": 130, "post_node_nam": 130, "move": [131, 191, 208, 228, 267, 277, 280, 337, 338], "squeez": [131, 280], "movesqueezeafterreluoptim": 131, "entranc": 132, "preoptim": 132, "removetrainingnodesoptim": 133, "protected_nod": 133, "types_to_splic": 133, "checknumer": 133, "stopgradi": 133, "renam": [134, 268, 338], "fusedbatchnorm": 134, "fusedbatchnormv2": 134, "renamebatchnormoptim": 134, "splitsharedinputoptim": 135, "equival": [136, 227, 263, 265, 267, 270, 277, 282, 329, 333, 337, 340], "stripequivalentnodesoptim": 136, "output_node_nam": [136, 137, 167, 168, 172, 181], "unus": [137, 181, 242], "stripunusednodesoptim": 137, "input_node_nam": [137, 167, 172, 181], "switch": 138, "switchoptim": 138, "graphrewriterbas": 139, "graph_bas": 140, "freez": [141, 142, 181, 262, 266, 332], "freezefakequantopoptim": 141, "prior": [141, 342], "freezevaluetransform": 142, "max_min_data": 142, "postfix": 142, "tensor_data": [142, 187, 257, 258], "th": 142, "quantizedconv": [143, 144], "quantizeddeconv": 143, "redund": [143, 145, 242], "fuseconvredundantdequantizetransform": 143, "_quantizedconv": 143, "_quantizeddeconv": 143, "successor": [143, 144, 145, 146], "requant": [144, 146], "fuseconvrequantizetransform": 144, "quantizedmatmul": [145, 146], "fusematmulredundantdequantizetransform": 145, "_quantizedmatmul": [145, 146], "fusematmulrequantizedequantizetransform": 146, "quantizedmatmulwithbiasanddequant": 146, "fusematmulrequantizetransform": 146, "fusematmulrequantizedequantizenewapitransform": 146, "fusematmulrequantizenewapitransform": 146, "newapi": 146, "freeze_fake_qu": 147, "freeze_valu": 147, "fuse_conv_redundant_dequant": 147, "fuse_conv_requant": 147, "fuse_matmul_redundant_dequant": 147, "fuse_matmul_requant": 147, "meta_op_optim": 147, "post_hostconst_convert": 147, "post_quantized_op_cs": 147, "scale_propag": 147, "meta": [148, 221, 274, 282, 324, 333, 343], "metainfochangingmemopoptim": 148, "metaop": 148, "hostconst": 149, "posthostconstconvert": 149, "postcseoptim": 150, "quantizev2": 150, "decreas": [150, 332], "propag": 151, "scalepropagationtransform": 151, "direct": [151, 268, 332], "insert_qdq_pattern": 152, "merge_duplicated_qdq": 152, "share_qdq_y_pattern": 152, "generategraphwithqdqpattern": 153, "calibration_data": 153, "op_wise_config": [153, 167, 172, 284], "quantized_nod": 153, "llm_weight_minmax": 153, "q": [153, 155, 167, 262, 266, 268, 277, 337, 340], "dq": [153, 155, 167, 262, 266, 268, 277, 340], "mergeduplicatedqdqoptim": 154, "shareqdqforitexypatternoptim": 155, "break": [155, 314, 326], "graphanalyz": 156, "extend_engin": 156, "graphrewriterhelp": 156, "graph_rewrit": 157, "quantize_graph": 157, "transform_graph": 157, "graph_convert": 157, "graph_util": 157, "quantize_graph_common": 157, "quantize_graph_bas": 158, "quantize_graph_bn": 158, "quantize_graph_concatv2": 158, "quantize_graph_conv": 158, "quantize_graph_for_intel_cpu": 158, "quantize_graph_matmul": 158, "quantize_graph_pool": 158, "fusedbatchnormv3": [159, 169], "fusenodestartwithfusedbatchnormv3": [159, 169], "_quantizedfusedbatchnorm": 159, "concatv2": [160, 170, 180, 318], "fusenodestartwithconcatv2": [160, 170], "quantizedconcatv2": [160, 170], "fusenodestartwithconv2d": [161, 171], "conv2dbackpropinput": 162, "conv3dbackpropinputv2": 162, "fusenodestartwithdeconv2d": 162, "fusedinstancenorm": 163, "fusenodestartwithfusedinstancenorm": 163, "batchmatmul": 164, "batchmatmulv2": 164, "fusenodestartwithmatmul": [164, 173], "fusenodestartwithpool": [165, 174], "fuse_qdq_bn": 166, "fuse_qdq_concatv2": 166, "fuse_qdq_conv": 166, "fuse_qdq_deconv": 166, "fuse_qdq_in": 166, "fuse_qdq_matmul": 166, "fuse_qdq_pool": 166, "optimize_qdq": 166, "optimizeqdqgraph": 167, "input_graph": [167, 172, 176, 283], "op_wise_sequ": [167, 172], "quantizegraph": 168, "quantizegraphbas": 168, "quantizenodebas": 168, "descript": [168, 265, 280, 284, 285, 311, 340], "quantizegraphforintel": 172, "herlper": 175, "quantizegraphhelp": 175, "staticmethod": 175, "biascorrect": 176, "fp32_graph": 176, "weight_empir": 176, "Will": [176, 236, 321], "graphtransform": 177, "graphtransformbas": 177, "input_pb": [177, 179, 180], "bias_correct": 178, "graph_transform_bas": 178, "insert_log": 178, "rerange_quantized_concat": 178, "insertlog": 179, "node_name_list": 179, "show_nam": 179, "show_op": 179, "first_n": 179, "summar": [179, 310], "messag": [179, 273, 279, 342], "dump_fp32": 179, "rerang": 180, "rerangequantizedconcat": 180, "rerange_quant": 180, "concat": 180, "read_graph": 181, "in_graph": 181, "in_graph_is_binari": 181, "write_graph": 181, "out_graph_def": 181, "out_graph_fil": 181, "is_ckpt_format": 181, "is_saved_model_format": 181, "saved_model": [181, 271, 335], "get_tensor_by_nam": 181, "try_cnt": 181, "scope": [181, 268, 279, 284, 326], "mai": [181, 191, 192, 264, 267, 270, 277, 278, 279, 284, 309, 310, 316, 317, 323, 327, 333, 334, 337, 340, 342], "tensor_nam": [181, 191, 193], "suffix": 181, "got": [181, 284, 317], "iterator_sess_run": 181, "iter_op": 181, "feed_dict": 181, "integr": [181, 264, 268, 271, 277, 283, 326, 337], "makeiter": 181, "feed": [181, 332], "collate_tf_pr": 181, "collat": 181, "get_input_output_node_nam": 181, "fix_ref_type_of_graph_def": 181, "ref": 181, "tool": [181, 249, 257, 277, 282, 283, 326, 332, 333, 334], "strip_unused_lib": 181, "r1": 181, "15": [181, 318, 322], "branch": [181, 279], "attr": 181, "get_graph_def": 181, "auto_input_output": 181, "get_model_input_shap": 181, "generate_feed_dict": 181, "apply_inlin": 181, "inlin": 181, "definit": [181, 224], "concret": [181, 186, 342], "new_graph_def": 181, "construct_function_from_graph_def": 181, "frozen_func": 181, "rebuild": 181, "reconstruct": [181, 333], "new_func": 181, "parse_saved_model": 181, "_saved_model": 181, "reconstruct_saved_model": 181, "trackabl": 181, "destin": [181, 248], "basedatalod": 183, "default_col": 183, "batch": [183, 213, 243, 267, 311, 313, 326, 331, 332, 334, 340, 341, 342, 343], "outer": 183, "iterablefetch": 183, "collate_fn": [183, 311], "drop_last": 183, "indexfetch": 183, "iterablesampl": 183, "act": [183, 278], "batchsampl": 183, "basedataload": 183, "last_batch": [183, 311], "rollov": [183, 311], "batch_sampl": [183, 311], "num_work": [183, 311, 326, 334], "pin_memori": [183, 311], "shuffl": [183, 311, 326, 334], "_generate_dataload": 183, "dummydatasetv2": 183, "model_wrapp": 184, "tensorflowglobalconfig": 185, "get_tf_model_typ": 186, "version1_lt_version2": [187, 257], "version1": [187, 257], "version2": [187, 257], "version1_gt_version2": [187, 257], "greater": [187, 257, 271, 332, 342], "version1_eq_version2": [187, 257], "version1_gte_version2": [187, 257], "version1_lte_version2": [187, 257], "register_algo": [187, 242, 310], "algos_map": [187, 242], "example_algo": [187, 242], "dot": [187, 257, 264, 277, 327, 334], "nest": [187, 212, 257], "person": [187, 257, 278, 333], "john": [187, 257], "deep": [187, 257, 261, 263, 264, 268, 271, 277, 282, 283, 284, 311, 321, 322, 326, 327, 329, 333, 334, 342], "itex_instal": 187, "extens": [187, 191, 192, 257, 264, 265, 266, 268, 277, 282, 283, 290, 310, 317, 318, 319, 321, 322, 324, 326, 327, 328, 332, 333, 334, 337, 340, 342], "instal": [187, 271, 314, 317, 319, 344], "combine_histogram": [187, 257], "old_hist": [187, 257], "arr": [187, 257], "histogram": [187, 244, 257], "old": [187, 257, 265, 326, 338], "get_all_fp32_data": [187, 257], "get_tensor_histogram": [187, 257], "bin": [187, 191, 193, 257, 317], "2048": [187, 213, 215, 234, 257, 267, 282, 337], "disable_random": 187, "valid_keras_format": 187, "captureoutputtofil": [187, 257], "tmp_file_path": [187, 257], "stream": [187, 257, 343], "sy": [187, 257, 310], "stderr": [187, 257], "captur": [187, 208, 257, 266, 267], "gptq": [188, 223, 226, 232, 234, 236, 268, 274, 277, 310, 324, 335, 337], "prepar": [188, 207, 210, 226, 232, 237, 242, 262, 263, 265, 266, 267, 268, 271, 274, 277, 280, 314, 319, 332, 334], "layer_wis": [189, 256, 335], "mx_quant": 189, "pt2e_quant": 189, "base_algorithm": 189, "modified_pickl": 190, "f": [191, 267, 277, 310, 314, 334, 337, 340], "file_lik": 191, "map_loc": 191, "pickle_modul": 191, "weights_onli": 191, "pickle_load_arg": 191, "pickl": [191, 192], "unpickl": [191, 192], "facil": 191, "treat": [191, 311], "storag": [191, 267, 277, 325, 337, 340], "thei": [191, 264, 278, 310, 318, 326, 330], "deseri": 191, "fail": [191, 280, 311, 316], "certain": [191, 272, 339], "except": [191, 208, 257, 267, 310, 334, 335], "howev": [191, 267, 274, 277, 332, 337, 340], "serial": [191, 192], "resid": 191, "builtin": [191, 314], "cuda": [191, 208, 220, 236, 238, 327, 332, 334], "device_id": 191, "final": [191, 266, 277, 284, 326, 330, 332, 334, 338, 342], "fall": [191, 263, 329], "behavior": [191, 278, 283, 284, 285, 318, 328, 337, 342], "wasn": 191, "appear": [191, 278], "register_packag": 191, "readlin": 191, "seek": [191, 337], "o": [191, 282, 310, 322], "pathlik": 191, "metadata": 191, "primit": 191, "unless": [191, 318], "insecur": 191, "possibl": [191, 201, 331, 332, 335, 336, 342], "malici": 191, "arbitrari": [191, 268, 326, 331], "never": [191, 342], "come": [191, 263, 324, 329, 342], "untrust": 191, "unsaf": 191, "tamper": 191, "trust": 191, "load_state_dict": 191, "ram": [191, 267, 274], "surg": 191, "byte": [191, 208], "unicodedecodeerror": 191, "ascii": 191, "codec": 191, "0x": 191, "incorrect": 191, "latin1": 191, "byte_arrai": 191, "xdoctest": 191, "skip": [191, 342], "undefin": 191, "filepath": [191, 257, 310], "pt": [191, 256, 267, 282, 319, 322, 328, 333, 334, 336, 337], "onto": 191, "lambda": [191, 335], "loc": 191, "io": [191, 234, 267, 282, 322], "bytesio": 191, "rb": 191, "buffer": 191, "portabl": 192, "represent": [192, 263, 267, 277, 278, 280, 309, 313, 329, 332, 334], "copyreg": 192, "mechan": [192, 261, 332, 339], "pickler": 192, "pickletool": 192, "comment": [192, 267, 273, 278, 284, 325, 326, 337, 341], "misc": [192, 323], "__version__": [192, 310], "format_vers": 192, "compatible_format": 192, "pickleerror": 192, "picklingerror": 192, "unpicklingerror": 192, "secur": [192, 282, 333, 344], "violat": 192, "necessarili": 192, "attributeerror": 192, "eoferror": 192, "importerror": [192, 317], "indexerror": 192, "qdqlayer": [193, 224], "input_scal": [193, 208, 224], "get_modul": [193, 208, 228], "get_children": 193, "children": 193, "get_named_children": 193, "dowload_hf_model": [193, 242], "repo_id": [193, 242], "cache_dir": [193, 242], "repo_typ": [193, 242], "revis": [193, 226, 236, 242], "hug": [193, 242, 282, 333], "face": [193, 242, 278, 282, 289, 333, 338, 343], "hf": [193, 226, 236, 242, 274, 324, 340, 343], "hub": [193, 226, 236, 242, 282, 315], "load_empty_model": [193, 242, 267, 274, 335], "pretrained_model_name_or_path": [193, 242], "automodelforcausallm": [193, 319], "get_super_module_by_nam": 193, "father": 193, "update_modul": 193, "new_modul": [193, 208, 228, 242], "load_layer_wise_quantized_model": 193, "load_tensor_from_shard": 193, "shard": 193, "load_tensor": 193, "load_valu": 193, "param_nam": [193, 257], "state_dict": [193, 267, 314, 337], "load_modul": 193, "register_weight_hook": 193, "clean_weight": 193, "saved_path": 193, "hook": [193, 246, 313, 326, 332, 340], "handler": [193, 257, 342], "clean_module_weight": 193, "half": [194, 196, 201, 234, 264, 267, 327], "halfprecisionconvert": 194, "half_precision_convert": 195, "module_wrapp": 195, "halfprecisionmodulewrapp": 196, "float16": [196, 201, 253, 267, 337], "mx": [197, 199, 234, 263, 268, 282, 319, 329], "mxlinear": 198, "in_featur": [198, 218, 224], "out_featur": [198, 218, 224], "mx_spec": [198, 199], "mxquantiz": 198, "ordereddict": [198, 207, 211, 214, 225, 310], "elemformat": 199, "roundingmod": 199, "quantize_elemwise_op": 199, "quantize_mx_op": 199, "elem_format": 199, "block_siz": [199, 234, 267, 337], "scale_bit": 199, "expand_and_reshap": 199, "pt2e": [200, 202, 204, 230, 232, 236], "w8a8pt2equant": 200, "w8a8": [200, 262, 266, 267, 277, 335, 337], "patternpair": 201, "fn": 201, "torchfunctyp": 201, "search_pattern": 201, "graphmodul": [201, 230, 280, 336], "replace_pattern": 201, "found": [201, 208, 264, 282, 310, 324, 327, 340, 342, 343], "pattern_factori": 201, "fn_arg": 201, "ellipsi": [201, 238], "get_filter_fn": 201, "node_list": 201, "apply_single_pattern_pair": 201, "gm": 201, "pattern_pair": 201, "get_unquantized_node_set": 201, "unquant": 201, "node_candidate_list": 201, "get_half_precision_node_set": 201, "candid": 201, "unquantized_node_set": 201, "node_set_from_user_config": 201, "graphmodel": 201, "half_precision_rewrit": 202, "output_dir": [203, 210, 226, 253, 268, 326], "saved_result": [203, 210, 226, 236, 267, 268, 328, 337], "create_quant_spec_from_config": 204, "sym": [204, 208, 228, 284, 285, 318, 334, 337], "is_dynam": 204, "ao": 204, "quantizationspec": 204, "symmetr": [204, 208, 253, 271, 285, 334, 337, 341, 342], "per_channel": [204, 234, 284, 285, 318, 334], "create_xiq_quantizer_from_pt2e_config": 204, "x86_inductor_quant": 204, "x86inductorquant": [204, 262], "boolean": 204, "recover_model_from_json": [206, 256], "json_file_path": [206, 256], "recov": [206, 208, 228, 256, 257, 283, 313], "smoothquantquant": 207, "qdq_quantiz": 207, "tune_cfg": [207, 208, 212, 242, 283, 285, 342], "run_fn": [207, 208, 233, 237, 265, 266, 267, 268], "inplac": [207, 208, 237, 268], "op_infos_from_cfg": [207, 208, 212], "output_tensor_id_op_nam": [207, 208, 212], "carri": [207, 208, 332], "place": [207, 208, 228, 237, 268, 313, 322, 332, 342], "torchsmoothqu": [207, 208, 340], "get_quantizable_ops_recurs": [208, 212], "act_algo": [208, 234, 266], "output_tensor_ids_op_nam": [208, 212], "quantizable_op": [208, 212], "check_cfg_and_qconfig": [208, 212], "cfg_to_qconfig": [208, 212], "user_cfg": [208, 212], "dump_model_op_stat": [208, 212, 242], "get_par": [208, 228], "all_par": [208, 228], "parent": [208, 228], "set_modul": [208, 228, 242], "update_sq_scal": 208, "ipex_config_path": [208, 212], "smoothquant_scale_info": 208, "ipex_config": 208, "enough_memo_store_scal": 208, "need_spac": 208, "amount": [208, 270, 340], "move_input_to_devic": [208, 228], "forward_wrapp": [208, 228], "zip": [208, 280], "fed": [208, 342], "warn": [208, 254, 310], "issu": [208, 277, 278, 279, 281, 282, 322, 334], "model_forward": [208, 228], "forward": [208, 228, 267, 277, 284, 326, 332, 334, 337, 340], "until": [208, 284, 342], "retri": 208, "build_captured_dataload": 208, "calib_num": 208, "inputcapturemodul": 208, "captureddataload": 208, "cal_scal": 208, "input_max_ab": 208, "weight_max_lb": 208, "concaten": 208, "divis": 208, "model_forward_per_sampl": 208, "quant_dequant_w_v1": 208, "num_bit": [208, 224, 277, 340], "scheme": [208, 212, 224, 228, 283, 284, 285, 311, 318, 337, 342], "asym": [208, 224, 228, 285, 318, 337], "asymmetr": [208, 271, 285, 334, 337, 342], "quant_dequant_x_v1": 208, "min_x": 208, "max_x": 208, "No": [208, 279, 310, 317, 326, 333], "clip": [208, 228, 267, 277, 337, 340], "invalid": 208, "reshape_scale_as_weight": 208, "reshape_in_channel_to_last": 208, "reshape_scale_as_input": 208, "register_autotun": 208, "datalod": 208, "graphtrac": [208, 228], "autoalpha": 208, "absorb_to_lay": [208, 227, 228, 234], "alpha_min": [208, 234, 340], "alpha_max": [208, 234, 340], "alpha_step": [208, 234, 340], "shared_criterion": [208, 234, 340], "init_alpha": [208, 234], "do_blockwis": [208, 234, 340], "n_sampl": [208, 267], "traced_model": 208, "scale_shar": [208, 234], "sqlinearwrapp": 208, "input_minmax": 208, "quint8": 208, "wrapperlay": 208, "input_min": 208, "input_max": 208, "save_q_input": 208, "staticqu": [209, 211], "recursivescriptmodul": 210, "staticquantquant": 211, "generate_xpu_qconfig": 212, "qconfig": [212, 256, 267, 337], "generate_activation_observ": 212, "smooth_quant_en": 212, "observ": [212, 237, 262, 266, 267, 268, 285, 337, 339, 342], "simple_infer": 212, "warm": 212, "get_depth": 212, "depth": [212, 336], "get_dict_at_depth": 212, "target_depth": 212, "get_element_under_depth": 212, "ops_lst": 212, "parse_cfg": 212, "ops_nam": 212, "get_quantizable_ops_from_cfg": 212, "input_tensor_ids_op_nam": 212, "transformerbasedmodelblockpatterndetector": 212, "pattern_lst": 212, "block_pattern": 212, "ffn": 212, "autoroundquant": 213, "enable_full_rang": [213, 228, 234, 253, 267, 335, 337], "amp": [213, 337], "lr_schedul": [213, 234, 267, 326, 332], "neelnanda": 213, "pile": 213, "10k": [213, 315], "enable_quanted_input": [213, 234, 267], "enable_minmax_tun": [213, 234, 267], "minmax_lr": [213, 234, 267], "low_gpu_mem_usag": [213, 234, 267], "seqlen": [213, 234, 267, 282], "nsampl": [213, 215, 234, 337], "rand": [213, 234, 267, 277, 340], "nblock": [213, 234], "gradient_accumulate_step": [213, 234, 267], "not_use_best_ms": [213, 234, 267], "dynamic_max_gap": [213, 234, 267], "scale_dtyp": [213, 224, 234, 253, 267, 337], "quant_block_list": [213, 234], "act_bit": [213, 234], "act_group_s": [213, 234], "act_dynam": [213, 234], "low_cpu_mem_usag": 213, "get_dataload": [213, 282], "dataset_nam": 213, "comma": 213, "reproduc": 213, "awqquant": 214, "absorb_layer_dict": [214, 234], "is_leaf": 215, "judg": 215, "trace_gptq_target_block": 215, "module_typ": 215, "modulelist": 215, "stack": [215, 282], "critic": [215, 271, 278], "gptq_related_block": 215, "embed": [215, 309, 332], "transformers_pr": 215, "transformers_nam": 215, "find_lay": 215, "supported_lay": [215, 228], "find_layers_nam": 215, "log_quantizable_layers_per_transform": 215, "transformer_block": 215, "rawgptquant": 215, "weight_config": [215, 227], "use_max_length": [215, 337], "use_layer_wis": [215, 234, 267], "pretrain": [215, 253], "arxiv": [215, 234, 263, 267, 277, 282, 309, 329, 332, 333, 337, 340], "ab": [215, 228, 234, 271, 277, 332, 334, 340], "2210": [215, 234, 267, 277, 337], "17323": [215, 234, 267, 277, 337], "gptquantiz": 215, "logic": [216, 220, 238, 268], "packer": 216, "unpack": 216, "qtensorconfig": 217, "hqqmoduleconfig": 217, "hqqmodul": 217, "hqqtensorhandl": 218, "hqqlinear": [218, 222], "q_weight": 218, "qtensor": [218, 219], "bitpack": 219, "optimize_weights_proximal_legaci": 220, "min_max": 220, "opt_param": 220, "lp_norm": 220, "beta": 220, "kappa": 220, "along": [220, 221, 267, 322, 332, 337], "1e1": 220, "qtensormetainfo": 221, "nbit": 221, "meta_info": 221, "patch_hqq_moduil": 222, "mod": 222, "patch": 222, "filter_fn": 222, "configmappingtyp": 222, "replacement_fn": 222, "hqquantiz": 222, "hqq": [223, 234, 268, 282], "autoround": [223, 232, 234, 268, 277, 282, 324], "awq": [223, 226, 228, 232, 234, 236, 268, 277, 335, 337], "teq": [223, 232, 234, 268, 282, 333, 335, 337], "weightonlylinear": [224, 267, 337], "zp": [224, 228, 277, 340], "compression_dtyp": [224, 253, 337], "int32": [224, 253, 267, 337], "compression_dim": [224, 253, 337], "g_idx": 224, "use_optimum_format": [224, 253, 337], "fakeaffinetensorquantfunct": 224, "affin": [224, 334], "teqlinearfakequ": 224, "orig_lay": 224, "mullinear": 224, "rtnquantiz": 225, "woq": [226, 234, 236, 263, 282, 324, 329], "original_model": [226, 236, 267], "loadformat": [226, 239], "upstream": [226, 236], "hugginfac": [226, 236], "checkpoint_dir": [226, 236, 256], "cowork": [226, 236], "torchscript": [226, 236, 316, 335, 340], "defult": [226, 236], "causal": [226, 236, 332], "remain": [226, 236], "__init__": [226, 236, 283, 310, 311, 325, 342], "trust_remote_cod": [226, 236, 282], "woqmodelload": 226, "trainableequivalenttransform": 227, "trainabl": [227, 267, 282, 333, 337], "tequant": 227, "quantize_4bit": 228, "quantil": [228, 342], "nf4": [228, 267, 337], "return_int": [228, 337], "fp4": [228, 263, 267, 329, 337], "q_tensor": 228, "qdq_weight_asym": 228, "schema": 228, "qdq_weight_sym": 228, "full_rang": 228, "amax": [228, 263, 329], "qdq_weight_actor": 228, "quant_tensor": 228, "search_clip": 228, "num": [228, 257], "best_clip_ratio": 228, "quant_weight_w_scal": 228, "spevif": 228, "fetch_modul": [228, 242], "get_absorb_lay": 228, "no_absorb_lay": 228, "absorpt": 228, "absorbed_1": 228, "xx": 228, "get_block_prefix": 228, "block_list": 228, "block_num": 228, "block_prefix": 228, "replace_forward": 228, "rest": 228, "part": [228, 261, 264, 277, 280, 322, 327, 332, 335, 340], "recover_forward": 228, "get_module_input_output": 228, "module_hook_config": 228, "input_func": 228, "output_func": 228, "help": [228, 261, 272, 277, 310, 324, 328, 337, 342], "module_name_list": 228, "fc1": [228, 266], "fc2": 228, "input_valu": 228, "output_valu": 228, "total_valu": 228, "pt2e_export": 229, "export_model_for_pt2e_qu": 230, "dynamic_shap": 230, "graph_modul": 230, "eager": [230, 262, 266, 267, 268, 282, 314, 321, 334, 336], "rtn_entri": 232, "rtnconfig": [232, 233, 234, 242, 267, 268, 272, 319], "gptq_entri": 232, "gptqconfig": [232, 234, 267, 272], "pt2e_dynamic_quant_entri": 232, "pt2e_static_quant_entri": 232, "awq_quantize_entri": 232, "awqconfig": [232, 234, 267], "teq_quantize_entri": 232, "teqconfig": [232, 234, 267], "autoround_quantize_entri": 232, "autoroundconfig": [232, 234, 267], "hqq_entri": 232, "hqqconfig": [232, 234, 267], "mx_quant_entri": 232, "mxquantconfig": [232, 234, 263, 329], "mixed_precision_entri": 232, "mixprecisionconfig": 232, "get_rtn_double_quant_config_set": 233, "doubl": [233, 234, 267, 333], "run_arg": [233, 237, 268], "_description_": [233, 268], "torchbaseconfig": 234, "use_sym": [234, 267, 272], "group_dim": [234, 267, 337], "use_full_rang": [234, 267], "use_mse_search": [234, 267], "use_double_qu": [234, 267], "double_quant_dtyp": [234, 267], "double_quant_bit": [234, 267], "double_quant_use_sym": [234, 267], "double_quant_group_s": [234, 267], "quant_lm_head": [234, 267], "get_default_rtn_config": [234, 274], "processor_typ": [234, 274], "torch_util": [234, 282, 335, 340], "get_default_double_quant_config": 234, "bnb_nf4": [234, 242], "act_ord": [234, 267], "percdamp": [234, 267, 337], "static_group": [234, 267, 337], "get_default_gptq_config": 234, "use_auto_scal": [234, 267], "use_auto_clip": [234, 267], "acceler": [234, 238, 240, 264, 265, 267, 270, 277, 282, 322, 326, 332, 333, 336, 337, 340, 342], "2306": [234, 267, 277, 337], "00978": [234, 267, 277, 337], "get_default_awq_config": 234, "get_default_teq_config": 234, "via": [234, 267, 277, 278, 282, 314, 321, 326, 332, 333], "gradient": [234, 267, 277, 282, 321, 326, 332, 333, 343], "descent": [234, 267, 277, 282, 333], "2309": [234, 267, 277], "05516": [234, 267, 277], "get_default_autoround_config": 234, "w_dtype": [234, 263, 265, 266, 329], "out_dtyp": 234, "bfloat16": [234, 264, 327, 336], "blocksiz": [234, 263, 329], "round_method": 234, "get_default_mx_config": 234, "dynamicquantconfig": [234, 262], "w_sym": 234, "w_granular": 234, "w_algo": 234, "get_default_dynamic_config": 234, "model_info": 234, "get_default_static_config": 234, "quant_zero": [234, 267], "quant_scal": [234, 267], "scale_quant_group_s": [234, 267], "quadrat": [234, 267], "blog": [234, 282, 333], "mobiusml": [234, 267], "hqq_blog": [234, 267], "get_default_hqq_config": 234, "fp8config": 234, "fp8_e4m3": 234, "w_observ": 234, "minmax_per_channel": 234, "act_observ": 234, "hpu": [234, 236, 238], "fp8": [234, 236, 263, 268, 282, 329, 333], "get_default_fp8_config": 234, "get_default_fp8_config_set": 234, "get_default_mixed_precision_config": 234, "get_default_mixed_precision_config_set": 234, "get_woq_tuning_config": [234, 272], "load_entri": 235, "fp32_model": [236, 250, 257, 265, 266, 270, 271, 335, 337], "acceleratorregistri": 238, "register_acceler": 238, "cuda_acceler": 238, "cpu_acceler": 238, "xpu_acceler": 238, "hpu_acceler": 238, "auto_detect_acceler": 238, "device_nam": [238, 240], "appropri": [238, 266, 272, 274, 277, 278, 309, 340], "forc": [238, 336], "force_devic": 238, "insensit": 238, "refin": [238, 271, 320, 332], "is_ipex_import": 240, "intel_extension_for_pytorch": [240, 266], "is_transformers_import": 240, "is_package_avail": 240, "package_nam": 240, "packag": [240, 282, 283, 310, 317, 322, 333, 338, 342], "is_hpex_avail": 240, "hpex": 240, "is_ipex_avail": 240, "get_ipex_vers": 240, "get_torch_vers": 240, "get_acceler": 240, "device_synchron": 240, "raw_func": 240, "synchron": [240, 342], "auto_acceler": 241, "get_model_info": 242, "white_module_list": 242, "get_double_quant_config_dict": 242, "double_quant_typ": 242, "double_qu": 242, "get_quant": 242, "quantizer_cl": 242, "postprocess_model": 242, "get_model_devic": 242, "get_processor_type_from_user_config": 242, "user_processor_typ": 242, "notimplementederror": 242, "loop": [243, 280, 284, 285, 318, 339, 342], "compressionmanag": 243, "deal": 243, "pruningconfig": 243, "orchestr": [243, 261, 321], "callback": [243, 246, 280, 326, 331, 332, 334], "on_train_begin": [243, 280, 313, 326, 331, 332, 334], "train_loop": [243, 326, 331], "epoch": [243, 311, 313, 314, 326, 331, 332], "on_epoch_begin": [243, 246, 313, 326, 331], "on_step_begin": [243, 246, 313, 326, 331, 332], "on_after_compute_loss": [243, 313, 326, 331], "backward": [243, 277, 313, 314, 326, 331, 332, 334, 338], "on_before_optimizer_step": [243, 313, 326, 331, 332], "on_step_end": [243, 246, 313, 326, 331], "on_epoch_end": [243, 246, 313, 326, 331], "on_train_end": [243, 313, 326, 331, 332, 334], "path_to_sav": 243, "train_func": [243, 314, 326, 334], "top1": [243, 325, 332, 334, 343], "callbacks_list": 243, "layerhistogramcollector": 244, "num_bin": 244, "8001": 244, "layer_tensor": 244, "include_lay": 244, "collector": 244, "diverg": [244, 252, 285, 309, 342], "get_func_from_config": 246, "func_dict": 246, "get_preprocess": 246, "get_metr": 246, "get_postprocess": 246, "get_algorithm": 246, "create_dataset": 246, "data_sourc": 246, "cfg_preprocess": 246, "cfg_filter": 246, "create_dataload": 246, "dataloader_cfg": 246, "create_eval_func": 246, "postprocess_cfg": 246, "baselin": [246, 272, 339, 340], "create_train_func": 246, "train_cfg": 246, "Their": 246, "qlinear2qdq": 247, "check_model": 248, "onnx_qlinear_to_qdq": 248, "input_name_to_nod": 248, "qlinearop": [248, 321, 334, 343], "tf_to_fp32_onnx": 249, "save_path": [249, 250, 283, 328], "inputs_as_nchw": 249, "tf_to_int8_onnx": 249, "int8_model": [249, 250], "get_node_map": 250, "fp32_onnx_path": 250, "module_node_map": 250, "get_quantizable_onnx_op": 250, "quantize_nod": 250, "dynamic_quant_export": 250, "pt_fp32_model": 250, "pt_int8_model": 250, "weight_typ": 250, "static_quant_export": 250, "_quantiz": 250, "torch_to_fp32_onnx": 250, "do_constant_fold": 250, "torch_to_int8_onnx": 250, "auxiliari": 251, "collect_layer_histogram": 251, "create_obj_from_config": 251, "kl_diverg": 251, "load_huggingfac": [251, 326], "weights_detail": 251, "optimizedmodel": 253, "from_pretrain": [253, 282, 319, 326], "save_for_huggingface_upstream": [253, 326], "export_compressed_model": [253, 337], "saved_dir": [253, 337], "_type_": 253, "comoress": 253, "msg": 254, "debug": [254, 342], "fatal": 254, "alia": [254, 257], "is_int8_model": 256, "load_weight_onli": 256, "best_model": [256, 264, 269, 270, 271, 272, 337], "history_cfg": 256, "best_configur": 256, "best_model_weight": 256, "snapshot": 256, "cfg_from_fil": 257, "yaml_fil": [257, 314], "time_limit": 257, "context": [257, 267, 277, 337], "get_siz": 257, "seen": [257, 283], "recurs": 257, "compute_spars": 257, "non": [257, 264, 267, 280, 337, 342], "fault_tolerant_fil": 257, "equal_dict": 257, "d2": 257, "compare_kei": 257, "ignore_kei": 257, "ignor": [257, 267, 277, 309, 337, 340, 342], "get_tuning_histori": 257, "tuning_history_path": 257, "offlin": [257, 265, 270, 271, 277, 278, 326, 334, 340], "str2arrai": 257, "dequantize_weight": 257, "weight_tensor": 257, "min_filter_tensor": 257, "max_filter_tensor": 257, "scale_info": 257, "global_st": 257, "load_data_from_pkl": 257, "pkl": 257, "dump_data_to_loc": 257, "show_memory_info": 257, "hint": [257, 317], "show": [257, 263, 277, 278, 314, 326, 329, 340, 342], "dump_class_attr": 257, "sex": [257, 278], "male": 257, "compare_object": 257, "obj1": 257, "obj2": 257, "ignore_attr": 257, "comparison": [257, 337, 338], "alias_param": 257, "param_alia": 257, "alias": [257, 310], "print_tabl": 257, "column_map": 257, "table_entri": 257, "titl": [257, 323, 342], "insert_newlin": 257, "tabl": [257, 263, 285, 316, 319, 329, 343], "prettyt": 257, "column": [257, 267, 277, 337, 340], "row": [257, 277, 340], "decim": 257, "get_tensors_info": 257, "workload_loc": 257, "about": [257, 261, 278, 310, 311, 326, 332, 336, 342, 343], "workload": [257, 264, 333], "get_weights_detail": 257, "weightdetail": 257, "dump_tabl": 257, "file_typ": 257, "csv": 257, "dump_table_to_csv": 257, "get_number_of_socket": 257, "platform": [257, 273, 277, 321, 333, 334], "opentri": 257, "activation_min": 257, "activation_max": 257, "print_op_list": 257, "get_op_list": 257, "minmax_file_path": 257, "input_model_tensor": 257, "optimized_model_tensor": 257, "activation_min_max": 257, "calculate_ms": 257, "mse_metric_gap": 257, "fp32_tensor": 257, "dequantize_tensor": 257, "euclidean": 257, "distanc": 257, "check_key_exist": 257, "weightsdetail": 258, "input_tensor_data": 258, "optimized_tensor_data": 258, "weightsstatist": 258, "welcom": [260, 278, 279, 282, 344], "aim": [261, 272, 282, 319, 324, 332, 340, 342], "familiar": 261, "concept": [261, 320, 339], "learn": [261, 263, 264, 267, 268, 271, 277, 282, 283, 284, 311, 316, 320, 321, 322, 326, 327, 329, 332, 333, 334, 340, 342], "conduct": [261, 280, 326, 342], "mainstream": [261, 282], "quick": [261, 274, 318, 327, 332], "understand": [261, 277, 334], "workflow": [261, 263, 282, 284, 285, 316, 319, 322, 327, 329], "broad": [261, 282, 321], "notebook": 261, "oneapi": [261, 264, 322, 333], "ai": [261, 263, 264, 282, 329, 333, 336], "analyt": [261, 322, 333], "toolkit": [261, 280, 322, 333], "tutori": [261, 280, 333], "comprehens": [261, 268, 271, 326], "migrat": [261, 265, 270, 277, 340], "previou": [261, 268, 277, 284, 285, 326, 332, 338, 340, 342, 343], "veri": [261, 267, 277, 326, 334, 337, 342], "introduct": 261, "dive": [261, 318], "bitwidth": 262, "whole": [262, 277, 285, 334, 343], "runtim": [262, 277, 279, 282, 283, 284, 286, 311, 315, 318, 321, 327, 329, 337, 342], "four": [262, 266, 272, 343], "neural_compressor": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 280, 282, 285, 308, 310, 311, 313, 314, 316, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342], "userfloatmodel": [262, 266], "exported_model": [262, 266], "prepared_model": [262, 265, 266, 267, 274, 319], "_inductor": [262, 266], "opt_model": [262, 266, 326], "set_loc": [262, 265, 266, 267, 268, 269], "releas": [262, 266, 282, 319, 322, 344], "breakthrough": [263, 329], "emerg": [263, 329, 340], "analysi": [263, 329, 332, 339], "chatbot": [263, 329, 333], "fuel": [263, 329], "nevertheless": [263, 329], "power": [263, 271, 326, 329, 333], "challeng": [263, 267, 329, 335], "explos": [263, 329], "growth": [263, 264, 326, 327, 329, 332], "pose": [263, 329, 335], "obstacl": [263, 329], "practic": [263, 329], "preserv": [263, 267, 309, 329, 332, 337], "promot": [263, 267, 329], "microsoft": [263, 282, 283, 329], "msfp": [263, 329], "mxfp8": [263, 329], "e5m2": [263, 329], "e8m0": [263, 329], "e4m3": [263, 329], "mxfp6": [263, 329], "fp6": [263, 329], "e3m2": [263, 329], "e2m3": [263, 329], "mxfp4": [263, 329], "e2m1": [263, 267, 329, 337], "mxint8": [263, 329], "At": [263, 279, 284, 329, 342], "demonstr": [263, 267, 272, 274, 282, 315, 329], "abil": [263, 283, 284, 318, 329, 340], "occupi": [263, 329], "incur": [263, 329], "energi": [263, 329], "cost": [263, 267, 277, 329, 334, 337], "silicon": [263, 329], "seamlessli": [263, 329, 332, 342], "offer": [263, 267, 271, 329], "meticul": [263, 329], "craft": [263, 329], "empow": [263, 329], "sacrif": [263, 329, 333], "shown": [263, 265, 277, 311, 325, 326, 329, 330, 331, 332, 335, 340, 342], "explor": [263, 283, 329], "focus": [263, 267, 271, 278, 283, 319, 329], "distinct": [263, 329], "friendli": [263, 277, 318, 326, 329, 333, 340], "adapt": [263, 278, 284, 329, 333], "consumpt": [263, 267, 277, 329, 340], "frac": [263, 277, 329, 340], "expon": [263, 329], "floor": [263, 329], "log2": [263, 329], "rmin": [263, 271, 277, 329, 334], "user_model": [263, 319, 329], "darvish": [263, 329], "rouhani": [263, 329], "bita": [263, 329], "et": [263, 267, 277, 309, 329, 337, 340], "al": [263, 267, 277, 282, 309, 322, 329, 337, 340], "push": [263, 267, 277, 279, 329, 332, 337, 340], "narrow": [263, 329], "inferenc": [263, 329], "cloud": [263, 279, 282, 329, 333], "33": [263, 324, 329, 343], "2020": [263, 329], "10271": [263, 329], "10281": [263, 329], "ocp": [263, 329], "preprint": [263, 267, 277, 309, 329, 332, 337, 340], "2310": [263, 329], "10537": [263, 329], "2023": [263, 267, 277, 282, 329, 332, 337, 340], "recent": [264, 326, 327], "significantli": [264, 267, 326, 327, 332, 342], "propos": [264, 267, 277, 283, 327, 337, 340], "googl": [264, 282, 310, 327, 333], "ieee": [264, 277, 327, 340], "wide": [264, 267, 277, 282, 315, 327, 332, 334], "sixteen": [264, 327], "bandwidth": [264, 267, 277, 326, 327, 337], "3rd": [264, 277, 327, 333, 334, 336], "gen": [264, 277, 324, 327, 333, 334, 336], "xeon": [264, 273, 277, 282, 322, 323, 324, 327, 333, 334, 336, 343], "scalabl": [264, 271, 277, 282, 322, 324, 327, 333, 334, 336], "codenam": [264, 324, 327], "cooper": [264, 322, 327, 333], "lake": [264, 322, 327, 333], "boost": [264, 282, 327, 332, 333], "purpos": [264, 265, 266, 267, 269, 318, 327, 334], "x86": [264, 327], "instruct": [264, 265, 277, 284, 285, 322, 327, 332, 333, 334, 340, 343], "avx512": [264, 277, 327, 334], "vcvtne2ps2bf16": [264, 327], "vcvtneps2bf16": [264, 327], "vdpbf16p": [264, 327], "product": [264, 277, 321, 327, 333, 334, 339, 342], "publish": [264, 278, 323, 324, 327, 340], "4th": [264, 277, 324, 333, 334], "isa": 264, "vector": 264, "512": [264, 267], "avx": 264, "16": [264, 322, 337, 343], "754": 264, "complement": [264, 332], "latest": [264, 268, 282, 322, 333, 338], "deliv": [264, 267, 326, 333, 338], "flexibl": [264, 267, 271, 282, 332, 337], "amx": [264, 333], "improv": [264, 266, 267, 277, 279, 282, 309, 310, 326, 332, 333, 334, 336, 337, 342, 343], "ideal": 264, "recognit": [264, 314, 316, 332], "advantag": [264, 332, 342], "onednn": [264, 271, 327, 334], "engin": 264, "fbgemm": [264, 327, 334], "10004": [264, 267, 268, 273, 280, 283, 311, 313, 314, 318, 321, 327, 329, 331, 335, 337], "avx512_bf16": [264, 327], "11": [264, 277, 322, 325, 327, 340, 342, 343], "avx512_fp16": 264, "onednn_max_cpu_isa": 264, "avx512_core_amx_fp16": 264, "eval_acc_fn": [264, 269, 271], "acc": [264, 269, 324, 332, 343], "might": [264, 280, 310, 342], "custom_tune_config": [264, 269, 270, 271, 272], "build_torch_model": 264, "gigant": [265, 270, 340], "systemat": [265, 270, 340], "quantif": [265, 267, 270, 337, 340], "difficult": [265, 270, 272, 277, 283, 340], "difficulti": [265, 270, 277, 340], "mathemat": [265, 270, 277, 340], "stai": [265, 267, 268, 337, 340], "achiev": [265, 266, 267, 268, 269, 272, 274, 277, 316, 324, 326, 331, 332, 333, 334, 340, 342], "lambada": [265, 340], "openai": [265, 340], "sweet": [265, 340], "spot": [265, 340], "region": [265, 340], "paper": [265, 267, 277, 332, 337, 340], "bigscienc": [265, 324, 340, 343], "bloom": [265, 277, 282, 324, 332, 340, 343], "560m": [265, 340], "354": [265, 340], "3542": [265, 340], "1b7": [265, 324, 340], "4634": [265, 340], "4936": [265, 340], "3b": [265, 324, 340], "518": [265, 340], "5185": [265, 340], "7b1": [265, 340, 343], "5764": [265, 340, 343], "5977": [265, 340], "bloomz": [265, 340, 343], "3947": [265, 340], "3930": [265, 340], "4828": [265, 340], "4906": [265, 340], "5018": [265, 340], "4980": [265, 340], "5593": [265, 340, 343], "5552": [265, 340], "facebook": [265, 324, 340, 343], "opt": [265, 277, 282, 324, 332, 340, 342, 343], "125m": [265, 282, 319, 340], "379": [265, 340], "3757": [265, 340], "350m": [265, 340], "4516": [265, 340], "4533": [265, 340], "5789": [265, 340], "5742": [265, 340], "7b": [265, 274, 324, 340, 343], "6365": [265, 340], "6404": [265, 340], "6769": [265, 340, 343], "6804": [265, 340, 343], "13b": [265, 324, 340, 343], "6872": [265, 340], "6814": [265, 340], "30b": [265, 324, 340, 343], "7149": [265, 340], "7128": [265, 340], "66b": [265, 340], "7398": [265, 340], "7326": [265, 340], "llama": [265, 274, 282, 324, 332, 333, 335, 337, 340, 343], "7361": [265, 340, 343], "7357": [265, 340], "7627": [265, 340, 343], "7590": [265, 340], "7759": [265, 340, 343], "7840": [265, 340], "65b": [265, 340], "7908": [265, 340], "7957": [265, 340], "eleutherai": [265, 282, 319, 324, 340, 343], "gpt": [265, 282, 319, 324, 332, 340, 343], "j": [265, 277, 282, 324, 332, 340, 343], "6b": [265, 324, 340, 343], "6831": [265, 340, 343], "6821": [265, 277, 340], "mbzuai": [265, 340], "lamini": [265, 332, 340], "124m": [265, 340], "3804": [265, 340], "3887": [265, 340], "774m": [265, 340], "5048": [265, 340], "5057": [265, 340], "5b": [265, 340], "5443": [265, 340, 343], "5436": [265, 340], "mosaicml": [265, 340, 343], "mpt": [265, 332, 340, 343], "chat": [265, 274, 324, 340, 343], "655": [265, 340, 343], "6499": [265, 340], "stabilityai": [265, 340], "stablelm": [265, 340], "4172": [265, 340], "4149": [265, 340], "togethercomput": [265, 340], "redpajama": [265, 340], "incit": [265, 340], "6542": [265, 340], "6735": [265, 340], "6718": [265, 340], "6740": [265, 340, 343], "6569": [265, 340], "6621": [265, 340], "v0": [265, 324, 340], "7143": [265, 340], "7221": [265, 340], "6895": [265, 340], "6953": [265, 340, 343], "databrick": [265, 324, 340, 343], "dolli": [265, 324, 332, 340, 343], "6866": [265, 340, 343], "6297": [265, 340], "6247": [265, 340], "tiiuae": [265, 324, 340, 343], "falcon": [265, 282, 324, 332, 340, 343], "6437": [265, 340, 343], "6392": [265, 340], "asterisk": [265, 340], "gt": [265, 267, 340, 341], "retrain": [266, 313], "involv": 266, "philosophi": [266, 271, 334], "request": [266, 282, 334], "would": [266, 277, 279, 326, 332, 334, 340], "crucial": [266, 332], "occur": 266, "jit": [266, 340], "effect": [266, 267, 283, 332, 333], "begin": [266, 310, 311, 313, 326, 332, 342], "program": [266, 282, 314, 323], "dynamo": [266, 268], "qd": 266, "As": [267, 277, 280, 284, 311, 325, 326, 332, 337, 342], "becom": [267, 277, 283, 316, 332, 337], "preval": [267, 277, 337], "grow": [267, 277, 337], "demand": [267, 277, 337], "modern": [267, 277, 337], "trade": [267, 277, 337], "bottleneck": [267, 277, 337], "deploi": [267, 272, 277, 279, 326, 337, 342], "roughli": [267, 277, 337], "speak": [267, 277, 337], "count": [267, 277, 337], "p": [267, 274, 277, 337], "theoret": [267, 277, 334, 337], "capac": [267, 277, 337, 339], "flop": [267, 277, 337], "famou": [267, 277, 337], "scenario": [267, 268, 277, 283, 308, 326, 332, 337], "approx": [267, 277, 337], "bmm": [267, 277, 337], "past": [267, 277, 283, 337], "100x": [267, 277, 337], "besid": [267, 277, 283, 337], "mention": [267, 277, 332, 337], "reason": [267, 277, 278, 284, 311, 337, 342], "caus": [267, 277, 284, 311, 332, 337], "straightforward": [267, 271, 277, 332, 337, 340], "think": [267, 337], "intuit": [267, 277, 337, 340], "uniformli": [267, 337], "qlora": [267, 277, 337], "uniform": [267, 309, 337], "prove": [267, 277, 309, 337, 340], "shot": [267, 271, 321, 326, 332, 333, 337], "highli": [267, 333, 337], "invers": [267, 337], "restor": [267, 337], "tailor": [267, 274], "often": [267, 311, 331, 332], "outperform": 267, "signround": 267, "protect": [267, 337], "salient": [267, 332, 337], "greatli": [267, 335, 337], "big": [267, 337], "inspir": [267, 337], "rather": [267, 320, 337], "addition": [267, 285, 314, 332, 342], "incorpor": [267, 284, 285, 313, 332, 342], "l": [267, 273, 309, 342], "norm": 267, "hyper": 267, "laplacian": 267, "heavi": [267, 313], "tail": 267, "nuanc": 267, "weightonlyqu": 267, "c_": [267, 337], "normalfloat": [267, 337], "bnb": [267, 337], "lm": [267, 332], "head": [267, 332], "emb": 267, "rtn_arg": [267, 335, 337], "gptq_arg": [267, 337], "diagon": [267, 337], "rearrang": [267, 332, 337], "stabil": [267, 337], "c_out": 267, "mitig": [267, 337], "actord": [267, 337], "autoround_arg": 267, "rate": [267, 277, 326, 332, 334], "n_block": [267, 337], "gap": [267, 328], "awq_arg": [267, 337], "teq_arg": 267, "train_fn": 267, "hqq_arg": 267, "lm_head": [267, 332, 337], "lm_head_config": 267, "quantit": 267, "date": [267, 337], "orig_model": 267, "yourmodel": 267, "loaded_model": 267, "card": [267, 332], "impract": 267, "lwq": 267, "diagram": [267, 284, 285, 342], "illustr": [267, 284, 285, 313, 342], "figur": [267, 335], "color": [267, 332, 335], "grei": [267, 335], "blue": [267, 335], "rectangl": [267, 335], "model_state_dict_path": [267, 274], "state": [267, 274, 285, 332], "float_model": [267, 274, 282], "quantized_model": [267, 274, 282, 319], "overhead": [267, 340], "xiao": [267, 277, 337, 340], "guangxuan": [267, 277, 337, 340], "2211": [267, 277, 337, 340], "10438": [267, 277, 337, 340], "wei": [267, 277, 337, 340], "xiui": [267, 277, 337, 340], "suppress": [267, 277, 337, 340], "2209": [267, 277, 337, 340, 343], "13325": [267, 277, 337, 340], "lin": [267, 277, 337], "ji": [267, 277, 337], "frantar": [267, 277, 332, 337], "elia": [267, 277, 337], "cheng": [267, 277], "wenhua": [267, 277], "badri": 267, "hicham": 267, "shaji": 267, "appu": 267, "onlin": [267, 278, 339], "dettmer": [267, 277, 337], "tim": [267, 277, 337], "finetun": [267, 277, 332, 337], "2305": [267, 277, 337], "14314": [267, 277, 337], "grain": [268, 332, 333, 342], "varieti": [268, 272, 315, 342], "classic": [268, 342], "research": [268, 282, 323, 340, 343], "simul": [268, 285], "emul": [268, 277, 326, 334], "term": [268, 271, 279, 309, 323, 325, 330, 331, 342], "eas": [268, 271, 322, 333], "commit": [268, 271, 278, 279], "extend": [268, 284, 285, 319], "hand": [268, 271], "reus": 268, "conveni": [268, 326], "discuss": [268, 282], "far": 268, "still": [268, 270, 277, 309, 326, 333, 334, 336], "reli": [268, 326, 340], "plan": [268, 321], "deploy": [268, 312, 333, 335, 340], "One": [268, 285, 310, 314, 321, 332, 333, 342], "orig_sav": 268, "suggest": [268, 280, 310, 339], "statu": [268, 273, 278, 311, 329, 330, 332], "trane": 268, "torchdynamo": 268, "microsc": 268, "pytorchdynamo": 268, "torchimport": 268, "operator_name_or_list": 268, "mlp": [268, 332], "conv1d": [268, 285], "fundament": [269, 270, 309, 326], "fulli": [269, 326, 334, 340], "respons": [269, 334], "val_dataset": [269, 326, 334], "val_dataload": [269, 326, 334], "mydataload": [269, 271, 272], "qmodel": [269, 271], "good": [269, 278, 334, 342], "from_dict": 269, "conv2d_config": 269, "output_graph_def": 270, "sq_config": 270, "static_config": 270, "look": [270, 283, 285, 318, 325, 340], "eval_fn_wrapp": 270, "consider": [270, 340], "experi": [271, 278, 339, 340, 342], "rule": [271, 332], "partial": [271, 332, 334], "particularli": 271, "supplement": 271, "baseline_model": [271, 272], "rmax": [271, 277, 334], "mp": 271, "unseen": [271, 277, 334], "zeropoint": [271, 277, 334], "unlik": 271, "tradit": [271, 332], "signific": [271, 277, 332, 333, 335, 340], "quickli": [272, 324, 342], "despit": 272, "consum": [272, 311], "predefin": 272, "primari": [272, 309, 342], "travers": [272, 284, 285, 337, 342], "incbench": 273, "launch": [273, 327], "therefor": [273, 277, 280, 326, 332, 334, 335, 338, 340], "num_cores_on_numa": 273, "visibl": 273, "cross_memori": 273, "alloc": 273, "insuffici": 273, "num_i": 273, "num_c": 273, "throughput_pattern": 273, "hroughput": 273, "za": 273, "z": [273, 277, 309, 310, 340], "latency_pattern": 273, "atenc": 273, "3f": 273, "sec": [273, 343], "lightweight": [274, 332], "enhanc": [274, 309, 332, 333, 336], "tip": 274, "omp_num_thread": 274, "hybrid": 274, "taskset": 274, "finish": 274, "ten": 274, "gb": 274, "invent": [277, 334], "speed": [277, 309, 326, 332, 333, 334, 342], "int4": [277, 282, 324, 334, 343], "mainli": [277, 282, 319, 326, 332, 334], "miss": [277, 332, 334], "On": [277, 334, 343], "4x": [277, 334], "speedup": [277, 315, 321, 334], "255": [277, 334, 340], "sometim": [277, 280, 334], "overflow": [277, 334], "vnni": [277, 315, 321, 334], "solv": [277, 279, 334, 338], "coarsest": [277, 340], "finer": [277, 340, 342], "matric": [277, 340], "similarli": [277, 340], "finest": [277, 340], "adopt": [277, 279, 332, 333, 340], "bring": [277, 340], "why": [277, 340], "suppos": [277, 340], "6839": [277, 340], "4741": [277, 340], "7451": [277, 340], "9301": [277, 340], "1742": [277, 340], "6835": [277, 340], "formula": [277, 332, 340], "q_min": [277, 340], "q_max": [277, 340], "q_x": [277, 340], "clamp_": [277, 340], "round_": [277, 340], "w_q": [277, 340], "00296431384049356": [277, 340], "59": [277, 324, 340, 343], "172": [277, 340, 343], "192": [277, 340], "w_dq": [277, 340], "2220": [277, 340], "1510": [277, 340], "2420": [277, 340], "2570": [277, 340], "0500": [277, 340], "1890": [277, 340], "mseloss": [277, 340], "1983354538679123": [277, 340], "6848": [277, 340], "4743": [277, 340], "7440": [277, 340], "9308": [277, 340], "1749": [277, 340], "385297635664756e": [277, 340], "07": [277, 282, 324, 340, 343], "affect": [277, 340], "quantize_per_channel": [277, 340], "x_tmp": [277, 340], "detach": [277, 340], "keepdim": [277, 340], "divid": [277, 311, 340, 342], "dequantize_per_channel": [277, 340], "0029": [277, 340, 343], "0036": [277, 340], "162": [277, 340, 343], "93": [277, 324, 340, 343], "207": [277, 340, 343], "139": [277, 340, 343], "6837": [277, 340], "4734": [277, 340], "1751": [277, 340], "637690492221736e": [277, 340], "6376e": [277, 340], "3852e": [277, 340], "cdot": [277, 340], "quantize_per_tensor_absmax": [277, 340], "n_bit": [277, 340], "div_": [277, 340], "0806": [277, 340], "7589": [277, 340], "6038": [277, 340], "3815": [277, 340], "5040": [277, 340], "7174": [277, 340], "5444": [277, 340], "5826": [277, 340], "7772": [277, 340], "5555": [277, 340], "3740": [277, 340], "3253": [277, 340], "0698": [277, 340], "1381": [277, 340], "5972": [277, 340, 343], "0086": [277, 340], "0737": [277, 340], "8298": [277, 340], "6883": [277, 340], "2991": [277, 340], "1601": [277, 340], "6506": [277, 340], "8246": [277, 340], "3924": [277, 340], "3845": [277, 340], "8768": [277, 340], "w_scale": [277, 340], "x_q": [277, 340], "x_scale": [277, 340], "13": [277, 317, 322, 340, 343], "84": [277, 324, 340, 343], "120": [277, 340], "0059755356051027775": [277, 340], "83": [277, 339, 340, 343], "89": [277, 324, 340, 343], "119": [277, 340], "85": [277, 339, 340, 343], "57": [277, 324, 340, 343], "91": [277, 337, 340, 343], "006533813662827015": [277, 340], "y_q": [277, 340], "17509": [277, 340], "7608": [277, 340], "4055": [277, 340], "16599": [277, 340], "21020": [277, 340], "10016": [277, 340], "9860": [277, 340], "22444": [277, 340], "y_dq": [277, 340], "6836": [277, 340], "2970": [277, 340], "1583": [277, 340], "6481": [277, 340], "8207": [277, 340], "3911": [277, 340], "3850": [277, 340], "8763": [277, 340], "major": [277, 320, 334, 340], "peopl": [277, 334], "though": [277, 340], "simplic": [277, 340], "1x2": [277, 340], "2x2": [277, 340], "obtain": [277, 280, 284, 332, 339, 340, 342], "middl": [277, 340], "denot": [277, 340], "fp1": [277, 340], "fp2": [277, 340], "subsect": [277, 340], "even": [277, 335, 337, 340], "lot": [277, 280, 340], "briefli": [277, 326, 340], "similar": [277, 326, 340, 342], "idea": [277, 282, 332, 340, 342], "attach": [277, 326, 340], "x1": [277, 340, 342], "x2": [277, 340, 342], "excel": [277, 337], "mimic": [277, 334], "done": [277, 280, 313, 332, 334], "adjust": [277, 334, 340], "fact": [277, 334], "ultim": [277, 334], "pain": [277, 334], "brought": [277, 328, 334], "lossi": [277, 334], "respect": [277, 278, 318, 332, 340], "chart": [277, 334, 339], "yvinec": [277, 340], "edouard": [277, 340], "proceed": [277, 340], "cvf": [277, 340], "winter": [277, 340], "confer": [277, 332, 340], "vision": [277, 282, 316, 340], "interest": [278, 282], "foster": 278, "particip": 278, "commun": 278, "harass": 278, "everyon": 278, "regardless": 278, "ag": 278, "bodi": 278, "ethnic": 278, "characterist": 278, "gender": 278, "educ": 278, "socio": 278, "econom": 278, "race": 278, "religion": 278, "sexual": 278, "orient": 278, "contribut": [278, 282, 332], "inclus": 278, "Being": 278, "viewpoint": 278, "gracefulli": 278, "empathi": 278, "toward": 278, "member": [278, 283], "unaccept": 278, "imageri": 278, "unwelcom": 278, "troll": 278, "insult": 278, "derogatori": 278, "polit": 278, "attack": 278, "public": 278, "privat": 278, "electron": 278, "explicit": 278, "permiss": 278, "inappropri": 278, "profession": 278, "clarifi": 278, "fair": 278, "action": 278, "edit": 278, "reject": 278, "wiki": 278, "ban": 278, "temporarili": 278, "perman": [278, 332], "deem": 278, "threaten": 278, "offens": 278, "harm": 278, "mail": 278, "social": [278, 333], "media": [278, 333], "account": [278, 339, 342], "appoint": 278, "event": 278, "abus": 278, "report": [278, 279, 282, 339], "contact": [278, 338, 339], "complaint": 278, "review": [278, 279, 282, 333], "investig": [278, 310], "necessari": [278, 284, 328, 332, 339, 342], "circumst": 278, "oblig": 278, "confidenti": 278, "regard": [278, 336], "incid": 278, "faith": 278, "repercuss": 278, "leadership": 278, "faq": [278, 282], "page": [278, 279], "send": [279, 284], "view": [279, 282, 315, 338], "star": 279, "repositori": 279, "button": [279, 321], "fork": 279, "clone": [279, 322], "pc": 279, "git": [279, 317, 322], "modif": [279, 283, 318], "checkout": 279, "my": 279, "cover": [279, 316, 320, 333], "certif": 279, "agre": 279, "pr": [279, 311, 325, 338], "least": [279, 326, 332, 342], "approv": 279, "licens": 279, "azur": [279, 282, 333], "devop": 279, "ci": 279, "e16": 279, "v5": 279, "scan": [279, 282], "pylint": 279, "bandit": 279, "copyright": [279, 323], "docstyl": 279, "spellcheck": 279, "dco": 279, "pytest": 279, "failur": [279, 280], "fault": 279, "coverag": 279, "submit": [279, 333], "bug": [279, 282], "intend": 279, "safe": 279, "collabor": [279, 282], "adher": 279, "tracer": 280, "resolv": [280, 281], "floatfunct": 280, "cat": [280, 316], "eval": [280, 310, 311, 334], "imper": 280, "successfulli": [280, 282, 314, 333], "traceabl": 280, "proxi": 280, "prototyp": 280, "html": [280, 282, 284, 309, 314, 321, 322, 334], "highlight": 280, "untrac": 280, "ssd": [280, 316, 343], "resnet34": [280, 343], "r34": 280, "bboxes_labels_scor": 280, "prob": 280, "45": [280, 324, 343], "max_output": 280, "dbox": 280, "dlabel": 280, "dscore": 280, "decode_singl": 280, "guidelin": [281, 282], "particular": [282, 332, 337], "typic": [282, 313, 315, 332, 343], "gaudi": [282, 322], "ultra": [282, 322, 343], "flex": [282, 322], "amd": [282, 322, 343], "arm": [282, 321, 322, 343], "nvidia": [282, 309, 321, 322, 343], "llama2": 282, "stabl": [282, 332, 333], "diffus": [282, 333], "marketplac": [282, 333], "amazon": 282, "web": 282, "servic": [282, 333], "softwar": [282, 323, 332, 333, 338], "alibaba": [282, 333], "tencent": [282, 333], "taco": [282, 333], "oliv": [282, 333], "ecosystem": [282, 333], "lightn": 282, "2024": [282, 343], "usabl": 282, "pip": [282, 314, 317, 319, 322, 338], "whl": [282, 322], "habana": [282, 322], "en": [282, 322], "bare": [282, 317, 322], "metal": [282, 317, 322], "fresh": [282, 322], "click": [282, 321, 322, 333], "34": [282, 324, 343], "gaudi2": [282, 322], "setup": [282, 318, 322, 332], "interact": [282, 339], "habana_visible_devic": 282, "ompi_mca_btl_vader_single_copy_mechan": 282, "cap": 282, "sys_nic": 282, "host": [282, 314], "ipc": 282, "vault": 282, "ubuntu22": 282, "04": [282, 322, 343], "habanalab": 282, "optimum": [282, 337], "upgrad": [282, 326], "auto_round": 282, "automodel": 282, "autotoken": [282, 326], "neo": [282, 319, 343], "woq_conf": 282, "resnet18": [282, 327, 343], "static_quant_conf": 282, "overview": [282, 319, 342], "june": [282, 333], "qwen2": [282, 333], "apr": [282, 333], "emnlp": [282, 333], "sep": [282, 333], "legal": [282, 344], "ask": [282, 322], "email": 282, "discord": 282, "join": 282, "technic": 282, "wechat": [282, 333], "img": 282, "bridg": [283, 284, 321], "vanilla": [283, 284, 321], "adaptor_registri": 283, "abcadaptor": 283, "query_fw_cap": [283, 285], "query_fused_pattern": 283, "he": 283, "describ": [283, 285, 310, 318], "hidden": 283, "mainten": 283, "clear": [283, 318, 325, 326], "fragment": 283, "semant": [283, 318], "querybackendcap": [283, 284], "mla": [283, 327, 334], "qtype": 283, "onnxrt_qlinearopsadaptor": 283, "inspect_tensor": 283, "op_list": 283, "iteration_list": 283, "inspect_typ": 283, "save_to_disk": 283, "quantization_cfg": 283, "set_tensor": 283, "tensor_dict": 283, "fw": 284, "outlin": [284, 285], "accommod": [284, 285], "sequencediagram": [284, 285], "autonumb": [284, 285], "query_framework_cap": 284, "opwis": 284, "optypewis": 284, "\u2776": 284, "\u2777": 284, "\u2778": 284, "\u2779": 284, "\u277a": 284, "\u277b": 284, "\u277c": 284, "These": [284, 321], "chapter": 284, "node_op": 284, "confirm": 284, "chosen": [284, 309], "int8_conv_config": 284, "optype_wise_": 284, "tuning_cfg_to_fw": 284, "Its": [284, 309, 332], "quantize_config": 284, "dispatch": [284, 321], "is_perchannel": 284, "is_asymmetr": 284, "weight_bit": 284, "convert_bf16": 284, "subsequ": 284, "somewhat": 284, "distort": 284, "line": [284, 310, 314, 321], "let": [285, 318, 332], "overal": [285, 337], "drive": 285, "section": [285, 310, 313, 332, 337], "uint4": 285, "independ": 285, "kullback": 285, "leibler": 285, "pytorch_cpu": 285, "1_11_capabl": 285, "cap_s8_1_11": 285, "cap_s8_1_11_conv1d": 285, "per_channel_symmetr": 285, "per_tensor_symmetr": 285, "nativ": 285, "with_arg": 285, "qscheme": 285, "torch_dtyp": 285, "quant_min": 285, "quant_max": 285, "x86_64": 308, "aarch64": 308, "sure": 308, "benefici": 309, "\u03b2": 309, "\u03b1": 309, "lie": 309, "simplest": 309, "focu": [309, 342], "essenti": [309, 317], "remaind": 309, "resolut": 309, "extrem": 309, "retain": 309, "noteworthi": 309, "vanhouck": 309, "vincent": 309, "andrew": 309, "senior": 309, "mark": 309, "mao": 309, "2011": 309, "szymon": 309, "migacz": 309, "tensorrt": [309, 327, 334], "2017": 309, "mckinstri": 309, "jeffrei": 309, "discov": 309, "1809": 309, "04191": 309, "2018": 309, "mostli": 310, "conflict": [310, 317], "overli": 310, "argu": 310, "decis": [310, 325], "pep": 310, "tile": 310, "sub_modul": 310, "namespac": 310, "pollut": 310, "popen": 310, "statement": 310, "pipe": 310, "long_str": 310, "extran": 310, "pager": 310, "getenv": 310, "seem": 310, "worth": [310, 332], "4f": 310, "65421": 310, "sentenc": 310, "eval_result": 310, "declar": 310, "typealia": 310, "_lossandgradi": 310, "complextfmap": 310, "xx_func": 310, "pylanc": 310, "cheeseshopaddress": 310, "chees": 310, "shop": 310, "outofcheeseerror": 310, "crbug": 310, "192795": 310, "cpufreq": 310, "facilit": 310, "__all__": 310, "know": [310, 314, 338], "snippet": [310, 321], "rtn_algo_entri": 310, "vscode": 310, "settings_recommend": 310, "encount": [311, 317], "previous": 311, "lack": [311, 317], "faster": [311, 312, 316, 333, 342, 343], "Of": 311, "evenli": 311, "discard": 311, "throw": 311, "awai": 311, "draw": [311, 339, 342], "pin": 311, "reshuffl": 311, "manner": [311, 328], "newdataload": 311, "input_data": 311, "customis": [311, 325], "aid": 312, "infrastructur": 312, "promis": [313, 326, 332], "huge": [313, 332, 335], "light": 313, "booster": 313, "degrad": [313, 332, 342], "novel": 313, "10006": 313, "student_output": 313, "student_loss": 313, "training_func_for_nc": 313, "launcher": 313, "experiment": [313, 314, 316, 326, 332, 334, 338, 341], "comb": 313, "distillation_criterion": [313, 326, 331], "q_conf": 313, "horovod": 314, "enable_eager_execut": 314, "yaml_file_path": 314, "pre_process": 314, "simpli": [314, 328], "evaluation_result": 314, "evaluation_time_cost": 314, "partit": [314, 332], "distributedsampl": 314, "train_sampl": 314, "train_dataset": [314, 334], "num_replica": 314, "rank": 314, "train_load": 314, "train_kwarg": 314, "adadelta": 314, "distributedoptim": 314, "named_paramet": 314, "broadcast_paramet": 314, "root_rank": 314, "broadcast_optimizer_st": 314, "set_epoch": 314, "batch_idx": 314, "zero_grad": [314, 326, 332], "nll_loss": 314, "log_interv": 314, "0f": 314, "tloss": 314, "6f": 314, "dry_run": 314, "test_func": 314, "num_of_process": 314, "002": 314, "ssh": 314, "prompt": 314, "readm": 314, "exactli": 314, "cd": [314, 322], "resnet50_v1": [314, 326], "imagerecord": 314, "resizecropimagenet": [314, 341], "realiz": [314, 330, 336, 339], "tow": 314, "node1": 314, "node2": 314, "TO": 314, "your_node1_nam": 314, "your_node2_nam": 314, "resnet50_fp32_pretrained_model": 314, "nc_resnet50_v1": 314, "resnet": [314, 343], "2x": [315, 321], "exchang": 316, "hope": 316, "inc_model": [316, 328], "fp32_onnx_config": 316, "verifi": [316, 324], "vgg16": [316, 343], "mobilenet": [316, 339, 343], "rcnn": 316, "unsupport": [316, 326, 332], "add_relu": 316, "conv1d_relu": 316, "conv2d_relu": 316, "group_norm": 316, "hardswish": 316, "instance_norm": 316, "layer_norm": 316, "leaky_relu": 316, "sigmoid": 316, "toolchain": [317, 333], "sudo": 317, "apt": [317, 322], "python3": 317, "dev": 317, "distutil": 317, "libgl1": 317, "mesa": 317, "glx": 317, "libglib2": 317, "wget": 317, "ln": 317, "sf": 317, "usr": 317, "incompat": 317, "88": [317, 339, 343], "80": [317, 324, 335, 343], "pyobject": 317, "reinstal": 317, "libgl": 317, "yum": [317, 322], "opencv": 317, "conda": [317, 338], "pend": 317, "sqlalchemi": 317, "27": [317, 324, 343], "alemb": 317, "forg": 317, "3x": 317, "docker": 317, "tbb": 317, "requirements_pt": [317, 322], "ld_library_path": 317, "lib": 317, "syntax": 318, "go": [318, 337, 341], "up1": 318, "up2": 318, "valid_mixed_precis": 318, "addn": 318, "grappler_optim": 318, "constfold": 318, "arithmet": 318, "debug_stripp": 318, "especi": 319, "benefit": [319, 331], "custom_metr": 320, "420": 321, "geomean": 321, "coder": [321, 333], "gui": [321, 332], "upload": 321, "qintegerop": [321, 334], "lock": [321, 331, 332], "momentum": [321, 326, 332], "sensit": [321, 332], "lasso": [321, 332], "satisfi": 322, "success": 322, "frequent": 322, "pypi": 322, "requirements_tf": 322, "consolid": 322, "streamlin": [322, 333], "scienc": 322, "websit": 322, "anaconda": 322, "suit": 322, "skylak": 322, "cascad": 322, "ic": [322, 333], "sapphir": [322, 324], "rapid": [322, 324], "hbm": 322, "meteor": 322, "arctic": 322, "sound": 322, "pont": 322, "vecchio": 322, "cento": [322, 343], "ubuntu": 322, "22": [322, 324, 343], "maco": 322, "ventura": 322, "fortensorflow": 322, "forpytorch": 322, "18": [322, 324, 333, 343], "17": 322, "apach": 323, "subject": 323, "accompani": [323, 342], "wish": 323, "bibtex": 323, "author": 323, "feng": 323, "tian": 323, "hanwen": 323, "haihao": [323, 332], "shen": [323, 332], "suyu": 323, "chen": 323, "howpublish": 323, "year": 323, "logo": 323, "atom": 323, "phi": 323, "pentium": 323, "vtune": 323, "corpor": 323, "subsidiari": 323, "brand": 323, "claim": 323, "70b": [324, 343], "40b": 324, "baichuan": 324, "baichuan2": 324, "12b": 324, "neox": [324, 343], "20b": [324, 343], "mistralai": 324, "mistral": 324, "thudm": 324, "chatglm2": 324, "chatglm3": 324, "wip": 324, "soon": 324, "lambada_openai": [324, 343], "67": [324, 343], "69": [324, 343], "0222": 324, "55": [324, 343], "9997": 324, "68": [324, 341, 343], "12": [324, 343], "0081": 324, "66": [324, 343], "9905": 324, "51": [324, 343], "75": [324, 332, 343], "0568": 324, "0008": [324, 343], "70": [324, 343], "81": [324, 343], "9902": [324, 343], "06": [324, 343], "0058": [324, 343], "61": [324, 343], "9991": 324, "0034": 324, "46": [324, 343], "0356": 324, "9972": 324, "0121": 324, "35": [324, 332, 343], "63": [324, 332, 343], "92": [324, 343], "9933": [324, 343], "31": [324, 343], "9994": [324, 343], "0006": [324, 343], "9958": [324, 343], "29": [324, 343], "74": [324, 343], "9918": 324, "9964": 324, "58": [324, 343], "0040": 324, "26": [324, 343], "0064": 324, "49": [324, 343], "78": [324, 341, 343], "0041": 324, "53": [324, 343], "0014": 324, "0043": 324, "76": [324, 343], "77": [324, 343], "25": [324, 332, 343], "9932": [324, 343], "0016": 324, "0116": 324, "60": [324, 343], "9978": [324, 343], "79": [324, 343], "9937": [324, 343], "62": [324, 343], "09": [324, 343], "0057": 324, "0005": 324, "73": [324, 343], "9936": 324, "9989": 324, "9987": 324, "0046": [324, 343], "9979": [324, 343], "52": [324, 343], "86": [324, 343], "9930": 324, "00": [324, 343], "9957": [324, 343], "9938": 324, "9942": [324, 343], "03": [324, 343], "9990": 324, "9965": 324, "9995": 324, "82": [324, 343], "0078": 324, "0262": 324, "0052": 324, "9910": 324, "popularli": 325, "industri": [325, 333], "label_map": 325, "ap": 325, "curv": 325, "turn": [325, 335], "target_boxes_num": 325, "str_label": 325, "int_label": 325, "inturn": 325, "cocomap": 325, "vocmap": 325, "categor": 325, "multiclass": 325, "multilabel": 325, "newmetr": 325, "reset": 325, "reflect": [325, 341], "new_metr": 325, "kind": 326, "resort": 326, "automodelforsequenceclassif": 326, "worker": [326, 334], "ping_memori": [326, 334], "formul": 326, "templat": [326, 332], "effort": 326, "written": 326, "onnxrt_integ": 326, "onnxrt_qlinear": 326, "image_tensor": 326, "post_training_static_qu": [326, 342], "post_training_dynamic_qu": [326, 342], "1000": 326, "2000": 326, "sampling_s": 326, "model_wis": 326, "op_dict": 326, "op_wis": 326, "sigopt_api_token": [326, 339, 342], "sigopt_project_id": [326, 339, 342], "sigopt_experiment_nam": [326, 339, 342], "600": [326, 343], "training_arg": 326, "trainer": 326, "compact": [326, 332], "maxim": [326, 332, 342], "pruning_func": 326, "num_train_epoch": [326, 332], "train_dataload": [326, 332, 334], "n_gpu": 326, "gradient_accumulation_step": 326, "clip_grad_norm_": 326, "max_grad_norm": 326, "start_epoch": 326, "end_epoch": 326, "97": [326, 343], "pruner": [326, 332], "newli": [326, 332], "on_after_optimizer_step": [326, 332], "layer3": [326, 332], "layer2": [326, 332, 334], "1x1": [326, 332], "expens": [326, 342], "mobil": [326, 343], "knowledgedistillationloss": 326, "weight_decai": 326, "0004": 326, "nesterov": 326, "randomresizedcrop": [326, 341], "totensor": [326, 341], "485": 326, "456": 326, "406": [326, 343], "nepoch": 326, "cnt": 326, "loss_sum": 326, "iter_bar": 326, "tqdm": 326, "desc": 326, "teacher_logit": 326, "pytorchknowledgedistillationloss": 326, "unnecessari": 326, "train_fun": 326, "training_func": 326, "output_model": 326, "exit_polici": 326, "determinist": 326, "meaning": [326, 331], "prune_conf": 326, "quantization_aware_training_conf": 326, "aforement": 326, "inset": 326, "p_conf": [326, 331], "ssd_mobilenet_v1": 326, "benchmarkconf": 326, "cpuexecutionprovid": [327, 334], "tensorrtexecutionprovid": [327, 334], "cudaexecutionprovid": [327, 334], "dnnlexecutionprovid": [327, 334], "plu": 327, "helloworld": [327, 341], "persist": 328, "tf1": 328, "tf2": 328, "h5": 328, "hybridblock": 328, "0000": 328, "input_model": 328, "10005": [329, 335], "multi_object": 330, "simultan": 331, "gain": [331, 333], "instanti": 331, "neuron": 332, "art": 332, "grown": 332, "unpreced": 332, "increasingli": 332, "stand": [332, 342], "delet": 332, "consecut": 332, "commonli": 332, "shrink": 332, "influenc": 332, "contextu": 332, "vari": [332, 340, 343], "scene": 332, "haven": 332, "lowest": [332, 342], "interv": 332, "gradual": 332, "emsp": 332, "immedi": 332, "pure": 332, "downstream": 332, "simplifi": [332, 333], "procedur": [332, 342], "prone": 332, "co": 332, "discourag": 332, "connect": [332, 339], "penal": 332, "parameter": 332, "sparsegpt": 332, "perceptron": 332, "valuabl": 332, "basi": 332, "mha": 332, "billion": 332, "tend": 332, "exemplifi": 332, "250": 332, "fortieth": 332, "pruner2": 332, "prepare_prun": 332, "retrain_fre": 332, "300": 332, "few": [332, 333, 340, 342], "yourself": 332, "uncertain": 332, "parse_auto_slim_config": 332, "auto_config": 332, "ffn2_sparsiti": 332, "mha_spars": 332, "itself": 332, "quit": 332, "pruning_pattern": 332, "pruning_start": 332, "pruning_end": 332, "sparse_gpt": 332, "embed_out": 332, "readi": 332, "hesit": 332, "clm": 332, "sst": [332, 343], "v": [332, 342], "flan": 332, "t5": 332, "english": 332, "romanian": 332, "404": [332, 343], "381": 332, "yolov5": 332, "2x1": [332, 343], "801": 332, "7895": 332, "reduct": [332, 335], "xgboost": 332, "namhoon": 332, "lee": 332, "thalaiyasingam": 332, "ajanthan": 332, "philip": 332, "torr": 332, "2019": 332, "zafrir": 332, "ofir": 332, "ariel": 332, "larei": 332, "boudoukh": 332, "mosh": 332, "wasserblat": 332, "2111": 332, "05754": 332, "2021": 332, "kwon": 332, "kim": 332, "mahonei": 332, "hassoun": 332, "keutzer": 332, "gholami": 332, "pp": 332, "24101": 332, "24116": 332, "alistarh": 332, "massiv": 332, "2301": 332, "00774": 332, "oct": 333, "medium": 333, "diagnosi": 333, "insight": [333, 338, 342], "aug": 333, "juli": 333, "onnxcommunitymeetup2023": 333, "msft": 333, "autom": [333, 340], "netflix": 333, "mlperf": [333, 343], "5x": 333, "\u96c6\u6210\u82f1\u7279\u5c14": 333, "\u817e\u8baf\u4e91taco": 333, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 333, "mar": 333, "heterogen": 333, "jan": 333, "busi": 333, "innov": 333, "journei": 333, "dec": 333, "mleffici": 333, "deepen": 333, "foundat": 333, "intellig": 333, "vmware": 333, "applianc": 333, "bitnami": 333, "nov": 333, "sota": 333, "neurip": 333, "quala": 333, "minilm": [333, 343], "plug": 333, "twitter": 333, "linkedin": 333, "zone": 333, "land": 333, "gcp": 333, "aw": [333, 343], "pat": 333, "keynot": 333, "intelon": 333, "chines": 333, "purif": 333, "jun": 333, "partner": 333, "democrat": 333, "feb": 333, "joint": 333, "bilibili": 333, "gestalt": 333, "ml": 333, "spars": 333, "easier": 333, "youtub": 333, "abound": 333, "lpot": [333, 338], "nextplatform": 333, "cern": 333, "gan": 333, "3dgan": 333, "iml": 333, "workshop": 333, "asplo": 333, "convolut": 333, "intelcaff": 333, "neither": 334, "nor": 334, "val_load": 334, "avg": 334, "themselv": 334, "dmlexecutionprovid": 334, "yet": 334, "meanwhil": 335, "substanti": 335, "constrain": 335, "ouput_dir": 335, "fp32_model_path": 335, "int8_model_path": 335, "ON": 336, "postposttrainingquantconfig": 336, "datatyp": [336, 342, 343], "matter": 336, "bf16wrapper": 336, "retrac": 336, "enable_mse_search": 337, "805": 337, "005": 337, "enable_auto_scal": 337, "pad_max_length": 337, "true_sequenti": 337, "slower": 337, "sym_full_rang": 337, "qweight_config_path": 337, "gptq_config_path": 337, "gptq_config": 337, "re": 337, "use_full_length": 337, "compressed_model": 337, "omit": 337, "rtn_g32asym": 337, "gptq_g32asym": 337, "gptq_g32asym_disable_last_matmul": 337, "gptq_g128asym": 337, "awq_g32asym": 337, "site": 338, "inspect": 338, "sed": 338, "your_script": 338, "backbon": 339, "fill": [339, 341, 342], "sigopt_experiment_id": 339, "nc": [339, 342], "login": 339, "although": 339, "suffici": 339, "ordinari": 339, "receiv": 339, "latenc": [339, 342], "durat": 339, "8266": 339, "8372": 339, "2132": 339, "7495": 339, "8299": 339, "8294": 339, "0837": 339, "8291": 339, "4469": 339, "allevi": 340, "herebi": 340, "optdecoderlay": 340, "blockwis": 340, "accordingli": 340, "waq": 340, "hardtanh": 340, "t5norm": 340, "llamanorm": 340, "groupnorm": 340, "7392": [340, 343], "7335": 340, "7058": [340, 343], "6994": 340, "7677": [340, 343], "7615": [340, 343], "7332": 340, "7632": 340, "arang": 340, "tolist": 340, "default_alpha": 340, "step_siz": 340, "jason": 340, "transact": 340, "ensp": 341, "centercrop": 341, "randomcrop": 341, "cropres": 341, "decodeimag": 341, "jpeg": 341, "encodejp": 341, "alignimagechannel": 341, "116": 341, "103": [341, 343], "94": [341, 343], "017": 341, "bilinearimagenet": 341, "topilimag": 341, "padding_mod": 341, "border": 341, "pixel": 341, "edg": 341, "colorjitt": 341, "bright": 341, "contrast": 341, "satur": 341, "hue": 341, "jitter": 341, "tondarrai": 341, "o1": 342, "aggress": 342, "flowchart": 342, "htmllabel": 342, "td": 342, "classdef": 342, "itemstyl": 342, "cce5ff": 342, "stroke": 342, "99ccff": 342, "s1": 342, "s2": 342, "s3": 342, "s4": 342, "s5": 342, "s6": 342, "s7": 342, "nbsp": [342, 343], "subgraphstyl": 342, "ffffff": 342, "attempt": 342, "post_training_auto_qu": 342, "increment": 342, "ii": 342, "highest": 342, "confidence_batch": 342, "spent": 342, "hawq_v2_loss": 342, "model_loss": 342, "black": 342, "discret": 342, "compli": 342, "posterior": 342, "short": 342, "loglevel": 342, "endlessli": 342, "perspect": 342, "smbo": 342, "appl": 342, "surrog": 342, "repeat": 342, "densiti": 342, "parzen": 342, "greatest": 342, "hour": 342, "dai": 342, "next_tune_cfg": 342, "overridden": 342, "cluster": 342, "mpi": 342, "replic": 342, "replica": 342, "resourc": 342, "mpirun": 342, "number_of_process": 342, "run_cmd": 342, "abctunestrategi": 342, "1x": 343, "platinum": 343, "8480": 343, "8ghz": 343, "56": 343, "ht": 343, "turbo": 343, "256gb": 343, "16x16gb": 343, "ddr5": 343, "4800": 343, "mt": 343, "bio": 343, "3a14": 343, "tel2p1": 343, "microcod": 343, "0x2b0001b0": 343, "gcc": 343, "20210514": 343, "red": 343, "hat": 343, "visit": 343, "1s4c14ins1bsthroughput": 343, "1720": 343, "582": 343, "95x": 343, "1517": 343, "38": 343, "570": 343, "65": 343, "66x": 343, "resnet101": 343, "41": 343, "1058": 343, "382": 343, "96": 343, "77x": 343, "incept": 343, "2080": 343, "951": 343, "19x": 343, "1587": 343, "863": 343, "37": 343, "84x": 343, "v3": 343, "1052": 343, "434": 343, "42x": 343, "v4": 343, "707": 343, "234": 343, "02x": 343, "40": 343, "320": 343, "179": 343, "79x": 343, "4312": 343, "1512": 343, "85x": 343, "2287": 343, "1406": 343, "63x": 343, "1367": 343, "59x": 343, "vgg19": 343, "1244": 343, "176": 343, "04x": 343, "resnetv2": 343, "780": 343, "34x": 343, "494": 343, "43": 343, "329": 343, "50x": 343, "152": 343, "349": 343, "235": 343, "48x": 343, "densenet": 343, "161": 343, "282": 343, "223": 343, "19": 343, "26x": 343, "1284": 343, "756": 343, "70x": 343, "1280": 343, "530": 343, "cnn": 343, "39": 343, "178": 343, "13x": 343, "yolov3": 343, "249": 343, "44": 343, "64x": 343, "54": 343, "28x": 343, "36": 343, "05x": 343, "390": 343, "212": 343, "83x": 343, "vit": 343, "230": 343, "142": 343, "62x": 343, "1989": 343, "31x": 343, "1165": 343, "303": 343, "953": 343, "302": 343, "15x": 343, "resnest50": 343, "365": 343, "21x": 343, "resnext101_32x8d": 343, "548": 343, "104": 343, "27x": 343, "efficientnet_b0": 343, "636": 343, "566": 343, "12x": 343, "efficientnet_b3": 343, "471": 343, "358": 343, "32x": 343, "peleenet": 343, "790": 343, "504": 343, "57x": 343, "yolo": 343, "137": 343, "88x": 343, "175": 343, "23x": 343, "camembert": 343, "393": 343, "174": 343, "783": 343, "344": 343, "684": 343, "99x": 343, "albert": 343, "312": 343, "155": 343, "01x": 343, "funnel": 343, "281": 343, "395": 343, "173": 343, "373": 343, "405": 343, "30x": 343, "stsb": 343, "396": 343, "136": 343, "377": 343, "17x": 343, "391": 343, "25x": 343, "135": 343, "61x": 343, "117": 343, "93x": 343, "lvwerra": 343, "pegasu": 343, "samsum": 343, "1981": 343, "598": 343, "1095": 343, "298": 343, "67x": 343, "549": 343, "29x": 343, "375": 343, "hellaswag": 343, "winogrand": 343, "piqa": 343, "wikitext": 343, "word_perplex": 343, "4954": 343, "6409": 343, "7541": 343, "6434": 343, "8816": 343, "gptqw4g128asym": 343, "679": 343, "4895": 343, "6433": 343, "7476": 343, "6399": 343, "9945": 343, "0999": 343, "gptqw4g32asym": 343, "6829": 343, "4923": 343, "6401": 343, "7486": 343, "6410": 343, "9963": 343, "0141": 343, "gptqw4g128sym": 343, "685": 343, "4907": 343, "6361": 343, "7443": 343, "6390": 343, "1498": 343, "gptqw4g32sym": 343, "6911": 343, "4899": 343, "6448": 343, "7497": 343, "6439": 343, "0927": 343, "5049": 343, "6543": 343, "7628": 343, "6497": 343, "2862": 343, "4984": 343, "6535": 343, "7568": 343, "6473": 343, "9962": 343, "4193": 343, "6885": 343, "4973": 343, "753": 343, "6455": 343, "9935": 343, "4607": 343, "decapoda": 343, "5642": 343, "6709": 343, "7835": 343, "6887": 343, "4202": 343, "7244": 343, "5603": 343, "6614": 343, "6824": 343, "9909": 343, "5881": 343, "5911": 343, "7009": 343, "7878": 343, "7106": 343, "7518": 343, "5843": 343, "6961": 343, "7911": 343, "4319": 343, "7572": 343, "5898": 343, "7056": 343, "7894": 343, "7105": 343, "9998": 343, "3429": 343, "7596": 343, "5841": 343, "6977": 343, "7905": 343, "7080": 343, "4916": 343, "6266": 343, "7277": 343, "8096": 343, "7350": 343, "2384": 343, "778": 343, "624": 343, "7269": 343, "8047": 343, "7334": 343, "4237": 343, "7706": 343, "6239": 343, "7285": 343, "8058": 343, "7322": 343, "4697": 343, "7836": 343, "6195": 343, "7337": 343, "9983": 343, "5604": 343, "5732": 343, "648": 343, "7715": 343, "6746": 343, "7107": 343, "6982": 343, "5637": 343, "6527": 343, "7704": 343, "6713": 343, "9950": 343, "9702": 343, "5682": 343, "6575": 343, "7758": 343, "6742": 343, "9317": 343, "567": 343, "6902": 343, "7353": 343, "6622": 343, "7829": 343, "6862": 343, "9635": 343, "7246": 343, "5617": 343, "6756": 343, "7797": 343, "6854": 343, "9931": 343, "2799": 343, "7312": 343, "6059": 343, "7103": 343, "7077": 343, "2213": 343, "7273": 343, "6018": 343, "7088": 343, "7742": 343, "7030": 343, "9934": 343, "2538": 343, "083": 343, "7283": 343, "6053": 343, "7024": 343, "7764": 343, "7031": 343, "1889": 343, "374": 343, "727": 343, "5997": 343, "7018": 343, "9916": 343, "2504": 343, "497": 343, "7122": 343, "8984": 343, "5933": 343, "689": 343, "7851": 343, "7075": 343, "1556": 343, "448": 343, "7675": 343, "5934": 343, "7856": 343, "7111": 343, "9984": 343, "1514": 343, "927": 343, "7566": 343, "5899": 343, "7032": 343, "9953": 343, "1374": 343, "728": 343, "4628": 343, "6456": 343, "6029": 343, "6438": 343, "5799": 343, "4542": 343, "6004": 343, "0626": 343, "4789": 343, "6134": 343, "7432": 343, "5525": 343, "4731": 343, "6504": 343, "7617": 343, "6094": 343, "7828": 343, "5098": 343, "7622": 343, "6505": 343, "3242": 343, "6878": 343, "5058": 343, "6393": 343, "7633": 343, "6491": 343, "5514": 343, "6864": 343, "5084": 343, "6519": 343, "6509": 343, "4728": 343, "6876": 343, "5045": 343, "6474": 343, "9952": 343, "6379": 343, "5282": 343, "614": 343, "7448": 343, "6312": 343, "6377": 343, "5228": 343, "5991": 343, "6261": 343, "9919": 343, "4096": 343, "6224": 343, "4271": 343, "577": 343, "722": 343, "5871": 343, "9359": 343, "6123": 343, "4227": 343, "5738": 343, "7203": 343, "5823": 343, "9917": 343, "3377": 343, "615": 343, "4259": 343, "5714": 343, "7247": 343, "9951": 343, "2083": 343, "6154": 343, "4208": 343, "5777": 343, "7198": 343, "5834": 343, "3121": 343, "7233": 343, "5359": 343, "7753": 343, "195": 343, "7186": 343, "5328": 343, "7699": 343, "6687": 343, "9922": 343, "3463": 343, "7268": 343, "533": 343, "659": 343, "6726": 343, "2897": 343, "5718": 343, "6859": 343, "7927": 343, "6890": 343, "9324": 343, "7006": 343, "5655": 343, "6803": 343, "7965": 343, "6857": 343, "1515": 343, "5752": 343, "6748": 343, "7845": 343, "6724": 343, "5951": 343, "6472": 343, "5716": 343, "6685": 343, "784": 343, "6678": 343, "8539": 343, "6918": 343, "5819": 343, "678": 343, "6861": 343, "8863": 343, "5765": 343, "6827": 343, "7873": 343, "6832": 343, "1451": 343, "storywrit": 343, "693": 343, "5477": 343, "663": 343, "6719": 343, "9125": 343, "6661": 343, "7813": 343, "6693": 343, "9961": 343, "1137": 343, "rw": 343, "6604": 343, "5419": 343, "6598": 343, "6594": 343, "7616": 343, "6484": 343, "5369": 343, "7807": 343, "6559": 343, "9947": 343, "9411": 343, "6571": 343, "5398": 343, "6582": 343, "6579": 343, "8809": 343, "652": 343, "535": 343, "7682": 343, "6532": 343, "9906": 343, "0048": 343, "5177": 343, "6669": 343, "7824": 343, "5053": 343, "6301": 343, "5142": 343, "6654": 343, "6483": 343, "8146": 343, "517": 343, "6488": 343, "9941": 343, "1666": 343, "734": 343, "1658": 343, "1495": 343, "733": 343, "1661": 343, "732": 343, "1713": 343, "767": 343, "1747": 343, "770": 343, "7519": 343, "4430": 343, "4413": 343, "72x": 343, "7190": 343, "4019": 343, "613": 343, "170": 343, "611": 343, "186": 343, "619": 343, "184": 343, "36x": 343, "623": 343, "5711": 343, "2584": 343, "6136": 343, "2630": 343, "33x": 343, "shufflenet": 343, "6820": 343, "3686": 343, "googlenet": 343, "1971": 343, "1120": 343, "76x": 343, "1838": 343, "1142": 343, "squeezenet": 343, "10163": 343, "5771": 343, "10339": 343, "6002": 343, "caffenet": 343, "2805": 343, "1077": 343, "60x": 343, "4351": 343, "822": 343, "alexnet": 343, "2169": 343, "893": 343, "43x": 343, "2232": 343, "841": 343, "65x": 343, "zfnet": 343, "921": 343, "525": 343, "75x": 343, "925": 343, "534": 343, "73x": 343, "1862": 343, "1161": 343, "1956": 343, "1262": 343, "55x": 343, "efficientnet": 343, "2793": 343, "1383": 343, "beit": 343, "206": 343, "91x": 343, "duc": 343, "74x": 343, "8780": 343, "1920": 343, "emot": 343, "ferplu": 343, "6360": 343, "3067": 343, "07x": 343, "arcfac": 343, "449": 343, "511": 343, "484": 343, "222": 343, "18x": 343, "integerop": 343, "635": 343, "1324": 343, "244": 343, "47x": 343, "440": 343, "214": 343, "06x": 343, "715": 343, "201": 343, "03x": 343, "714": 343, "213": 343, "339": 343, "58x": 343, "215": 343, "89x": 343, "712": 343, "217": 343, "l12": 343, "h384": 343, "1209": 343, "588": 343, "1268": 343, "16x": 343, "1253": 343, "399": 343, "14x": 343, "l6": 343, "1139": 343, "94x": 343, "2365": 343, "08x": 343, "718": 343, "35x": 343, "electra": 343, "discrimin": 343, "1951": 343, "71x": 343, "2198": 343, "1129": 343, "mini": 343, "5814": 343, "3388": 343, "6396": 343, "3445": 343, "86x": 343, "bart": 343, "126": 343, "spanbert": 343, "multilingu": 343, "82x": 343, "118": 343, "46x": 343, "layoutlmv3": 343, "funsd": 343, "layoutlmv2": 343, "perplex": 343, "2788": 343, "7002": 343, "4124": 343, "9921": 343, "3950": 343, "9892": 343, "9163": 343, "7240": 343, "0438": 343, "7634": 343, "1186": 343, "9944": 343, "1276": 343, "7543": 343, "6181": 343, "rtnw4g32asym": 343, "6496": 343, "9967": 343, "7964": 343, "6612": 343, "rtnw4g32sym": 343, "7941": 343, "7243": 343, "9971": 343, "taskdataset": 343, "accuracyspars": 343, "ratiospars": 343, "commentsbalancedor": 343, "unbalanc": 343, "answeringsquad": 343, "87f1": 343, "momentumunbalanc": 343, "momentumbalanc": 343, "90f1": 343, "59f1": 343, "23f1": 343, "classificationmrpc": 343, "52f1": 343, "26f1": 343, "classificationsst": 343, "61accuraci": 343, "recognitionimagenet": 343, "95top1": 343, "v5s6": 343, "detectioncoco": 343, "ap0": 343, "6ap0": 343, "584": 343, "34f1": 343, "lassounbalanc": 343, "classificationmnli": 343, "mm": 343, "allbalanc": 343, "32accuraci": 343, "sensitivitybalanc": 343, "classificationqqp": 343, "classificationqnli": 343, "54accuraci": 343, "em": 343, "mobilenetv2": 343, "wideresnet40": 343, "9522": 343, "8178": 343, "0213": 343, "8235": 343, "027": 343, "5494": 343, "7153": 343, "5540": 343, "5523": 343, "vgg": 343, "bn": 343, "7022": 343, "7415": 343, "7025": 343, "0003": 343, "6739": 343, "7399": 343, "6845": 343, "0106": 343, "blendcnn": 343, "7034": 343, "8382": 343, "bilstm": 343, "8314": 343, "9403": 343, "9048": 343, "0734": 343, "7323": 343, "8256": 343, "8084": 343, "8814": 343, "7442": 343, "8371": 343, "0119": 343, "0115": 343, "tinybert": 343, "8018": 343, "8044": 343, "8363": 343, "8411": 343, "8025": 343, "8074": 343, "0007": 343, "0030": 343, "8626": 343, "8213": 343, "9091": 343, "8782": 343, "8684": 343, "8259": 343, "distilroberta": 343, "6057": 343, "6187": 343, "0130": 343, "c6i": 343, "2xlarg": 343, "c6a": 343, "c6g": 343, "a100cuda": 343, "executionprovid": 343}, "objects": {"": [[38, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [9, 0, 0, "-", "common"], [16, 0, 0, "-", "config"], [17, 0, 0, "-", "contrib"], [32, 0, 0, "-", "data"], [45, 0, 0, "-", "metric"], [47, 0, 0, "-", "mix_precision"], [49, 0, 0, "-", "model"], [57, 0, 0, "-", "objective"], [58, 0, 0, "-", "profiling"], [59, 0, 0, "-", "quantization"], [67, 0, 0, "-", "strategy"], [86, 0, 0, "-", "tensorflow"], [231, 0, 0, "-", "torch"], [243, 0, 0, "-", "training"], [251, 0, 0, "-", "utils"], [259, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [8, 0, 0, "-", "benchmark"], [10, 0, 0, "-", "tuning_param"], [12, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.benchmark": [[8, 2, 1, "", "benchmark"], [8, 2, 1, "", "dump_numa_info"], [8, 2, 1, "", "format_list2str"], [8, 2, 1, "", "generate_prefix"], [8, 2, 1, "", "get_linux_numa_info"], [8, 2, 1, "", "get_numa_node"], [8, 2, 1, "", "get_reversed_numa_info"], [8, 2, 1, "", "get_windows_numa_info"], [8, 2, 1, "", "parse_str2list"], [8, 2, 1, "", "run_multi_instance_command"], [8, 2, 1, "", "set_cores_for_instance"], [8, 2, 1, "", "summary_latency_throughput"]], "neural_compressor.common.tuning_param": [[10, 1, 1, "", "ParamLevel"], [10, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[10, 3, 1, "", "MODEL_LEVEL"], [10, 3, 1, "", "OP_LEVEL"], [10, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[11, 0, 0, "-", "constants"], [13, 0, 0, "-", "logger"], [14, 0, 0, "-", "save_load"], [15, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[11, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[13, 1, 1, "", "Logger"], [13, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[14, 2, 1, "", "load_config_mapping"], [14, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[15, 1, 1, "", "CpuInfo"], [15, 1, 1, "", "LazyImport"], [15, 1, 1, "", "ProcessorType"], [15, 1, 1, "", "Statistics"], [15, 2, 1, "", "call_counter"], [15, 2, 1, "", "detect_processor_type_based_on_hw"], [15, 2, 1, "", "dump_elapsed_time"], [15, 2, 1, "", "get_workspace"], [15, 2, 1, "", "log_process"], [15, 2, 1, "", "set_random_seed"], [15, 2, 1, "", "set_resume_from"], [15, 2, 1, "", "set_tensorboard"], [15, 2, 1, "", "set_workspace"], [15, 2, 1, "", "singleton"]], "neural_compressor.config": [[16, 1, 1, "", "AccuracyCriterion"], [16, 1, 1, "", "BenchmarkConfig"], [16, 1, 1, "", "DistillationConfig"], [16, 1, 1, "", "DotDict"], [16, 1, 1, "", "ExportConfig"], [16, 1, 1, "", "HPOConfig"], [16, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [16, 1, 1, "", "Keras"], [16, 1, 1, "", "KnowledgeDistillationLossConfig"], [16, 1, 1, "", "MXNet"], [16, 1, 1, "", "MixedPrecisionConfig"], [16, 1, 1, "", "NASConfig"], [16, 1, 1, "", "ONNX"], [16, 1, 1, "", "ONNXQlinear2QDQConfig"], [16, 1, 1, "", "Options"], [16, 1, 1, "", "PostTrainingQuantConfig"], [16, 1, 1, "", "PyTorch"], [16, 1, 1, "", "QuantizationAwareTrainingConfig"], [16, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [16, 1, 1, "", "TF2ONNXConfig"], [16, 1, 1, "", "TensorFlow"], [16, 1, 1, "", "Torch2ONNXConfig"], [16, 1, 1, "", "TuningCriterion"], [16, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[18, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[19, 0, 0, "-", "sigopt"], [20, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[19, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[20, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[27, 0, 0, "-", "datasets"], [31, 0, 0, "-", "filters"], [34, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[21, 0, 0, "-", "bert_dataset"], [22, 0, 0, "-", "coco_dataset"], [23, 0, 0, "-", "dataset"], [24, 0, 0, "-", "dummy_dataset"], [25, 0, 0, "-", "dummy_dataset_v2"], [26, 0, 0, "-", "imagenet_dataset"], [28, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[21, 1, 1, "", "InputFeatures"], [21, 1, 1, "", "ONNXRTBertDataset"], [21, 1, 1, "", "ParseDecodeBert"], [21, 1, 1, "", "PytorchBertDataset"], [21, 1, 1, "", "TensorflowBertDataset"], [21, 1, 1, "", "TensorflowModelZooBertDataset"], [21, 2, 1, "", "convert_examples_to_features"], [21, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[22, 1, 1, "", "COCONpy"], [22, 1, 1, "", "COCORaw"], [22, 1, 1, "", "COCORecordDataset"], [22, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[23, 1, 1, "", "CIFAR10"], [23, 1, 1, "", "CIFAR100"], [23, 1, 1, "", "Dataset"], [23, 1, 1, "", "Datasets"], [23, 1, 1, "", "FashionMNIST"], [23, 1, 1, "", "ImageFolder"], [23, 1, 1, "", "IterableDataset"], [23, 1, 1, "", "MNIST"], [23, 1, 1, "", "MXNetCIFAR10"], [23, 1, 1, "", "MXNetCIFAR100"], [23, 1, 1, "", "MXNetDatasets"], [23, 1, 1, "", "MXNetFashionMNIST"], [23, 1, 1, "", "MXNetImageFolder"], [23, 1, 1, "", "MXNetMNIST"], [23, 1, 1, "", "ONNXRTITDatasets"], [23, 1, 1, "", "ONNXRTQLDatasets"], [23, 1, 1, "", "PyTorchDatasets"], [23, 1, 1, "", "PytorchCIFAR10"], [23, 1, 1, "", "PytorchCIFAR100"], [23, 1, 1, "", "PytorchFashionMNIST"], [23, 1, 1, "", "PytorchMNIST"], [23, 1, 1, "", "PytorchMxnetWrapDataset"], [23, 1, 1, "", "PytorchMxnetWrapFunction"], [23, 1, 1, "", "Tensorflow"], [23, 1, 1, "", "TensorflowCIFAR10"], [23, 1, 1, "", "TensorflowCIFAR100"], [23, 1, 1, "", "TensorflowDatasets"], [23, 1, 1, "", "TensorflowFashionMNIST"], [23, 1, 1, "", "TensorflowImageRecord"], [23, 1, 1, "", "TensorflowMNIST"], [23, 1, 1, "", "TensorflowTFRecordDataset"], [23, 1, 1, "", "TensorflowVOCRecord"], [23, 2, 1, "", "calculate_md5"], [23, 2, 1, "", "check_integrity"], [23, 2, 1, "", "dataset_registry"], [23, 2, 1, "", "download_url"], [23, 4, 1, "", "framework_datasets"], [23, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[24, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[25, 1, 1, "", "DummyDataset"], [25, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[26, 1, 1, "", "ImagenetRaw"], [26, 1, 1, "", "MXNetImagenetRaw"], [26, 1, 1, "", "ONNXRTImagenetDataset"], [26, 1, 1, "", "PytorchImagenetRaw"], [26, 1, 1, "", "TensorflowImagenetDataset"], [26, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[28, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[29, 0, 0, "-", "coco_filter"], [30, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[29, 1, 1, "", "LabelBalanceCOCORawFilter"], [29, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[30, 1, 1, "", "FILTERS"], [30, 1, 1, "", "Filter"], [30, 1, 1, "", "MXNetFilters"], [30, 1, 1, "", "ONNXRTITFilters"], [30, 1, 1, "", "ONNXRTQLFilters"], [30, 1, 1, "", "PyTorchFilters"], [30, 1, 1, "", "TensorflowFilters"], [30, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[33, 0, 0, "-", "imagenet_transform"], [35, 0, 0, "-", "postprocess"], [36, 0, 0, "-", "tokenization"], [37, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[33, 1, 1, "", "BilinearImagenetTransform"], [33, 1, 1, "", "LabelShift"], [33, 1, 1, "", "ONNXResizeCropImagenetTransform"], [33, 1, 1, "", "OnnxBilinearImagenetTransform"], [33, 1, 1, "", "ParseDecodeImagenet"], [33, 1, 1, "", "ParseDecodeImagenetTransform"], [33, 1, 1, "", "QuantizedInput"], [33, 1, 1, "", "ResizeWithAspectRatio"], [33, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [33, 1, 1, "", "TensorflowShiftRescale"], [33, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[35, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[36, 1, 1, "", "BasicTokenizer"], [36, 1, 1, "", "FullTokenizer"], [36, 1, 1, "", "WordpieceTokenizer"], [36, 2, 1, "", "convert_by_vocab"], [36, 2, 1, "", "convert_to_unicode"], [36, 2, 1, "", "load_vocab"], [36, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[37, 1, 1, "", "AlignImageChannelTransform"], [37, 1, 1, "", "BaseTransform"], [37, 1, 1, "", "CastONNXTransform"], [37, 1, 1, "", "CastPyTorchTransform"], [37, 1, 1, "", "CastTFTransform"], [37, 1, 1, "", "CenterCropTFTransform"], [37, 1, 1, "", "CenterCropTransform"], [37, 1, 1, "", "CollectTransform"], [37, 1, 1, "", "ComposeTransform"], [37, 1, 1, "", "CropResizeTFTransform"], [37, 1, 1, "", "CropResizeTransform"], [37, 1, 1, "", "CropToBoundingBox"], [37, 1, 1, "", "InputFeatures"], [37, 1, 1, "", "MXNetCropResizeTransform"], [37, 1, 1, "", "MXNetCropToBoundingBox"], [37, 1, 1, "", "MXNetNormalizeTransform"], [37, 1, 1, "", "MXNetTransforms"], [37, 1, 1, "", "MXNetTranspose"], [37, 1, 1, "", "NormalizeTFTransform"], [37, 1, 1, "", "NormalizeTransform"], [37, 1, 1, "", "ONNXRTCropToBoundingBox"], [37, 1, 1, "", "ONNXRTITTransforms"], [37, 1, 1, "", "ONNXRTQLTransforms"], [37, 1, 1, "", "PaddedCenterCropTransform"], [37, 1, 1, "", "ParseDecodeVocTransform"], [37, 1, 1, "", "PyTorchAlignImageChannel"], [37, 1, 1, "", "PyTorchCropResizeTransform"], [37, 1, 1, "", "PyTorchNormalizeTransform"], [37, 1, 1, "", "PyTorchTransforms"], [37, 1, 1, "", "PyTorchTranspose"], [37, 1, 1, "", "PytorchMxnetTransform"], [37, 1, 1, "", "PytorchMxnetWrapFunction"], [37, 1, 1, "", "RandomCropTFTransform"], [37, 1, 1, "", "RandomCropTransform"], [37, 1, 1, "", "RandomHorizontalFlip"], [37, 1, 1, "", "RandomResizedCropMXNetTransform"], [37, 1, 1, "", "RandomResizedCropPytorchTransform"], [37, 1, 1, "", "RandomResizedCropTFTransform"], [37, 1, 1, "", "RandomResizedCropTransform"], [37, 1, 1, "", "RandomVerticalFlip"], [37, 1, 1, "", "RescaleKerasPretrainTransform"], [37, 1, 1, "", "RescaleTFTransform"], [37, 1, 1, "", "RescaleTransform"], [37, 1, 1, "", "ResizeMXNetTransform"], [37, 1, 1, "", "ResizePytorchTransform"], [37, 1, 1, "", "ResizeTFTransform"], [37, 1, 1, "", "ResizeTransform"], [37, 1, 1, "", "ResizeWithRatio"], [37, 1, 1, "", "SquadExample"], [37, 1, 1, "", "TFModelZooCollectTransform"], [37, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [37, 1, 1, "", "TFSquadV1PostTransform"], [37, 1, 1, "", "TRANSFORMS"], [37, 1, 1, "", "TensorflowCropToBoundingBox"], [37, 1, 1, "", "TensorflowRandomHorizontalFlip"], [37, 1, 1, "", "TensorflowRandomVerticalFlip"], [37, 1, 1, "", "TensorflowResizeWithRatio"], [37, 1, 1, "", "TensorflowTransform"], [37, 1, 1, "", "TensorflowTransforms"], [37, 1, 1, "", "TensorflowTranspose"], [37, 1, 1, "", "TensorflowWrapFunction"], [37, 1, 1, "", "ToArray"], [37, 1, 1, "", "ToNDArrayTransform"], [37, 1, 1, "", "Transforms"], [37, 1, 1, "", "Transpose"], [37, 2, 1, "", "convert_examples_to_features"], [37, 2, 1, "", "get_final_text"], [37, 2, 1, "", "get_torchvision_map"], [37, 2, 1, "", "read_squad_examples"], [37, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[39, 0, 0, "-", "bleu"], [40, 0, 0, "-", "bleu_util"], [41, 0, 0, "-", "coco_label_map"], [42, 0, 0, "-", "coco_tools"], [43, 0, 0, "-", "evaluate_squad"], [44, 0, 0, "-", "f1"], [46, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[39, 1, 1, "", "BLEU"], [39, 1, 1, "", "UnicodeRegex"], [39, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[39, 3, 1, "", "labels"], [39, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[39, 3, 1, "", "nondigit_punct_re"], [39, 3, 1, "", "punct_nondigit_re"], [39, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[40, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[42, 1, 1, "", "COCOEvalWrapper"], [42, 1, 1, "", "COCOWrapper"], [42, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [42, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [42, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[42, 3, 1, "", "dataset"], [42, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "exact_match_score"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[44, 2, 1, "", "evaluate"], [44, 2, 1, "", "f1_score"], [44, 2, 1, "", "metric_max_over_ground_truths"], [44, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[46, 1, 1, "", "Accuracy"], [46, 1, 1, "", "BaseMetric"], [46, 1, 1, "", "COCOmAPv2"], [46, 1, 1, "", "F1"], [46, 1, 1, "", "GeneralTopK"], [46, 1, 1, "", "Loss"], [46, 1, 1, "", "MAE"], [46, 1, 1, "", "METRICS"], [46, 1, 1, "", "MSE"], [46, 1, 1, "", "MXNetMetrics"], [46, 1, 1, "", "Metric"], [46, 1, 1, "", "ONNXRTGLUE"], [46, 1, 1, "", "ONNXRTITMetrics"], [46, 1, 1, "", "ONNXRTQLMetrics"], [46, 1, 1, "", "PyTorchLoss"], [46, 1, 1, "", "PyTorchMetrics"], [46, 1, 1, "", "RMSE"], [46, 1, 1, "", "ROC"], [46, 1, 1, "", "SquadF1"], [46, 1, 1, "", "TensorflowCOCOMAP"], [46, 1, 1, "", "TensorflowMAP"], [46, 1, 1, "", "TensorflowMetrics"], [46, 1, 1, "", "TensorflowTopK"], [46, 1, 1, "", "TensorflowVOCMAP"], [46, 1, 1, "", "WrapMXNetMetric"], [46, 1, 1, "", "WrapONNXRTMetric"], [46, 1, 1, "", "WrapPyTorchMetric"], [46, 1, 1, "", "mIOU"], [46, 2, 1, "", "metric_registry"], [46, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[46, 3, 1, "", "label_list"], [46, 3, 1, "", "pred_list"], [46, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[46, 3, 1, "", "k"], [46, 3, 1, "", "num_correct"], [46, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[46, 3, 1, "", "sample"], [46, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[46, 3, 1, "", "compare_label"], [46, 3, 1, "", "label_list"], [46, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[46, 3, 1, "", "compare_label"], [46, 3, 1, "", "label_list"], [46, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[46, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[46, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[46, 3, 1, "", "k"], [46, 3, 1, "", "num_correct"], [46, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[47, 2, 1, "", "fit"]], "neural_compressor.model": [[48, 0, 0, "-", "base_model"], [50, 0, 0, "-", "keras_model"], [51, 0, 0, "-", "model"], [52, 0, 0, "-", "mxnet_model"], [53, 0, 0, "-", "nets_factory"], [54, 0, 0, "-", "onnx_model"], [55, 0, 0, "-", "tensorflow_model"], [56, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[48, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[50, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[51, 1, 1, "", "Model"], [51, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[52, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[53, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[54, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[55, 1, 1, "", "TensorflowBaseModel"], [55, 1, 1, "", "TensorflowCheckpointModel"], [55, 1, 1, "", "TensorflowLLMModel"], [55, 1, 1, "", "TensorflowModel"], [55, 1, 1, "", "TensorflowQATModel"], [55, 1, 1, "", "TensorflowSavedModelModel"], [55, 2, 1, "", "checkpoint_session"], [55, 2, 1, "", "estimator_session"], [55, 2, 1, "", "frozen_pb_session"], [55, 2, 1, "", "get_model_type"], [55, 2, 1, "", "graph_def_session"], [55, 2, 1, "", "graph_session"], [55, 2, 1, "", "keras_session"], [55, 2, 1, "", "load_saved_model"], [55, 2, 1, "", "saved_model_session"], [55, 2, 1, "", "slim_session"], [55, 2, 1, "", "try_loading_keras"], [55, 2, 1, "", "validate_and_inference_input_output"], [55, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[56, 1, 1, "", "IPEXModel"], [56, 1, 1, "", "PyTorchBaseModel"], [56, 1, 1, "", "PyTorchFXModel"], [56, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[57, 1, 1, "", "Accuracy"], [57, 1, 1, "", "Footprint"], [57, 1, 1, "", "ModelSize"], [57, 1, 1, "", "MultiObjective"], [57, 1, 1, "", "Objective"], [57, 1, 1, "", "Performance"], [57, 2, 1, "", "objective_custom_registry"], [57, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[59, 2, 1, "", "fit"]], "neural_compressor.strategy": [[60, 0, 0, "-", "auto"], [61, 0, 0, "-", "auto_mixed_precision"], [62, 0, 0, "-", "basic"], [63, 0, 0, "-", "bayesian"], [64, 0, 0, "-", "conservative"], [65, 0, 0, "-", "exhaustive"], [66, 0, 0, "-", "hawq_v2"], [68, 0, 0, "-", "mse"], [69, 0, 0, "-", "mse_v2"], [70, 0, 0, "-", "random"], [71, 0, 0, "-", "strategy"], [73, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[60, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[61, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[62, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[63, 1, 1, "", "BayesianOptimization"], [63, 1, 1, "", "BayesianTuneStrategy"], [63, 1, 1, "", "TargetSpace"], [63, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[64, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[65, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[66, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[68, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[69, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[70, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[71, 1, 1, "", "TuneStrategy"], [71, 1, 1, "", "TuneStrategyMeta"], [71, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[72, 0, 0, "-", "constant"], [74, 0, 0, "-", "tuning_sampler"], [75, 0, 0, "-", "tuning_space"], [76, 0, 0, "-", "tuning_structs"], [77, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[74, 1, 1, "", "BlockFallbackTuningSampler"], [74, 1, 1, "", "FallbackTuningSampler"], [74, 1, 1, "", "LowerBitsSampler"], [74, 1, 1, "", "ModelWiseTuningSampler"], [74, 1, 1, "", "OpTypeWiseTuningSampler"], [74, 1, 1, "", "OpWiseTuningSampler"], [74, 1, 1, "", "SmoothQuantSampler"], [74, 1, 1, "", "TuningOrder"], [74, 1, 1, "", "TuningSampler"], [74, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[75, 1, 1, "", "TuningItem"], [75, 1, 1, "", "TuningSpace"], [75, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [75, 2, 1, "", "pattern_to_internal"], [75, 2, 1, "", "pattern_to_path"], [75, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[76, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[77, 1, 1, "", "ClassRegister"], [77, 1, 1, "", "OrderedDefaultDict"], [77, 1, 1, "", "QuantOptions"], [77, 1, 1, "", "QuantType"], [77, 2, 1, "", "build_slave_faker_model"], [77, 2, 1, "", "extract_data_type"], [77, 2, 1, "", "get_adaptor_name"], [77, 2, 1, "", "preprocess_user_cfg"], [77, 2, 1, "", "reverted_data_type"]], "neural_compressor.tensorflow": [[78, 0, 0, "-", "algorithms"], [87, 0, 0, "-", "keras"], [100, 0, 0, "-", "quantization"], [184, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[81, 0, 0, "-", "smoother"], [83, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[79, 0, 0, "-", "calibration"], [80, 0, 0, "-", "core"], [82, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[79, 1, 1, "", "SmoothQuantCalibration"], [79, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[80, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[82, 1, 1, "", "SmoothQuantScaler"], [82, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[84, 0, 0, "-", "keras"], [85, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[84, 1, 1, "", "KerasAdaptor"], [84, 1, 1, "", "KerasConfigConverter"], [84, 1, 1, "", "KerasQuery"], [84, 1, 1, "", "KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[85, 1, 1, "", "TensorFlowAdaptor"], [85, 1, 1, "", "TensorFlowConfig"], [85, 1, 1, "", "TensorflowConfigConverter"], [85, 1, 1, "", "TensorflowQuery"], [85, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[91, 0, 0, "-", "layers"], [96, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[88, 0, 0, "-", "conv2d"], [89, 0, 0, "-", "dense"], [90, 0, 0, "-", "depthwise_conv2d"], [92, 0, 0, "-", "layer_initializer"], [93, 0, 0, "-", "pool2d"], [94, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[88, 1, 1, "", "QConv2D"], [88, 2, 1, "", "initialize_int8_conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[89, 1, 1, "", "QDense"], [89, 2, 1, "", "initialize_int8_dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[90, 1, 1, "", "QDepthwiseConv2D"], [90, 2, 1, "", "initialize_int8_depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[93, 1, 1, "", "QAvgPool2D"], [93, 1, 1, "", "QMaxPool2D"], [93, 2, 1, "", "initialize_int8_avgpool"], [93, 2, 1, "", "initialize_int8_maxpool"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[94, 1, 1, "", "QSeparableConv2D"], [94, 2, 1, "", "initialize_int8_separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[95, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[95, 1, 1, "", "OperatorConfig"], [95, 1, 1, "", "StaticQuantConfig"], [95, 2, 1, "", "get_all_registered_configs"], [95, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[97, 0, 0, "-", "algorithm_entry"], [98, 0, 0, "-", "autotune"], [99, 0, 0, "-", "config"], [101, 0, 0, "-", "quantize"], [157, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[97, 2, 1, "", "smooth_quant_entry"], [97, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[98, 2, 1, "", "autotune"], [98, 2, 1, "", "get_all_config_set"]], "neural_compressor.tensorflow.quantization.config": [[99, 1, 1, "", "SmoothQuantConfig"], [99, 1, 1, "", "StaticQuantConfig"], [99, 2, 1, "", "get_default_sq_config"], [99, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[101, 2, 1, "", "need_apply"], [101, 2, 1, "", "quantize_model"], [101, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[102, 0, 0, "-", "graph_converter"], [140, 0, 0, "-", "graph_rewriter"], [156, 0, 0, "-", "graph_util"], [158, 0, 0, "-", "quantize_graph"], [175, 0, 0, "-", "quantize_graph_common"], [178, 0, 0, "-", "transform_graph"], [181, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[102, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[105, 0, 0, "-", "bf16"], [129, 0, 0, "-", "generic"], [139, 0, 0, "-", "graph_base"], [147, 0, 0, "-", "int8"], [152, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[103, 0, 0, "-", "bf16_convert"], [104, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[103, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[104, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[106, 0, 0, "-", "convert_add_to_biasadd"], [107, 0, 0, "-", "convert_layout"], [108, 0, 0, "-", "convert_leakyrelu"], [109, 0, 0, "-", "convert_nan_to_random"], [110, 0, 0, "-", "convert_placeholder_to_const"], [111, 0, 0, "-", "dilated_contraction"], [112, 0, 0, "-", "dummy_biasadd"], [113, 0, 0, "-", "expanddims_optimizer"], [114, 0, 0, "-", "fetch_weight_from_reshape"], [115, 0, 0, "-", "fold_batch_norm"], [116, 0, 0, "-", "fold_constant"], [117, 0, 0, "-", "fuse_biasadd_add"], [118, 0, 0, "-", "fuse_column_wise_mul"], [119, 0, 0, "-", "fuse_conv_with_math"], [120, 0, 0, "-", "fuse_decomposed_bn"], [121, 0, 0, "-", "fuse_decomposed_in"], [122, 0, 0, "-", "fuse_gelu"], [123, 0, 0, "-", "fuse_layer_norm"], [124, 0, 0, "-", "fuse_pad_with_conv"], [125, 0, 0, "-", "fuse_pad_with_fp32_conv"], [126, 0, 0, "-", "fuse_reshape_transpose"], [127, 0, 0, "-", "graph_cse_optimizer"], [128, 0, 0, "-", "grappler_pass"], [130, 0, 0, "-", "insert_print_node"], [131, 0, 0, "-", "move_squeeze_after_relu"], [132, 0, 0, "-", "pre_optimize"], [133, 0, 0, "-", "remove_training_nodes"], [134, 0, 0, "-", "rename_batch_norm"], [135, 0, 0, "-", "split_shared_input"], [136, 0, 0, "-", "strip_equivalent_nodes"], [137, 0, 0, "-", "strip_unused_nodes"], [138, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[106, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[107, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[108, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[109, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[110, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[111, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[112, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[113, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[114, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[115, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[116, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[117, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[118, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[119, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[120, 1, 1, "", "FuseDecomposedBNOptimizer"], [120, 2, 1, "", "bypass_reshape"], [120, 2, 1, "", "get_const_dim_count"], [120, 2, 1, "", "node_from_map"], [120, 2, 1, "", "node_name_from_input"], [120, 2, 1, "", "valid_reshape_inputs"], [120, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[121, 1, 1, "", "FuseDecomposedINOptimizer"], [121, 2, 1, "", "bypass_reshape"], [121, 2, 1, "", "get_const_dim_count"], [121, 2, 1, "", "node_from_map"], [121, 2, 1, "", "node_name_from_input"], [121, 2, 1, "", "valid_reshape_inputs"], [121, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[122, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[123, 1, 1, "", "FuseLayerNormOptimizer"], [123, 2, 1, "", "node_from_map"], [123, 2, 1, "", "node_name_from_input"], [123, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[124, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[125, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[126, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[127, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[128, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[130, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[131, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[132, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[133, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[134, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[135, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[136, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[137, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[138, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[139, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[141, 0, 0, "-", "freeze_fake_quant"], [142, 0, 0, "-", "freeze_value"], [143, 0, 0, "-", "fuse_conv_redundant_dequantize"], [144, 0, 0, "-", "fuse_conv_requantize"], [145, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [146, 0, 0, "-", "fuse_matmul_requantize"], [148, 0, 0, "-", "meta_op_optimizer"], [149, 0, 0, "-", "post_hostconst_converter"], [150, 0, 0, "-", "post_quantized_op_cse"], [151, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[141, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[142, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[143, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[144, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[145, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[146, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [146, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [146, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [146, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[148, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[149, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[150, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[151, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[153, 0, 0, "-", "insert_qdq_pattern"], [154, 0, 0, "-", "merge_duplicated_qdq"], [155, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[153, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[154, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[155, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[156, 1, 1, "", "GraphAnalyzer"], [156, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[166, 0, 0, "-", "qdq"], [168, 0, 0, "-", "quantize_graph_base"], [169, 0, 0, "-", "quantize_graph_bn"], [170, 0, 0, "-", "quantize_graph_concatv2"], [171, 0, 0, "-", "quantize_graph_conv"], [172, 0, 0, "-", "quantize_graph_for_intel_cpu"], [173, 0, 0, "-", "quantize_graph_matmul"], [174, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[159, 0, 0, "-", "fuse_qdq_bn"], [160, 0, 0, "-", "fuse_qdq_concatv2"], [161, 0, 0, "-", "fuse_qdq_conv"], [162, 0, 0, "-", "fuse_qdq_deconv"], [163, 0, 0, "-", "fuse_qdq_in"], [164, 0, 0, "-", "fuse_qdq_matmul"], [165, 0, 0, "-", "fuse_qdq_pooling"], [167, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[159, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[160, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[161, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[162, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[163, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[164, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[165, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[167, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[168, 1, 1, "", "QuantizeGraphBase"], [168, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[169, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[170, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[171, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[172, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[173, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[174, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[175, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[176, 0, 0, "-", "bias_correction"], [177, 0, 0, "-", "graph_transform_base"], [179, 0, 0, "-", "insert_logging"], [180, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[176, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[177, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[179, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[180, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[181, 2, 1, "", "apply_inlining"], [181, 2, 1, "", "collate_tf_preds"], [181, 2, 1, "", "construct_function_from_graph_def"], [181, 2, 1, "", "fix_ref_type_of_graph_def"], [181, 2, 1, "", "generate_feed_dict"], [181, 2, 1, "", "get_graph_def"], [181, 2, 1, "", "get_input_output_node_names"], [181, 2, 1, "", "get_model_input_shape"], [181, 2, 1, "", "get_tensor_by_name"], [181, 2, 1, "", "is_ckpt_format"], [181, 2, 1, "", "is_saved_model_format"], [181, 2, 1, "", "iterator_sess_run"], [181, 2, 1, "", "parse_saved_model"], [181, 2, 1, "", "read_graph"], [181, 2, 1, "", "reconstruct_saved_model"], [181, 2, 1, "", "strip_equivalent_nodes"], [181, 2, 1, "", "strip_unused_nodes"], [181, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[182, 0, 0, "-", "constants"], [183, 0, 0, "-", "data"], [185, 0, 0, "-", "model"], [186, 0, 0, "-", "model_wrappers"], [187, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[183, 1, 1, "", "BaseDataLoader"], [183, 1, 1, "", "BatchSampler"], [183, 1, 1, "", "DummyDataset"], [183, 1, 1, "", "DummyDatasetV2"], [183, 1, 1, "", "IndexFetcher"], [183, 1, 1, "", "IterableFetcher"], [183, 1, 1, "", "IterableSampler"], [183, 1, 1, "", "SequentialSampler"], [183, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model": [[185, 1, 1, "", "Model"], [185, 1, 1, "", "TensorflowGlobalConfig"]], "neural_compressor.tensorflow.utils.model_wrappers": [[186, 1, 1, "", "BaseModel"], [186, 1, 1, "", "KerasModel"], [186, 1, 1, "", "TensorflowBaseModel"], [186, 1, 1, "", "TensorflowCheckpointModel"], [186, 1, 1, "", "TensorflowLLMModel"], [186, 1, 1, "", "TensorflowModel"], [186, 1, 1, "", "TensorflowSavedModelModel"], [186, 2, 1, "", "checkpoint_session"], [186, 2, 1, "", "estimator_session"], [186, 2, 1, "", "frozen_pb_session"], [186, 2, 1, "", "get_model_type"], [186, 2, 1, "", "get_tf_model_type"], [186, 2, 1, "", "graph_def_session"], [186, 2, 1, "", "graph_session"], [186, 2, 1, "", "keras_session"], [186, 2, 1, "", "load_saved_model"], [186, 2, 1, "", "saved_model_session"], [186, 2, 1, "", "slim_session"], [186, 2, 1, "", "try_loading_keras"], [186, 2, 1, "", "validate_and_inference_input_output"], [186, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.utility": [[187, 1, 1, "", "CaptureOutputToFile"], [187, 1, 1, "", "CpuInfo"], [187, 1, 1, "", "TFSlimNetsFactory"], [187, 2, 1, "", "combine_histogram"], [187, 2, 1, "", "deep_get"], [187, 2, 1, "", "disable_random"], [187, 2, 1, "", "dump_elapsed_time"], [187, 2, 1, "", "get_all_fp32_data"], [187, 2, 1, "", "get_tensor_histogram"], [187, 2, 1, "", "itex_installed"], [187, 2, 1, "", "register_algo"], [187, 2, 1, "", "singleton"], [187, 2, 1, "", "valid_keras_format"], [187, 2, 1, "", "version1_eq_version2"], [187, 2, 1, "", "version1_gt_version2"], [187, 2, 1, "", "version1_gte_version2"], [187, 2, 1, "", "version1_lt_version2"], [187, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[189, 0, 0, "-", "algorithms"], [229, 0, 0, "-", "export"], [235, 0, 0, "-", "quantization"], [241, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[188, 0, 0, "-", "base_algorithm"], [190, 0, 0, "-", "layer_wise"], [195, 0, 0, "-", "mixed_precision"], [197, 0, 0, "-", "mx_quant"], [202, 0, 0, "-", "pt2e_quant"], [205, 0, 0, "-", "smooth_quant"], [209, 0, 0, "-", "static_quant"], [223, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.base_algorithm": [[188, 1, 1, "", "Quantizer"]], "neural_compressor.torch.algorithms.layer_wise": [[191, 0, 0, "-", "load"], [192, 0, 0, "-", "modified_pickle"], [193, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[191, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[192, 5, 1, "", "PickleError"], [192, 5, 1, "", "PicklingError"], [192, 5, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[193, 1, 1, "", "QDQLayer"], [193, 2, 1, "", "clean_module_weight"], [193, 2, 1, "", "dowload_hf_model"], [193, 2, 1, "", "get_children"], [193, 2, 1, "", "get_module"], [193, 2, 1, "", "get_named_children"], [193, 2, 1, "", "get_super_module_by_name"], [193, 2, 1, "", "load_empty_model"], [193, 2, 1, "", "load_layer_wise_quantized_model"], [193, 2, 1, "", "load_module"], [193, 2, 1, "", "load_tensor"], [193, 2, 1, "", "load_tensor_from_shard"], [193, 2, 1, "", "load_value"], [193, 2, 1, "", "register_weight_hooks"], [193, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.mixed_precision": [[194, 0, 0, "-", "half_precision_convert"], [196, 0, 0, "-", "module_wrappers"]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[194, 1, 1, "", "HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[196, 1, 1, "", "HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.mx_quant": [[198, 0, 0, "-", "mx"], [199, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.mx_quant.mx": [[198, 1, 1, "", "MXLinear"], [198, 1, 1, "", "MXQuantizer"]], "neural_compressor.torch.algorithms.mx_quant.utils": [[199, 1, 1, "", "ElemFormat"], [199, 1, 1, "", "RoundingMode"], [199, 2, 1, "", "quantize_elemwise_op"], [199, 2, 1, "", "quantize_mx_op"]], "neural_compressor.torch.algorithms.pt2e_quant": [[200, 0, 0, "-", "core"], [201, 0, 0, "-", "half_precision_rewriter"], [203, 0, 0, "-", "save_load"], [204, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[200, 1, 1, "", "W8A8PT2EQuantizer"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[201, 1, 1, "", "PatternPair"], [201, 2, 1, "", "apply_single_pattern_pair"], [201, 2, 1, "", "get_filter_fn"], [201, 2, 1, "", "get_half_precision_node_set"], [201, 2, 1, "", "get_unquantized_node_set"], [201, 2, 1, "", "pattern_factory"], [201, 2, 1, "", "transformation"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair": [[201, 3, 1, "", "fn"], [201, 3, 1, "", "replace_pattern"], [201, 3, 1, "", "search_pattern"]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[203, 2, 1, "", "load"], [203, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[204, 2, 1, "", "create_quant_spec_from_config"], [204, 2, 1, "", "create_xiq_quantizer_from_pt2e_config"]], "neural_compressor.torch.algorithms.smooth_quant": [[206, 0, 0, "-", "save_load"], [207, 0, 0, "-", "smooth_quant"], [208, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[206, 2, 1, "", "recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[207, 1, 1, "", "SmoothQuantQuantizer"], [207, 2, 1, "", "qdq_quantize"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[208, 1, 1, "", "AutoAlpha"], [208, 1, 1, "", "Calibration"], [208, 1, 1, "", "GraphTrace"], [208, 1, 1, "", "SQLinearWrapper"], [208, 1, 1, "", "TorchSmoothQuant"], [208, 1, 1, "", "WrapperLayer"], [208, 2, 1, "", "build_captured_dataloader"], [208, 2, 1, "", "cal_scale"], [208, 2, 1, "", "cfg_to_qconfig"], [208, 2, 1, "", "check_cfg_and_qconfig"], [208, 2, 1, "", "dump_model_op_stats"], [208, 2, 1, "", "enough_memo_store_scale"], [208, 2, 1, "", "forward_wrapper"], [208, 2, 1, "", "get_module"], [208, 2, 1, "", "get_parent"], [208, 2, 1, "", "get_quantizable_ops_recursively"], [208, 2, 1, "", "model_forward"], [208, 2, 1, "", "model_forward_per_sample"], [208, 2, 1, "", "move_input_to_device"], [208, 2, 1, "", "quant_dequant_w_v1"], [208, 2, 1, "", "quant_dequant_x_v1"], [208, 2, 1, "", "register_autotune"], [208, 2, 1, "", "reshape_in_channel_to_last"], [208, 2, 1, "", "reshape_scale_as_input"], [208, 2, 1, "", "reshape_scale_as_weight"], [208, 2, 1, "", "set_module"], [208, 2, 1, "", "update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[210, 0, 0, "-", "save_load"], [211, 0, 0, "-", "static_quant"], [212, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[210, 2, 1, "", "load"], [210, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[211, 1, 1, "", "StaticQuantQuantizer"]], "neural_compressor.torch.algorithms.static_quant.utility": [[212, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [212, 2, 1, "", "cfg_to_qconfig"], [212, 2, 1, "", "check_cfg_and_qconfig"], [212, 2, 1, "", "dump_model_op_stats"], [212, 2, 1, "", "generate_activation_observer"], [212, 2, 1, "", "generate_xpu_qconfig"], [212, 2, 1, "", "get_depth"], [212, 2, 1, "", "get_dict_at_depth"], [212, 2, 1, "", "get_element_under_depth"], [212, 2, 1, "", "get_quantizable_ops_from_cfgs"], [212, 2, 1, "", "get_quantizable_ops_recursively"], [212, 2, 1, "", "parse_cfgs"], [212, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[213, 0, 0, "-", "autoround"], [214, 0, 0, "-", "awq"], [215, 0, 0, "-", "gptq"], [219, 0, 0, "-", "hqq"], [224, 0, 0, "-", "modules"], [225, 0, 0, "-", "rtn"], [226, 0, 0, "-", "save_load"], [227, 0, 0, "-", "teq"], [228, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[213, 1, 1, "", "AutoRoundQuantizer"], [213, 2, 1, "", "get_dataloader"]], "neural_compressor.torch.algorithms.weight_only.awq": [[214, 1, 1, "", "AWQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[215, 1, 1, "", "GPTQ"], [215, 1, 1, "", "GPTQuantizer"], [215, 1, 1, "", "Quantizer"], [215, 1, 1, "", "RAWGPTQuantizer"], [215, 2, 1, "", "find_layers"], [215, 2, 1, "", "find_layers_name"], [215, 2, 1, "", "is_leaf"], [215, 2, 1, "", "log_quantizable_layers_per_transformer"], [215, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[216, 0, 0, "-", "bitpack"], [217, 0, 0, "-", "config"], [218, 0, 0, "-", "core"], [220, 0, 0, "-", "optimizer"], [221, 0, 0, "-", "qtensor"], [222, 0, 0, "-", "quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[216, 1, 1, "", "Packer"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[217, 1, 1, "", "HQQModuleConfig"], [217, 1, 1, "", "QTensorConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[218, 1, 1, "", "HQQLinear"], [218, 1, 1, "", "HQQTensorHandle"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[220, 2, 1, "", "optimize_weights_proximal_legacy"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[221, 1, 1, "", "QTensor"], [221, 1, 1, "", "QTensorMetaInfo"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo": [[221, 3, 1, "", "axis"], [221, 3, 1, "", "group_size"], [221, 3, 1, "", "nbits"], [221, 3, 1, "", "packing"], [221, 3, 1, "", "shape"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[222, 1, 1, "", "HQQuantizer"], [222, 2, 1, "", "filter_fn"], [222, 2, 1, "", "patch_hqq_moduile"], [222, 2, 1, "", "replacement_fn"]], "neural_compressor.torch.algorithms.weight_only.modules": [[224, 1, 1, "", "FakeAffineTensorQuantFunction"], [224, 1, 1, "", "MulLinear"], [224, 1, 1, "", "QDQLayer"], [224, 1, 1, "", "TEQLinearFakeQuant"], [224, 1, 1, "", "WeightOnlyLinear"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[225, 1, 1, "", "RTNQuantizer"]], "neural_compressor.torch.algorithms.weight_only.save_load": [[226, 1, 1, "", "WOQModelLoader"], [226, 2, 1, "", "load"], [226, 2, 1, "", "save"]], "neural_compressor.torch.algorithms.weight_only.teq": [[227, 1, 1, "", "TEQuantizer"], [227, 1, 1, "", "TrainableEquivalentTransformation"]], "neural_compressor.torch.algorithms.weight_only.utility": [[228, 1, 1, "", "GraphTrace"], [228, 2, 1, "", "fetch_module"], [228, 2, 1, "", "forward_wrapper"], [228, 2, 1, "", "get_absorb_layers"], [228, 2, 1, "", "get_block_prefix"], [228, 2, 1, "", "get_module"], [228, 2, 1, "", "get_module_input_output"], [228, 2, 1, "", "get_parent"], [228, 2, 1, "", "model_forward"], [228, 2, 1, "", "move_input_to_device"], [228, 2, 1, "", "qdq_weight_actor"], [228, 2, 1, "", "qdq_weight_asym"], [228, 2, 1, "", "qdq_weight_sym"], [228, 2, 1, "", "quant_tensor"], [228, 2, 1, "", "quant_weight_w_scale"], [228, 2, 1, "", "quantize_4bit"], [228, 2, 1, "", "recover_forward"], [228, 2, 1, "", "replace_forward"], [228, 2, 1, "", "search_clip"], [228, 2, 1, "", "set_module"]], "neural_compressor.torch.export": [[230, 0, 0, "-", "pt2e_export"]], "neural_compressor.torch.export.pt2e_export": [[230, 2, 1, "", "export"], [230, 2, 1, "", "export_model_for_pt2e_quant"]], "neural_compressor.torch.quantization": [[232, 0, 0, "-", "algorithm_entry"], [233, 0, 0, "-", "autotune"], [234, 0, 0, "-", "config"], [236, 0, 0, "-", "load_entry"], [237, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[232, 2, 1, "", "autoround_quantize_entry"], [232, 2, 1, "", "awq_quantize_entry"], [232, 2, 1, "", "gptq_entry"], [232, 2, 1, "", "hqq_entry"], [232, 2, 1, "", "mixed_precision_entry"], [232, 2, 1, "", "mx_quant_entry"], [232, 2, 1, "", "pt2e_dynamic_quant_entry"], [232, 2, 1, "", "pt2e_static_quant_entry"], [232, 2, 1, "", "rtn_entry"], [232, 2, 1, "", "smooth_quant_entry"], [232, 2, 1, "", "static_quant_entry"], [232, 2, 1, "", "teq_quantize_entry"]], "neural_compressor.torch.quantization.autotune": [[233, 2, 1, "", "autotune"], [233, 2, 1, "", "get_all_config_set"], [233, 2, 1, "", "get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.config": [[234, 1, 1, "", "AWQConfig"], [234, 1, 1, "", "AutoRoundConfig"], [234, 1, 1, "", "DynamicQuantConfig"], [234, 1, 1, "", "FP8Config"], [234, 1, 1, "", "GPTQConfig"], [234, 1, 1, "", "HQQConfig"], [234, 1, 1, "", "MXQuantConfig"], [234, 1, 1, "", "MixedPrecisionConfig"], [234, 1, 1, "", "OperatorConfig"], [234, 1, 1, "", "RTNConfig"], [234, 1, 1, "", "SmoothQuantConfig"], [234, 1, 1, "", "StaticQuantConfig"], [234, 1, 1, "", "TEQConfig"], [234, 1, 1, "", "TorchBaseConfig"], [234, 2, 1, "", "get_all_registered_configs"], [234, 2, 1, "", "get_default_AutoRound_config"], [234, 2, 1, "", "get_default_awq_config"], [234, 2, 1, "", "get_default_double_quant_config"], [234, 2, 1, "", "get_default_dynamic_config"], [234, 2, 1, "", "get_default_fp8_config"], [234, 2, 1, "", "get_default_fp8_config_set"], [234, 2, 1, "", "get_default_gptq_config"], [234, 2, 1, "", "get_default_hqq_config"], [234, 2, 1, "", "get_default_mixed_precision_config"], [234, 2, 1, "", "get_default_mixed_precision_config_set"], [234, 2, 1, "", "get_default_mx_config"], [234, 2, 1, "", "get_default_rtn_config"], [234, 2, 1, "", "get_default_sq_config"], [234, 2, 1, "", "get_default_static_config"], [234, 2, 1, "", "get_default_teq_config"], [234, 2, 1, "", "get_woq_tuning_config"]], "neural_compressor.torch.quantization.load_entry": [[236, 2, 1, "", "load"]], "neural_compressor.torch.quantization.quantize": [[237, 2, 1, "", "convert"], [237, 2, 1, "", "need_apply"], [237, 2, 1, "", "prepare"], [237, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[238, 0, 0, "-", "auto_accelerator"], [239, 0, 0, "-", "constants"], [240, 0, 0, "-", "environ"], [242, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[238, 1, 1, "", "AcceleratorRegistry"], [238, 1, 1, "", "Auto_Accelerator"], [238, 1, 1, "", "CPU_Accelerator"], [238, 1, 1, "", "CUDA_Accelerator"], [238, 1, 1, "", "HPU_Accelerator"], [238, 1, 1, "", "XPU_Accelerator"], [238, 2, 1, "", "auto_detect_accelerator"], [238, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.constants": [[239, 1, 1, "", "LoadFormat"]], "neural_compressor.torch.utils.environ": [[240, 2, 1, "", "device_synchronize"], [240, 2, 1, "", "get_accelerator"], [240, 2, 1, "", "get_ipex_version"], [240, 2, 1, "", "get_torch_version"], [240, 2, 1, "", "is_hpex_available"], [240, 2, 1, "", "is_ipex_available"], [240, 2, 1, "", "is_ipex_imported"], [240, 2, 1, "", "is_package_available"], [240, 2, 1, "", "is_transformers_imported"]], "neural_compressor.torch.utils.utility": [[242, 2, 1, "", "dowload_hf_model"], [242, 2, 1, "", "dump_model_op_stats"], [242, 2, 1, "", "fetch_module"], [242, 2, 1, "", "get_double_quant_config_dict"], [242, 2, 1, "", "get_model_device"], [242, 2, 1, "", "get_model_info"], [242, 2, 1, "", "get_processor_type_from_user_config"], [242, 2, 1, "", "get_quantizer"], [242, 2, 1, "", "load_empty_model"], [242, 2, 1, "", "postprocess_model"], [242, 2, 1, "", "register_algo"], [242, 2, 1, "", "set_module"]], "neural_compressor.training": [[243, 1, 1, "", "CallBacks"], [243, 1, 1, "", "CompressionManager"], [243, 2, 1, "", "fit"], [243, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[244, 0, 0, "-", "collect_layer_histogram"], [245, 0, 0, "-", "constant"], [246, 0, 0, "-", "create_obj_from_config"], [247, 0, 0, "-", "export"], [252, 0, 0, "-", "kl_divergence"], [253, 0, 0, "-", "load_huggingface"], [254, 0, 0, "-", "logger"], [255, 0, 0, "-", "options"], [256, 0, 0, "-", "pytorch"], [257, 0, 0, "-", "utility"], [258, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[244, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[246, 2, 1, "", "create_dataloader"], [246, 2, 1, "", "create_dataset"], [246, 2, 1, "", "create_eval_func"], [246, 2, 1, "", "create_train_func"], [246, 2, 1, "", "get_algorithm"], [246, 2, 1, "", "get_func_from_config"], [246, 2, 1, "", "get_metrics"], [246, 2, 1, "", "get_postprocess"], [246, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[248, 0, 0, "-", "qlinear2qdq"], [249, 0, 0, "-", "tf2onnx"], [250, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[248, 2, 1, "", "check_model"], [248, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[249, 2, 1, "", "tf_to_fp32_onnx"], [249, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[250, 2, 1, "", "dynamic_quant_export"], [250, 2, 1, "", "get_node_mapping"], [250, 2, 1, "", "get_quantizable_onnx_ops"], [250, 2, 1, "", "static_quant_export"], [250, 2, 1, "", "torch_to_fp32_onnx"], [250, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[252, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[253, 1, 1, "", "OptimizedModel"], [253, 2, 1, "", "export_compressed_model"], [253, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[254, 1, 1, "", "Logger"], [254, 2, 1, "", "debug"], [254, 2, 1, "", "error"], [254, 2, 1, "", "fatal"], [254, 2, 1, "", "info"], [254, 2, 1, "", "log"], [254, 2, 1, "", "warn"], [254, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[255, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[256, 2, 1, "", "is_int8_model"], [256, 2, 1, "", "load"], [256, 2, 1, "", "load_weight_only"], [256, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[257, 1, 1, "", "CaptureOutputToFile"], [257, 1, 1, "", "CpuInfo"], [257, 2, 1, "", "Dequantize"], [257, 1, 1, "", "DotDict"], [257, 1, 1, "", "GLOBAL_STATE"], [257, 1, 1, "", "LazyImport"], [257, 1, 1, "", "MODE"], [257, 1, 1, "", "OpEntry"], [257, 1, 1, "", "Statistics"], [257, 2, 1, "", "alias_param"], [257, 2, 1, "", "calculate_mse"], [257, 2, 1, "", "check_key_exist"], [257, 2, 1, "", "combine_histogram"], [257, 2, 1, "", "compare_objects"], [257, 2, 1, "", "compute_sparsity"], [257, 2, 1, "", "deep_get"], [257, 2, 1, "", "deep_set"], [257, 2, 1, "", "dequantize_weight"], [257, 2, 1, "", "dump_class_attrs"], [257, 2, 1, "", "dump_data_to_local"], [257, 2, 1, "", "dump_elapsed_time"], [257, 2, 1, "", "dump_table"], [257, 2, 1, "", "dump_table_to_csv"], [257, 2, 1, "", "equal_dicts"], [257, 2, 1, "", "fault_tolerant_file"], [257, 2, 1, "", "get_all_fp32_data"], [257, 2, 1, "", "get_number_of_sockets"], [257, 2, 1, "", "get_op_list"], [257, 2, 1, "", "get_size"], [257, 2, 1, "", "get_tensor_histogram"], [257, 2, 1, "", "get_tensors_info"], [257, 2, 1, "", "get_tuning_history"], [257, 2, 1, "", "get_weights_details"], [257, 2, 1, "", "load_data_from_pkl"], [257, 2, 1, "", "mse_metric_gap"], [257, 2, 1, "", "print_op_list"], [257, 2, 1, "", "print_table"], [257, 2, 1, "", "recover"], [257, 2, 1, "", "set_random_seed"], [257, 2, 1, "", "set_resume_from"], [257, 2, 1, "", "set_tensorboard"], [257, 2, 1, "", "set_workspace"], [257, 2, 1, "", "show_memory_info"], [257, 2, 1, "", "singleton"], [257, 2, 1, "", "str2array"], [257, 2, 1, "", "time_limit"], [257, 2, 1, "", "version1_eq_version2"], [257, 2, 1, "", "version1_gt_version2"], [257, 2, 1, "", "version1_gte_version2"], [257, 2, 1, "", "version1_lt_version2"], [257, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[258, 1, 1, "", "WeightsDetails"], [258, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "algorithm": [0, 1, 2, 3, 4, 78, 79, 80, 81, 82, 83, 84, 85, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 309, 337, 340, 342], "class": [0, 1, 3, 4, 6, 7, 10, 11, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 36, 37, 39, 42, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 82, 84, 85, 88, 89, 90, 93, 94, 95, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 185, 186, 187, 188, 193, 194, 196, 198, 199, 200, 201, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 228, 234, 238, 239, 243, 244, 252, 253, 254, 255, 257, 258, 283], "function": [0, 5, 6, 7, 8, 14, 15, 21, 23, 30, 36, 37, 39, 40, 42, 43, 44, 46, 47, 51, 55, 57, 59, 63, 71, 75, 77, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 120, 121, 123, 181, 183, 186, 187, 191, 193, 199, 201, 203, 204, 206, 207, 208, 210, 212, 213, 215, 220, 222, 226, 228, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243, 246, 248, 249, 250, 253, 254, 256, 257, 314], "modul": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 82, 84, 85, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258], "content": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 82, 84, 85, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 282], "fast_bias_correct": 1, "submodul": [2, 9, 12, 18, 27, 31, 34, 38, 45, 49, 67, 73, 81, 83, 91, 96, 100, 105, 129, 140, 147, 152, 157, 158, 166, 178, 184, 189, 190, 195, 197, 202, 205, 209, 219, 223, 229, 235, 241, 247, 251], "smooth_quant": [3, 205, 206, 207, 208], "weight_correct": 4, "benchmark": [5, 8, 273, 293, 308, 326], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 267, 268, 280, 317], "base_config": 6, "base_tun": 7, "subpackag": [9, 17, 32, 38, 67, 78, 86, 87, 100, 140, 157, 158, 189, 223, 231, 251], "tuning_param": 10, "util": [11, 12, 13, 14, 15, 72, 73, 74, 75, 76, 77, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 199, 204, 208, 212, 228, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 288], "constant": [11, 72, 182, 239, 245], "logger": [13, 254, 310], "save_load": [14, 203, 206, 210, 226], "config": [16, 95, 99, 217, 234, 295, 303, 306, 330], "contrib": [17, 18, 19, 20], "strategi": [18, 19, 20, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 300, 339, 342], "sigopt": [19, 339, 342], "tpe": [20, 342], "data": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 183, 284, 285, 315], "dataset": [21, 22, 23, 24, 25, 26, 27, 28, 320], "bert_dataset": 21, "coco_dataset": 22, "attribut": [23, 278], "dummy_dataset": 24, "dummy_dataset_v2": 25, "imagenet_dataset": 26, "style_transfer_dataset": 28, "filter": [29, 30, 31], "coco_filt": 29, "transform": [33, 34, 35, 36, 37, 320, 341], "imagenet_transform": 33, "postprocess": 35, "token": 36, "metric": [39, 40, 41, 42, 43, 44, 45, 46, 320, 325], "bleu": 39, "bleu_util": 40, "coco_label_map": 41, "coco_tool": 42, "evaluate_squad": 43, "f1": 44, "mix_precis": 47, "model": [48, 49, 50, 51, 52, 53, 54, 55, 56, 185, 265, 266, 272, 284, 297, 316, 322, 324, 326, 328, 329, 332, 335, 337, 340, 343], "base_model": 48, "keras_model": 50, "mxnet_model": 52, "nets_factori": 53, "onnx_model": 54, "tensorflow_model": 55, "torch_model": 56, "object": [57, 298, 330], "profil": 58, "quantiz": [59, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 222, 232, 233, 234, 235, 236, 237, 262, 263, 265, 266, 267, 268, 269, 271, 274, 277, 280, 282, 284, 285, 299, 301, 302, 303, 304, 305, 306, 309, 313, 316, 322, 324, 326, 327, 329, 334, 335, 336, 337, 340, 343], "auto": [60, 270, 336, 340, 342], "auto_mixed_precis": 61, "basic": [62, 342], "bayesian": [63, 342], "conserv": [64, 342], "exhaust": [65, 342], "hawq_v2": [66, 342], "mse": [68, 342], "mse_v2": [69, 342], "random": [70, 342], "tuning_sampl": 74, "tuning_spac": 75, "tuning_struct": 76, "tensorflow": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 269, 271, 272, 277, 282, 301, 302, 303, 314, 316, 322, 325, 334, 336, 341, 343], "smoother": [79, 80, 81, 82], "calibr": [79, 284, 309], "core": [80, 200, 218], "scaler": 82, "static_qu": [83, 84, 85, 209, 210, 211, 212], "kera": [84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "layer": [88, 89, 90, 91, 92, 93, 94, 267, 335, 340], "conv2d": 88, "dens": 89, "depthwise_conv2d": 90, "layer_initi": 92, "pool2d": 93, "separable_conv2d": 94, "algorithm_entri": [97, 232], "autotun": [98, 233, 264, 268, 272, 301, 304], "graph_convert": 102, "graph_rewrit": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "bf16": [103, 104, 105, 264, 327], "bf16_convert": 103, "dequantize_cast_optim": 104, "gener": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 273, 284], "convert_add_to_biasadd": 106, "convert_layout": 107, "convert_leakyrelu": 108, "convert_nan_to_random": 109, "convert_placeholder_to_const": 110, "dilated_contract": 111, "dummy_biasadd": 112, "expanddims_optim": 113, "fetch_weight_from_reshap": 114, "fold_batch_norm": 115, "fold_const": 116, "fuse_biasadd_add": 117, "fuse_column_wise_mul": 118, "fuse_conv_with_math": 119, "fuse_decomposed_bn": 120, "fuse_decomposed_in": 121, "fuse_gelu": 122, "fuse_layer_norm": 123, "fuse_pad_with_conv": 124, "fuse_pad_with_fp32_conv": 125, "fuse_reshape_transpos": 126, "graph_cse_optim": 127, "grappler_pass": 128, "insert_print_nod": 130, "move_squeeze_after_relu": 131, "pre_optim": 132, "remove_training_nod": 133, "rename_batch_norm": 134, "split_shared_input": 135, "strip_equivalent_nod": 136, "strip_unused_nod": 137, "switch_optim": 138, "graph_bas": 139, "int8": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 316, 343], "freeze_fake_qu": 141, "freeze_valu": 142, "fuse_conv_redundant_dequant": 143, "fuse_conv_requant": 144, "fuse_matmul_redundant_dequant": 145, "fuse_matmul_requant": 146, "meta_op_optim": 148, "post_hostconst_convert": 149, "post_quantized_op_cs": 150, "scale_propag": 151, "qdq": [152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 343], "insert_qdq_pattern": 153, "merge_duplicated_qdq": 154, "share_qdq_y_pattern": 155, "graph_util": 156, "quantize_graph": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "fuse_qdq_bn": 159, "fuse_qdq_concatv2": 160, "fuse_qdq_conv": 161, "fuse_qdq_deconv": 162, "fuse_qdq_in": 163, "fuse_qdq_matmul": 164, "fuse_qdq_pool": 165, "optimize_qdq": 167, "quantize_graph_bas": 168, "quantize_graph_bn": 169, "quantize_graph_concatv2": 170, "quantize_graph_conv": 171, "quantize_graph_for_intel_cpu": 172, "quantize_graph_matmul": 173, "quantize_graph_pool": 174, "quantize_graph_common": 175, "transform_graph": [176, 177, 178, 179, 180], "bias_correct": 176, "graph_transform_bas": 177, "insert_log": 179, "rerange_quantized_concat": 180, "model_wrapp": 186, "torch": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 268, 282, 288, 322, 343], "base_algorithm": 188, "layer_wis": [190, 191, 192, 193], "load": [191, 267, 268], "modified_pickl": 192, "except": 192, "mixed_precis": [194, 195, 196], "half_precision_convert": 194, "module_wrapp": 196, "mx_quant": [197, 198, 199], "mx": 198, "pt2e_quant": [200, 201, 202, 203, 204], "half_precision_rewrit": 201, "weight_onli": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228], "autoround": [213, 267], "awq": [214, 267], "gptq": [215, 267], "hqq": [216, 217, 218, 219, 220, 221, 222, 267], "bitpack": 216, "optim": [220, 331, 332], "qtensor": 221, "rtn": [225, 267], "teq": [227, 267], "export": [229, 230, 247, 248, 249, 250, 316, 337], "pt2e_export": 230, "load_entri": 236, "auto_acceler": 238, "environ": [240, 322], "train": [243, 271, 277, 280, 307, 314, 326, 332, 334], "collect_layer_histogram": 244, "create_obj_from_config": 246, "qlinear2qdq": 248, "tf2onnx": 249, "torch2onnx": 250, "kl_diverg": 252, "load_huggingfac": 253, "option": [255, 314], "pytorch": [256, 264, 265, 266, 267, 272, 277, 304, 305, 306, 314, 316, 325, 334, 335, 336, 341, 343], "weights_detail": 258, "version": 259, "intel": [260, 282, 311, 321, 322, 325, 326, 344], "neural": [260, 280, 282, 311, 321, 322, 325, 326, 332, 339, 344], "compressor": [260, 280, 282, 311, 321, 322, 325, 326, 339, 344], "document": [260, 282, 291, 344], "section": [260, 344], "2": [261, 289, 314, 317, 320, 326, 343], "x": [261, 326], "api": [261, 263, 264, 268, 271, 283, 284, 289, 290, 291, 292, 302, 305, 308, 311, 313, 314, 320, 325, 327, 329, 330, 331, 332], "user": [261, 314, 320, 337], "guid": 261, "overview": [261, 272, 279], "python": [261, 311, 325], "base": [261, 302, 305, 322], "advanc": 261, "topic": 261, "dynam": [262, 277, 280, 334], "introduct": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 280, 283, 284, 285, 308, 309, 311, 313, 314, 316, 318, 321, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 339, 340, 341, 342], "get": [262, 263, 264, 266, 267, 269, 274, 280, 282, 283, 308, 311, 313, 314, 318, 319, 325, 327, 329, 330, 331, 332, 334], "start": [262, 263, 264, 266, 267, 269, 274, 280, 282, 283, 308, 311, 313, 314, 318, 319, 325, 327, 329, 330, 331, 332, 334], "exampl": [262, 263, 264, 266, 267, 269, 270, 277, 280, 283, 291, 308, 311, 313, 314, 315, 316, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 340, 343], "microsc": [263, 329], "refer": [263, 267, 277, 309, 310, 329, 332, 334, 337, 340], "mix": [264, 271, 296, 326, 327, 336], "precis": [264, 271, 296, 326, 327, 336], "support": [264, 265, 267, 268, 271, 273, 279, 280, 283, 285, 308, 309, 311, 313, 314, 316, 318, 321, 322, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 340, 341], "matrix": [264, 265, 267, 268, 271, 273, 280, 283, 308, 309, 311, 313, 314, 316, 318, 319, 321, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 340], "hardwar": [264, 322, 327, 343], "softwar": [264, 322, 327], "request": [264, 279, 327], "fp16": [264, 327], "accuraci": [264, 269, 277, 324, 327, 334, 342], "driven": [264, 327], "smooth": [265, 270, 271, 277, 340], "usag": [265, 266, 267, 270, 273, 340, 342], "fix": [265, 270, 340], "alpha": [265, 270, 340], "specifi": [265, 266, 267, 269, 334], "rule": [265, 266, 267, 269, 310, 334], "valid": [265, 322, 340, 343], "framework": [265, 282, 284, 311, 316, 318, 322, 328, 329, 335, 337, 340], "static": [266, 271, 277, 280, 282, 334], "ipex": [266, 277, 334], "backend": [266, 271, 283, 334], "sampl": [266, 284, 319], "pt2e": 266, "weight": [267, 277, 282, 337], "onli": [267, 277, 282, 337], "argument": 267, "save": 267, "wise": [267, 335], "effici": 267, "client": [267, 274], "side": 267, "like": [268, 285], "problem": [268, 280], "without": 269, "awar": [269, 277, 280, 326, 332, 334], "tune": [269, 270, 277, 285, 334, 337, 340, 342], "With": 269, "quant": [270, 340], "us": [270, 273, 282, 285, 311, 322, 325, 340], "determin": [270, 340], "through": [270, 322, 340, 343], "scheme": [271, 277, 334], "approach": [271, 334], "post": [271, 280, 326, 334], "devic": [271, 334], "how": [272, 284, 285], "work": [272, 283, 334], "case": 273, "dump": 273, "throughput": 273, "latenc": 273, "summari": [273, 285], "demo": 273, "design": [275, 284, 312, 342], "architectur": [275, 312, 321, 322], "workflow": [275, 312], "fundament": [277, 334, 340], "symmetr": 277, "asymmetr": 277, "per": [277, 340], "tensor": [277, 340], "channel": [277, 340], "matmul": [277, 340], "limit": [277, 340], "contributor": [278, 279], "coven": [278, 279], "code": [278, 279, 310, 326, 337], "conduct": [278, 279], "our": [278, 340], "pledg": 278, "standard": 278, "respons": 278, "scope": [278, 332], "enforc": 278, "contribut": 279, "guidelin": 279, "creat": 279, "pull": 279, "step": 279, "checklist": 279, "templat": 279, "accept": 279, "criteria": [279, 332, 342], "statu": 279, "check": 279, "fx": 280, "mode": [280, 343], "note": [280, 338], "detail": 280, "secur": [281, 314], "polici": [281, 342], "report": 281, "vulner": 281, "what": 282, "": [282, 322], "new": [282, 283, 285, 342], "instal": [282, 322], "cpu": [282, 322, 343], "docker": [282, 322], "imag": [282, 322], "hpu": [282, 322], "intel_extension_for_pytorch": [282, 322], "gpu": [282, 322], "other": [282, 322], "platform": [282, 322, 339], "from": [282, 284, 322, 326], "pypi": 282, "llm": [282, 324], "non": 282, "select": 282, "public": [282, 310, 333], "event": [282, 333], "addit": 282, "commun": 282, "adaptor": [283, 284, 286], "flow": [283, 334], "queri": 283, "background": [283, 310], "ad": 283, "capabl": [283, 337], "implement": [283, 284], "onnxrtadaptor": 283, "add": 284, "an": 284, "list": [284, 315, 341], "need": 284, "yaml": [284, 314, 318], "query_fw_cap": 284, "accord": [284, 285], "tune_cfg": 284, "prepar": [284, 339], "fp32": [284, 316], "graph": 284, "run": 284, "iter": 284, "oper": [284, 285], "calcul": 284, "rang": 284, "type": [285, 310, 332], "int4": 285, "few": 285, "line": 285, "chang": [285, 320, 338], "defin": [285, 314], "abil": 285, "specif": 285, "invok": 285, "kernel": 285, "configur": [285, 314, 318, 339], "onnx": [287, 322, 334, 335, 343], "runtim": [287, 322, 334, 335, 343], "0": [289, 290, 343], "3": [290, 317, 333], "compress": [294, 337], "inc": 310, "convent": 310, "import": 310, "string": 310, "annot": 310, "comment": 310, "todo": 310, "intern": 310, "interfac": 310, "folder": 310, "structur": 310, "recommend": 310, "v": 310, "set": 310, "json": 310, "dataload": 311, "build": [311, 317, 325], "custom": [311, 325, 342], "distil": [313, 326, 343], "distribut": [314, 342], "infer": 314, "evalu": 314, "featur": [314, 318, 319, 321, 334], "1": [314, 317, 320, 326, 343], "pure": 314, "horovodrun": 314, "execut": 314, "releas": [315, 338], "appendix": 316, "op": 316, "frequent": 317, "ask": 317, "question": 317, "issu": [317, 338], "4": [317, 333], "5": 317, "file": 318, "quick": 319, "incompat": [320, 338], "between": 320, "v1": 320, "face": 320, "built": [320, 322, 325], "infrastructur": 321, "prerequisit": 322, "binari": 322, "sourc": 322, "ai": 322, "kit": 322, "system": 322, "requir": 322, "heterogen": 322, "two": 322, "comput": 322, "engin": [322, 340], "mme": 322, "tpc": 322, "64": 322, "compat": 322, "processor": 322, "xe": 322, "multipl": [322, 330, 343], "vendor": 322, "legal": 323, "inform": 323, "licens": 323, "citat": 323, "trademark": 323, "recip": [324, 334], "larg": [324, 332], "languag": [324, 332], "mxnet": [325, 334, 341], "onnxrt": [325, 341], "migrat": 326, "prune": [326, 332, 343], "orchestr": [326, 331], "dure": [327, 336], "singl": 330, "One": 331, "shot": 331, "network": 332, "pattern": 332, "schedul": 332, "sparsiti": 332, "decai": 332, "regular": 332, "retrain": 332, "free": 332, "spars": 332, "deploy": 332, "hyperparamet": 332, "full": 333, "82": 333, "2024": 333, "2023": 333, "25": 333, "2022": 333, "35": 333, "2021": 333, "15": [333, 343], "2018": 333, "2020": 333, "lwq": 335, "turn": 336, "off": 336, "woq": [337, 343], "known": 338, "perform": 339, "benefit": 339, "comparison": 339, "differ": 339, "smoothquant": 340, "enhanc": 340, "entir": 340, "each": 340, "block": 340, "space": 342, "exit": 342, "process": 342, "ptq": 343, "qat": 343, "17": 343, "knowledg": 343}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [42, "classes"], [46, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [207, "classes"], [208, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [221, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [234, "classes"], [238, "classes"], [239, "classes"], [243, "classes"], [244, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [257, "classes"], [258, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [14, "functions"], [15, "functions"], [21, "functions"], [23, "functions"], [30, "functions"], [36, "functions"], [37, "functions"], [39, "functions"], [40, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [46, "functions"], [47, "functions"], [51, "functions"], [55, "functions"], [57, "functions"], [59, "functions"], [63, "functions"], [71, "functions"], [75, "functions"], [77, "functions"], [88, "functions"], [89, "functions"], [90, "functions"], [93, "functions"], [94, "functions"], [95, "functions"], [97, "functions"], [98, "functions"], [99, "functions"], [101, "functions"], [120, "functions"], [121, "functions"], [123, "functions"], [181, "functions"], [183, "functions"], [186, "functions"], [187, "functions"], [191, "functions"], [193, "functions"], [199, "functions"], [201, "functions"], [203, "functions"], [204, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [210, "functions"], [212, "functions"], [213, "functions"], [215, "functions"], [220, "functions"], [222, "functions"], [226, "functions"], [228, "functions"], [230, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [236, "functions"], [237, "functions"], [238, "functions"], [240, "functions"], [242, "functions"], [243, "functions"], [246, "functions"], [248, "functions"], [249, "functions"], [250, "functions"], [253, "functions"], [254, "functions"], [256, "functions"], [257, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [9, "submodules"], [12, "submodules"], [18, "submodules"], [27, "submodules"], [31, "submodules"], [34, "submodules"], [38, "submodules"], [45, "submodules"], [49, "submodules"], [67, "submodules"], [73, "submodules"], [81, "submodules"], [83, "submodules"], [91, "submodules"], [96, "submodules"], [100, "submodules"], [105, "submodules"], [129, "submodules"], [140, "submodules"], [147, "submodules"], [152, "submodules"], [157, "submodules"], [158, "submodules"], [166, "submodules"], [178, "submodules"], [184, "submodules"], [189, "submodules"], [190, "submodules"], [195, "submodules"], [197, "submodules"], [202, "submodules"], [205, "submodules"], [209, "submodules"], [219, "submodules"], [223, "submodules"], [229, "submodules"], [235, "submodules"], [241, "submodules"], [247, "submodules"], [251, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common.benchmark": [[8, "module-neural_compressor.common.benchmark"]], "neural_compressor.common": [[9, "module-neural_compressor.common"]], "Subpackages": [[9, "subpackages"], [17, "subpackages"], [32, "subpackages"], [38, "subpackages"], [67, "subpackages"], [78, "subpackages"], [86, "subpackages"], [87, "subpackages"], [100, "subpackages"], [140, "subpackages"], [157, "subpackages"], [158, "subpackages"], [189, "subpackages"], [223, "subpackages"], [231, "subpackages"], [251, "subpackages"]], "neural_compressor.common.tuning_param": [[10, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[11, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[12, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[13, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[14, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[15, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[16, "module-neural_compressor.config"]], "neural_compressor.contrib": [[17, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[18, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[19, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[20, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[21, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[22, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[23, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[23, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[24, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[25, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[26, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[27, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[28, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[29, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[30, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[31, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[32, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[33, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[34, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[35, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[36, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[37, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[38, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[39, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[40, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[41, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[42, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[43, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[44, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[45, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[46, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[47, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[48, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[49, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[50, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[51, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[52, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[53, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[54, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[55, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[56, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[57, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[58, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[59, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[60, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[61, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[62, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[63, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[64, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[65, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[66, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[67, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[68, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[69, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[70, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[71, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[72, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[73, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[74, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[75, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[76, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[77, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.tensorflow.algorithms": [[78, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[79, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[80, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[81, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[82, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[83, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[84, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[85, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[86, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[87, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[88, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[89, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[90, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[91, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[92, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[93, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[94, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[95, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[96, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[97, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[98, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[99, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[100, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[101, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[102, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[155, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[156, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[157, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[175, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[180, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[181, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[182, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[183, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[184, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[185, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[186, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.utility": [[187, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.base_algorithm": [[188, "module-neural_compressor.torch.algorithms.base_algorithm"]], "neural_compressor.torch.algorithms": [[189, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[190, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[191, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[192, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "Exceptions": [[192, "exceptions"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[193, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[194, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert"]], "neural_compressor.torch.algorithms.mixed_precision": [[195, "module-neural_compressor.torch.algorithms.mixed_precision"]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[196, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers"]], "neural_compressor.torch.algorithms.mx_quant": [[197, "module-neural_compressor.torch.algorithms.mx_quant"]], "neural_compressor.torch.algorithms.mx_quant.mx": [[198, "module-neural_compressor.torch.algorithms.mx_quant.mx"]], "neural_compressor.torch.algorithms.mx_quant.utils": [[199, "module-neural_compressor.torch.algorithms.mx_quant.utils"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[200, "module-neural_compressor.torch.algorithms.pt2e_quant.core"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[201, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter"]], "neural_compressor.torch.algorithms.pt2e_quant": [[202, "module-neural_compressor.torch.algorithms.pt2e_quant"]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[203, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load"]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[204, "module-neural_compressor.torch.algorithms.pt2e_quant.utility"]], "neural_compressor.torch.algorithms.smooth_quant": [[205, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[206, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[207, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[208, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "neural_compressor.torch.algorithms.static_quant": [[209, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[210, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[211, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[212, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[213, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "neural_compressor.torch.algorithms.weight_only.awq": [[214, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[215, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[216, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[217, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[218, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[219, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[220, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[221, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[222, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only": [[223, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[224, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[225, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.save_load": [[226, "module-neural_compressor.torch.algorithms.weight_only.save_load"]], "neural_compressor.torch.algorithms.weight_only.teq": [[227, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[228, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.export": [[229, "module-neural_compressor.torch.export"]], "neural_compressor.torch.export.pt2e_export": [[230, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[231, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[232, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[233, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[234, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[235, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.load_entry": [[236, "module-neural_compressor.torch.quantization.load_entry"]], "neural_compressor.torch.quantization.quantize": [[237, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.auto_accelerator": [[238, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.constants": [[239, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[240, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[241, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[242, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[243, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[244, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[245, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[246, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[247, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[248, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[249, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[250, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[251, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[252, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[253, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[254, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[255, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[256, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[257, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[258, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[259, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[260, "intel-neural-compressor-documentation"], [344, "intel-neural-compressor-documentation"]], "Sections": [[260, "sections"], [344, "sections"]], "2.X API User Guide": [[261, "x-api-user-guide"]], "Overview": [[261, "overview"], [272, "overview"]], "Python-based APIs": [[261, "python-based-apis"]], "Advanced Topics": [[261, "advanced-topics"]], "Dynamic Quantization": [[262, "dynamic-quantization"], [277, "dynamic-quantization"], [280, "dynamic-quantization"]], "Introduction": [[262, "introduction"], [263, "introduction"], [264, "introduction"], [265, "introduction"], [266, "introduction"], [267, "introduction"], [268, "introduction"], [269, "introduction"], [270, "introduction"], [271, "introduction"], [273, "introduction"], [274, "introduction"], [277, "introduction"], [280, "introduction"], [283, "introduction"], [284, "introduction"], [285, "introduction"], [308, "introduction"], [309, "introduction"], [311, "introduction"], [313, "introduction"], [314, "introduction"], [316, "introduction"], [318, "introduction"], [321, "introduction"], [325, "introduction"], [327, "introduction"], [328, "introduction"], [329, "introduction"], [330, "introduction"], [331, "introduction"], [332, "introduction"], [335, "introduction"], [337, "introduction"], [339, "introduction"], [340, "introduction"], [341, "introduction"], [342, "introduction"]], "Getting Started with Dynamic Quantization": [[262, "getting-started-with-dynamic-quantization"]], "Examples": [[262, "examples"], [263, "examples"], [264, "examples"], [267, "examples"], [269, "examples"], [270, "examples"], [280, "examples"], [308, "examples"], [311, "examples"], [313, "examples"], [314, "examples"], [315, "examples"], [316, "examples"], [326, "examples"], [327, "examples"], [328, "examples"], [329, "examples"], [331, "examples"], [332, "examples"], [334, "examples"], [335, "examples"], [337, "examples"]], "Microscaling Quantization": [[263, "microscaling-quantization"], [329, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[263, "get-started-with-microscaling-quantization-api"], [329, "get-started-with-microscaling-quantization-api"]], "Reference": [[263, "reference"], [267, "reference"], [277, "reference"], [309, "reference"], [310, "reference"], [329, "reference"], [332, "reference"], [334, "reference"], [337, "reference"], [340, "reference"]], "PyTorch Mixed Precision": [[264, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[264, "mixed-precision-support-matrix"], [327, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[264, "hardware-and-software-requests-for-bf16"], [327, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[264, "hardware-and-software-requests-for-fp16"], [327, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[264, "accuracy-driven-mixed-precision"], [327, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[264, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[265, "pytorch-smooth-quantization"]], "Usage": [[265, "usage"], [267, "usage"], [270, "usage"], [273, "usage"], [340, "usage"], [342, "usage"], [342, "id2"], [342, "id4"], [342, "id6"], [342, "id8"], [342, "id10"], [342, "id12"], [342, "id14"], [342, "id16"], [342, "id18"], [342, "id20"], [342, "id22"]], "Fixed Alpha": [[265, "fixed-alpha"]], "Specify Quantization Rules": [[265, "specify-quantization-rules"], [266, "specify-quantization-rules"], [267, "specify-quantization-rules"], [269, "specify-quantization-rules"], [334, "specify-quantization-rules"]], "Validated Models": [[265, "validated-models"], [340, "validated-models"], [343, "validated-models"]], "Supported Framework Matrix": [[265, "supported-framework-matrix"], [340, "supported-framework-matrix"]], "PyTorch Static Quantization": [[266, "pytorch-static-quantization"]], "Get Started": [[266, "get-started"], [267, "get-started"], [269, "get-started"], [274, "get-started"], [280, "get-started"], [334, "get-started"]], "Static Quantization with IPEX Backend": [[266, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[266, "usage-sample-with-ipex"]], "Model Examples": [[266, "model-examples"]], "Static Quantization with PT2E Backend": [[266, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[266, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[266, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[267, "pytorch-weight-only-quantization"]], "Supported Matrix": [[267, "supported-matrix"], [268, "supported-matrix"], [273, "supported-matrix"]], "Common arguments": [[267, "common-arguments"]], "RTN": [[267, "rtn"]], "GPTQ": [[267, "gptq"]], "AutoRound": [[267, "autoround"]], "AWQ": [[267, "awq"]], "TEQ": [[267, "teq"]], "HQQ": [[267, "hqq"]], "Saving and Loading": [[267, "saving-and-loading"]], "Layer Wise Quantization": [[267, "layer-wise-quantization"]], "Efficient Usage on Client-Side": [[267, "efficient-usage-on-client-side"]], "Torch": [[268, "torch"]], "Torch-like APIs": [[268, "torch-like-apis"]], "Quantization APIs": [[268, "quantization-apis"]], "Autotune API": [[268, "autotune-api"]], "Load API": [[268, "load-api"]], "Common Problems": [[268, "common-problems"]], "TensorFlow Quantization": [[269, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[269, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[269, "with-accuracy-aware-tuning"]], "Smooth Quant": [[270, "smooth-quant"], [340, "smooth-quant"]], "Using a Fixed alpha": [[270, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[270, "determining-the-alpha-through-auto-tuning"], [340, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[271, "tensorflow"], [325, "tensorflow"], [341, "tensorflow"]], "API for TensorFlow": [[271, "api-for-tensorflow"]], "Support Matrix": [[271, "support-matrix"], [309, "support-matrix"]], "Quantization Scheme": [[271, "quantization-scheme"]], "Quantization Approaches": [[271, "quantization-approaches"], [334, "quantization-approaches"]], "Post Training Static Quantization": [[271, "post-training-static-quantization"], [280, "post-training-static-quantization"], [334, "post-training-static-quantization"]], "Smooth Quantization": [[271, "smooth-quantization"], [277, "smooth-quantization"]], "Mixed Precision": [[271, "mixed-precision"], [327, "mixed-precision"]], "Backend and Device": [[271, "backend-and-device"]], "AutoTune": [[272, "autotune"]], "How it Works": [[272, "how-it-works"]], "Working with Autotune": [[272, "working-with-autotune"]], "Working with PyTorch Model": [[272, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[272, "working-with-tensorflow-model"]], "Benchmark": [[273, "benchmark"], [293, "benchmark"], [326, "benchmark"]], "General Use Cases": [[273, "general-use-cases"]], "Dump Throughput and Latency Summary": [[273, "dump-throughput-and-latency-summary"]], "Demo usage": [[273, "demo-usage"]], "Quantization on Client": [[274, "quantization-on-client"]], "Design": [[275, "design"], [312, "design"], [342, "design"], [342, "id1"], [342, "id3"], [342, "id5"], [342, "id7"], [342, "id9"], [342, "id11"], [342, "id13"], [342, "id15"], [342, "id17"], [342, "id19"], [342, "id21"]], "Architecture": [[275, "architecture"], [312, "architecture"], [321, "architecture"]], "Workflows": [[275, "workflows"]], "Quantization": [[277, "quantization"], [299, "quantization"], [334, "quantization"]], "Quantization Fundamentals": [[277, "quantization-fundamentals"], [334, "quantization-fundamentals"], [340, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[277, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[277, "quantization-scheme-in-tensorflow"], [334, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[277, "quantization-scheme-in-pytorch"], [334, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[277, "quantization-scheme-in-ipex"], [334, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[277, "per-tensor-per-channel"], [340, "per-tensor-per-channel"]], "Per-tensor example": [[277, "per-tensor-example"], [340, "per-tensor-example"]], "Per-channel example": [[277, "per-channel-example"], [340, "per-channel-example"]], "Matmul quantization example": [[277, "matmul-quantization-example"], [340, "matmul-quantization-example"]], "Static Quantization": [[277, "static-quantization"]], "Per-channel limitation": [[277, "per-channel-limitation"], [340, "per-channel-limitation"]], "Weight Only Quantization": [[277, "weight-only-quantization"]], "Quantization Aware Training": [[277, "quantization-aware-training"], [326, "quantization-aware-training"], [334, "quantization-aware-training"], [334, "id1"]], "Accuracy Aware Tuning": [[277, "accuracy-aware-tuning"], [334, "accuracy-aware-tuning"]], "Contributor Covenant Code of Conduct": [[278, "contributor-covenant-code-of-conduct"], [279, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[278, "our-pledge"]], "Our Standards": [[278, "our-standards"]], "Our Responsibilities": [[278, "our-responsibilities"]], "Scope": [[278, "scope"]], "Enforcement": [[278, "enforcement"]], "Attribution": [[278, "attribution"]], "Contribution Guidelines": [[279, "contribution-guidelines"]], "Create Pull Request": [[279, "create-pull-request"]], "Step-by-Step guidelines": [[279, "step-by-step-guidelines"]], "Pull Request Checklist": [[279, "pull-request-checklist"]], "Pull Request Template": [[279, "pull-request-template"]], "Pull Request Acceptance Criteria": [[279, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[279, "pull-request-status-checks-overview"]], "Support": [[279, "support"]], "FX": [[280, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[280, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[280, "post-training-dynamic-quantization"], [334, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[280, "quantization-aware-training"]], "Note": [[280, "note"]], "Details": [[280, "details"]], "Common Problem": [[280, "common-problem"]], "Static Quantization & Quantization Aware Training": [[280, "static-quantization-quantization-aware-training"]], "Security Policy": [[281, "security-policy"]], "Report a Vulnerability": [[281, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[282, "intel-neural-compressor"]], "What\u2019s New": [[282, "what-s-new"]], "Installation": [[282, "installation"], [322, "installation"], [322, "id1"]], "Install Framework": [[282, "install-framework"], [322, "install-framework"]], "Install torch for CPU": [[282, "install-torch-for-cpu"], [322, "install-torch-for-cpu"]], "Use Docker Image with torch installed for HPU": [[282, "use-docker-image-with-torch-installed-for-hpu"], [322, "use-docker-image-with-torch-installed-for-hpu"]], "Install torch/intel_extension_for_pytorch for Intel GPU": [[282, "install-torch-intel-extension-for-pytorch-for-intel-gpu"], [322, "install-torch-intel-extension-for-pytorch-for-intel-gpu"]], "Install torch for other platform": [[282, "install-torch-for-other-platform"], [322, "install-torch-for-other-platform"]], "Install tensorflow": [[282, "install-tensorflow"], [322, "install-tensorflow"]], "Install from pypi": [[282, "install-from-pypi"]], "Getting Started": [[282, "getting-started"], [319, "getting-started"]], "Weight-Only Quantization (LLMs)": [[282, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[282, "static-quantization-non-llms"]], "Documentation": [[282, "documentation"]], "Selected Publications/Events": [[282, "selected-publications-events"]], "Additional Content": [[282, "additional-content"]], "Communication": [[282, "communication"]], "Adaptor": [[283, "adaptor"], [286, "adaptor"]], "Adaptor Support Matrix": [[283, "adaptor-support-matrix"]], "Working Flow": [[283, "working-flow"], [334, "working-flow"]], "Get Started with Adaptor API": [[283, "get-started-with-adaptor-api"]], "Query API": [[283, "query-api"]], "Background": [[283, "background"], [310, "background"]], "Query API Introduction": [[283, "query-api-introduction"]], "Example of Adding a New Backend Support": [[283, "example-of-adding-a-new-backend-support"]], "Capability": [[283, "capability"]], "Implement ONNXRTAdaptor Class": [[283, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[284, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[284, "api-list-that-need-to-implement"]], "Design the framework YAML": [[284, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[284, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[284, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[284, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[284, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[284, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[285, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[285, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[285, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[285, "use-the-new-data-type"]], "Summary": [[285, "summary"]], "ONNX Runtime": [[287, "onnx-runtime"]], "Torch Utils": [[288, "torch-utils"]], "2.0 API": [[289, "api"]], "3.0 API": [[290, "api"]], "API Document Example": [[291, "api-document-example"]], "APIs": [[292, "apis"]], "Compression": [[294, "compression"]], "Config": [[295, "config"]], "Mix Precision": [[296, "mix-precision"], [326, "mix-precision"]], "Model": [[297, "model"], [328, "model"]], "Objective": [[298, "objective"], [330, "objective"]], "Strategy": [[300, "strategy"]], "Tensorflow Quantization AutoTune": [[301, "tensorflow-quantization-autotune"]], "Tensorflow Quantization Base API": [[302, "tensorflow-quantization-base-api"]], "Tensorflow Quantization Config": [[303, "tensorflow-quantization-config"]], "Pytorch Quantization AutoTune": [[304, "pytorch-quantization-autotune"]], "Pytorch Quantization Base API": [[305, "pytorch-quantization-base-api"]], "Pytorch Quantization Config": [[306, "pytorch-quantization-config"]], "Training": [[307, "training"]], "Benchmarking": [[308, "benchmarking"]], "Benchmark Support Matrix": [[308, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[308, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[309, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[309, "calibration-algorithms"]], "INC Coding Conventions": [[310, "inc-coding-conventions"]], "Rules": [[310, "rules"]], "Imports": [[310, "imports"]], "Strings": [[310, "strings"]], "Logger": [[310, "logger"]], "Type Annotations": [[310, "type-annotations"]], "Comments": [[310, "comments"]], "TODO Comments": [[310, "todo-comments"]], "Public and Internal Interfaces": [[310, "public-and-internal-interfaces"]], "Folder structure": [[310, "folder-structure"]], "Recommend VS Code settings.json": [[310, "recommend-vs-code-settings-json"]], "DataLoader": [[311, "dataloader"]], "Supported Framework Dataloader Matrix": [[311, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[311, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[311, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[311, "build-custom-dataloader-with-python-api"]], "Workflow": [[312, "workflow"]], "Distillation for Quantization": [[313, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[313, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[313, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[314, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[314, "supported-feature-matrix"], [318, "supported-feature-matrix"], [321, "supported-feature-matrix"], [334, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[314, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[314, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[314, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[314, "horovodrun-execution"]], "Security": [[314, "security"]], "PyTorch Examples:": [[314, "pytorch-examples"]], "TensorFlow Examples:": [[314, "tensorflow-examples"]], "Example List": [[315, "example-list"]], "Release Data": [[315, "release-data"]], "Export": [[316, "export"]], "Supported Framework Model Matrix": [[316, "supported-framework-model-matrix"], [328, "supported-framework-model-matrix"], [329, "supported-framework-model-matrix"], [335, "supported-framework-model-matrix"], [337, "supported-framework-model-matrix"]], "PyTorch Model": [[316, "pytorch-model"]], "FP32 Model Export": [[316, "fp32-model-export"], [316, "id1"]], "INT8 Model Export": [[316, "int8-model-export"], [316, "id2"]], "Tensorflow Model": [[316, "tensorflow-model"]], "Appendix": [[316, "appendix"]], "Supported quantized ops": [[316, "supported-quantized-ops"]], "Frequently Asked Questions": [[317, "frequently-asked-questions"]], "Common Build Issues": [[317, "common-build-issues"]], "Issue 1:": [[317, "issue-1"]], "Issue 2:": [[317, "issue-2"]], "Issue 3:": [[317, "issue-3"]], "Issue 4:": [[317, "issue-4"]], "Issue 5:": [[317, "issue-5"]], "Framework YAML Configuration Files": [[318, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[318, "get-started-with-framework-yaml-files"]], "Quick Samples": [[319, "quick-samples"]], "Feature Matrix": [[319, "feature-matrix"]], "Incompatible changes between v1.2 and v1.1": [[320, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[320, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[320, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[321, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[322, "prerequisites"]], "Install from Binary": [[322, "install-from-binary"]], "Install from Source": [[322, "install-from-source"]], "Install from AI Kit": [[322, "install-from-ai-kit"]], "System Requirements": [[322, "system-requirements"]], "Validated Hardware Environment": [[322, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports HPUs based on heterogeneous architecture with two compute engines (MME and TPC):": [[322, "intel-neural-compressor-supports-hpus-based-on-heterogeneous-architecture-with-two-compute-engines-mme-and-tpc"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[322, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[322, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[322, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[322, "validated-software-environment"]], "Legal Information": [[323, "legal-information"]], "License": [[323, "license"]], "Citation": [[323, "citation"]], "Trademarks": [[323, "trademarks"]], "LLMs Quantization Recipes": [[324, "llms-quantization-recipes"]], "Large Language Models Recipes": [[324, "large-language-models-recipes"]], "Large Language Models Accuracy": [[324, "large-language-models-accuracy"]], "Metrics": [[325, "metrics"]], "Supported Built-in Metric Matrix": [[325, "supported-built-in-metric-matrix"]], "PyTorch": [[325, "pytorch"], [336, "pytorch"]], "MXNet": [[325, "mxnet"], [341, "mxnet"]], "ONNXRT": [[325, "onnxrt"], [341, "onnxrt"]], "Get Started with Metric": [[325, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[325, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[325, "build-custom-metric-with-python-api"]], "Example": [[325, "example"], [330, "example"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[326, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[326, "model-quantization"]], "Post-training Quantization": [[326, "post-training-quantization"]], "Pruning": [[326, "pruning"], [332, "pruning"]], "Distillation": [[326, "distillation"]], "Orchestration": [[326, "orchestration"]], "During quantization mixed precision": [[327, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[327, "get-started-with-mixed-precision-api"]], "Single Objective": [[330, "single-objective"]], "Multiple Objectives": [[330, "multiple-objectives"]], "Objective Support Matrix": [[330, "objective-support-matrix"]], "Get Started with Objective API": [[330, "get-started-with-objective-api"]], "Config Single Objective": [[330, "config-single-objective"]], "Config Multiple Objectives": [[330, "config-multiple-objectives"]], "Optimization Orchestration": [[331, "optimization-orchestration"]], "One-shot": [[331, "one-shot"]], "Orchestration Support Matrix": [[331, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[331, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[332, "neural-network-pruning"]], "Pruning Patterns": [[332, "pruning-patterns"]], "Pruning Criteria": [[332, "pruning-criteria"]], "Pruning Types": [[332, "pruning-types"]], "Pruning Schedules": [[332, "pruning-schedules"]], "Pruning Scope": [[332, "pruning-scope"]], "Sparsity Decay Types": [[332, "sparsity-decay-types"]], "Regularization": [[332, "regularization"]], "Large Language Model Pruning": [[332, "large-language-model-pruning"]], "Pruning Support Matrix": [[332, "pruning-support-matrix"]], "Get Started with Pruning API": [[332, "get-started-with-pruning-api"]], "Training-aware pruning API": [[332, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[332, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[332, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[332, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[333, "full-publications-events-82"]], "2024 (3)": [[333, "id1"]], "2023 (25)": [[333, "id2"]], "2022 (35)": [[333, "id3"]], "2021 (15)": [[333, "id4"]], "2018 - 2020 (4)": [[333, "id5"]], "Quantization Introduction": [[334, "quantization-introduction"]], "Quantization Support Matrix": [[334, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[334, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[334, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[334, "post-training-quantization"]], "Specify Quantization Recipes": [[334, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[334, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[335, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[335, "pytorch-framework-example"]], "ONNX Runtime framework example": [[335, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[336, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[336, "tensorflow"]], "Weight Only Quantization (WOQ)": [[337, "weight-only-quantization-woq"]], "Quantization Capability": [[337, "quantization-capability"]], "Export Compressed Model": [[337, "export-compressed-model"]], "User Code Example": [[337, "user-code-example"]], "WOQ Algorithms Tuning": [[337, "woq-algorithms-tuning"]], "User code example": [[337, "id1"]], "Release": [[338, "release"]], "Release Notes": [[338, "release-notes"]], "Known Issues": [[338, "known-issues"]], "Incompatible Changes": [[338, "incompatible-changes"]], "SigOpt Strategy": [[339, "sigopt-strategy"]], "Preparation": [[339, "preparation"]], "SigOpt Platform": [[339, "sigopt-platform"]], "Neural Compressor Configuration": [[339, "neural-compressor-configuration"]], "Performance": [[339, "performance"]], "Benefit of SigOpt Strategy": [[339, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[339, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[340, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[340, "smoothquant"]], "Our enhancement:": [[340, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[340, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[340, "engineering"]], "Using a fixed alpha": [[340, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[340, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[340, "auto-tune-the-alpha-for-each-layer-block"]], "Transform": [[341, "transform"]], "Transform Support List": [[341, "transform-support-list"]], "Pytorch": [[341, "pytorch"]], "Tuning Strategies": [[342, "tuning-strategies"]], "Strategy Design": [[342, "strategy-design"]], "Tuning Space": [[342, "tuning-space"]], "Exit Policy": [[342, "exit-policy"]], "Accuracy Criteria": [[342, "accuracy-criteria"]], "Tuning Process": [[342, "tuning-process"]], "Tuning Algorithms": [[342, "tuning-algorithms"]], "Auto": [[342, "auto"]], "Conservative Tuning": [[342, "conservative-tuning"]], "Basic": [[342, "basic"]], "MSE": [[342, "mse"]], "MSE_V2": [[342, "mse-v2"]], "HAWQ_V2": [[342, "hawq-v2"]], "Bayesian": [[342, "bayesian"]], "Exhaustive": [[342, "exhaustive"]], "Random": [[342, "random"]], "SigOpt": [[342, "sigopt"]], "TPE": [[342, "tpe"]], "Distributed Tuning": [[342, "distributed-tuning"]], "Customize a New Tuning Strategy": [[342, "customize-a-new-tuning-strategy"]], "Validated Quantization Examples": [[343, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[343, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[343, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[343, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[343, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[343, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[343, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[343, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[343, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[343, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common.benchmark"], [9, "module-neural_compressor.common"], [10, "module-neural_compressor.common.tuning_param"], [11, "module-neural_compressor.common.utils.constants"], [12, "module-neural_compressor.common.utils"], [13, "module-neural_compressor.common.utils.logger"], [14, "module-neural_compressor.common.utils.save_load"], [15, "module-neural_compressor.common.utils.utility"], [16, "module-neural_compressor.config"], [17, "module-neural_compressor.contrib"], [18, "module-neural_compressor.contrib.strategy"], [19, "module-neural_compressor.contrib.strategy.sigopt"], [20, "module-neural_compressor.contrib.strategy.tpe"], [21, "module-neural_compressor.data.datasets.bert_dataset"], [22, "module-neural_compressor.data.datasets.coco_dataset"], [23, "module-neural_compressor.data.datasets.dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset"], [25, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [26, "module-neural_compressor.data.datasets.imagenet_dataset"], [27, "module-neural_compressor.data.datasets"], [28, "module-neural_compressor.data.datasets.style_transfer_dataset"], [29, "module-neural_compressor.data.filters.coco_filter"], [30, "module-neural_compressor.data.filters.filter"], [31, "module-neural_compressor.data.filters"], [32, "module-neural_compressor.data"], [33, "module-neural_compressor.data.transforms.imagenet_transform"], [34, "module-neural_compressor.data.transforms"], [35, "module-neural_compressor.data.transforms.postprocess"], [36, "module-neural_compressor.data.transforms.tokenization"], [37, "module-neural_compressor.data.transforms.transform"], [38, "module-neural_compressor"], [39, "module-neural_compressor.metric.bleu"], [40, "module-neural_compressor.metric.bleu_util"], [41, "module-neural_compressor.metric.coco_label_map"], [42, "module-neural_compressor.metric.coco_tools"], [43, "module-neural_compressor.metric.evaluate_squad"], [44, "module-neural_compressor.metric.f1"], [45, "module-neural_compressor.metric"], [46, "module-neural_compressor.metric.metric"], [47, "module-neural_compressor.mix_precision"], [48, "module-neural_compressor.model.base_model"], [49, "module-neural_compressor.model"], [50, "module-neural_compressor.model.keras_model"], [51, "module-neural_compressor.model.model"], [52, "module-neural_compressor.model.mxnet_model"], [53, "module-neural_compressor.model.nets_factory"], [54, "module-neural_compressor.model.onnx_model"], [55, "module-neural_compressor.model.tensorflow_model"], [56, "module-neural_compressor.model.torch_model"], [57, "module-neural_compressor.objective"], [58, "module-neural_compressor.profiling"], [59, "module-neural_compressor.quantization"], [60, "module-neural_compressor.strategy.auto"], [61, "module-neural_compressor.strategy.auto_mixed_precision"], [62, "module-neural_compressor.strategy.basic"], [63, "module-neural_compressor.strategy.bayesian"], [64, "module-neural_compressor.strategy.conservative"], [65, "module-neural_compressor.strategy.exhaustive"], [66, "module-neural_compressor.strategy.hawq_v2"], [67, "module-neural_compressor.strategy"], [68, "module-neural_compressor.strategy.mse"], [69, "module-neural_compressor.strategy.mse_v2"], [70, "module-neural_compressor.strategy.random"], [71, "module-neural_compressor.strategy.strategy"], [72, "module-neural_compressor.strategy.utils.constant"], [73, "module-neural_compressor.strategy.utils"], [74, "module-neural_compressor.strategy.utils.tuning_sampler"], [75, "module-neural_compressor.strategy.utils.tuning_space"], [76, "module-neural_compressor.strategy.utils.tuning_structs"], [77, "module-neural_compressor.strategy.utils.utility"], [78, "module-neural_compressor.tensorflow.algorithms"], [79, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [80, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [81, "module-neural_compressor.tensorflow.algorithms.smoother"], [82, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [83, "module-neural_compressor.tensorflow.algorithms.static_quant"], [84, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [85, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [86, "module-neural_compressor.tensorflow"], [87, "module-neural_compressor.tensorflow.keras"], [88, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [89, "module-neural_compressor.tensorflow.keras.layers.dense"], [90, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [91, "module-neural_compressor.tensorflow.keras.layers"], [92, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"], [93, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [94, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [95, "module-neural_compressor.tensorflow.keras.quantization.config"], [96, "module-neural_compressor.tensorflow.keras.quantization"], [97, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [98, "module-neural_compressor.tensorflow.quantization.autotune"], [99, "module-neural_compressor.tensorflow.quantization.config"], [100, "module-neural_compressor.tensorflow.quantization"], [101, "module-neural_compressor.tensorflow.quantization.quantize"], [102, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [155, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [156, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [157, "module-neural_compressor.tensorflow.quantization.utils"], [158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [175, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [180, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [181, "module-neural_compressor.tensorflow.quantization.utils.utility"], [182, "module-neural_compressor.tensorflow.utils.constants"], [183, "module-neural_compressor.tensorflow.utils.data"], [184, "module-neural_compressor.tensorflow.utils"], [185, "module-neural_compressor.tensorflow.utils.model"], [186, "module-neural_compressor.tensorflow.utils.model_wrappers"], [187, "module-neural_compressor.tensorflow.utils.utility"], [188, "module-neural_compressor.torch.algorithms.base_algorithm"], [189, "module-neural_compressor.torch.algorithms"], [190, "module-neural_compressor.torch.algorithms.layer_wise"], [191, "module-neural_compressor.torch.algorithms.layer_wise.load"], [192, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [193, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [194, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert"], [195, "module-neural_compressor.torch.algorithms.mixed_precision"], [196, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers"], [197, "module-neural_compressor.torch.algorithms.mx_quant"], [198, "module-neural_compressor.torch.algorithms.mx_quant.mx"], [199, "module-neural_compressor.torch.algorithms.mx_quant.utils"], [200, "module-neural_compressor.torch.algorithms.pt2e_quant.core"], [201, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter"], [202, "module-neural_compressor.torch.algorithms.pt2e_quant"], [203, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load"], [204, "module-neural_compressor.torch.algorithms.pt2e_quant.utility"], [205, "module-neural_compressor.torch.algorithms.smooth_quant"], [206, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"], [207, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"], [208, "module-neural_compressor.torch.algorithms.smooth_quant.utility"], [209, "module-neural_compressor.torch.algorithms.static_quant"], [210, "module-neural_compressor.torch.algorithms.static_quant.save_load"], [211, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [212, "module-neural_compressor.torch.algorithms.static_quant.utility"], [213, "module-neural_compressor.torch.algorithms.weight_only.autoround"], [214, "module-neural_compressor.torch.algorithms.weight_only.awq"], [215, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [216, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [217, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [218, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [219, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [220, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [221, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [222, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [223, "module-neural_compressor.torch.algorithms.weight_only"], [224, "module-neural_compressor.torch.algorithms.weight_only.modules"], [225, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [226, "module-neural_compressor.torch.algorithms.weight_only.save_load"], [227, "module-neural_compressor.torch.algorithms.weight_only.teq"], [228, "module-neural_compressor.torch.algorithms.weight_only.utility"], [229, "module-neural_compressor.torch.export"], [230, "module-neural_compressor.torch.export.pt2e_export"], [231, "module-neural_compressor.torch"], [232, "module-neural_compressor.torch.quantization.algorithm_entry"], [233, "module-neural_compressor.torch.quantization.autotune"], [234, "module-neural_compressor.torch.quantization.config"], [235, "module-neural_compressor.torch.quantization"], [236, "module-neural_compressor.torch.quantization.load_entry"], [237, "module-neural_compressor.torch.quantization.quantize"], [238, "module-neural_compressor.torch.utils.auto_accelerator"], [239, "module-neural_compressor.torch.utils.constants"], [240, "module-neural_compressor.torch.utils.environ"], [241, "module-neural_compressor.torch.utils"], [242, "module-neural_compressor.torch.utils.utility"], [243, "module-neural_compressor.training"], [244, "module-neural_compressor.utils.collect_layer_histogram"], [245, "module-neural_compressor.utils.constant"], [246, "module-neural_compressor.utils.create_obj_from_config"], [247, "module-neural_compressor.utils.export"], [248, "module-neural_compressor.utils.export.qlinear2qdq"], [249, "module-neural_compressor.utils.export.tf2onnx"], [250, "module-neural_compressor.utils.export.torch2onnx"], [251, "module-neural_compressor.utils"], [252, "module-neural_compressor.utils.kl_divergence"], [253, "module-neural_compressor.utils.load_huggingface"], [254, "module-neural_compressor.utils.logger"], [255, "module-neural_compressor.utils.options"], [256, "module-neural_compressor.utils.pytorch"], [257, "module-neural_compressor.utils.utility"], [258, "module-neural_compressor.utils.weights_details"], [259, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "benchmark() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.benchmark"]], "dump_numa_info() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.dump_numa_info"]], "format_list2str() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.format_list2str"]], "generate_prefix() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.generate_prefix"]], "get_linux_numa_info() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.get_linux_numa_info"]], "get_numa_node() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.get_numa_node"]], "get_reversed_numa_info() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.get_reversed_numa_info"]], "get_windows_numa_info() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.get_windows_numa_info"]], "neural_compressor.common.benchmark": [[8, "module-neural_compressor.common.benchmark"]], "parse_str2list() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.parse_str2list"]], "run_multi_instance_command() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.run_multi_instance_command"]], "set_cores_for_instance() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.set_cores_for_instance"]], "summary_latency_throughput() (in module neural_compressor.common.benchmark)": [[8, "neural_compressor.common.benchmark.summary_latency_throughput"]], "neural_compressor.common": [[9, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[10, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[10, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[10, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[10, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[10, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[10, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[11, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[11, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[12, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[13, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[13, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[13, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[14, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[14, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[14, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[15, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[15, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[16, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[16, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[16, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[16, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[16, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[16, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[16, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[16, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[16, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[16, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[16, "module-neural_compressor.config"]], "neural_compressor.contrib": [[17, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[18, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[19, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[19, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[20, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[20, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[21, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[21, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[22, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[22, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[22, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[22, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[22, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[23, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[23, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[24, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[24, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[25, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[25, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[25, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[26, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[26, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[27, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[28, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[28, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[29, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[29, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[29, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[30, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[30, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[31, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[32, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[33, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[33, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[34, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[35, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[35, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[36, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[36, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TRANSFORMS"], [37, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[37, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[37, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[38, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[39, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[39, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[39, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[39, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[39, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[39, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[39, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[39, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[39, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[40, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[40, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[41, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[42, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[42, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[42, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[42, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[42, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[42, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[42, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[42, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[43, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[43, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[43, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[43, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[43, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[44, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[44, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[44, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[44, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[44, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[45, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[46, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[46, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[46, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[46, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[46, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[46, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[46, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[46, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[46, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[46, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[46, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[46, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[46, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[46, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[46, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[46, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[46, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[46, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[46, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[46, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[46, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[46, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[46, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[46, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[46, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[46, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[47, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[47, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[48, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[48, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[49, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[50, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[50, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[51, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[51, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[51, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[52, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[52, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[53, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[53, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[54, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[54, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[55, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[55, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[56, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[56, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[56, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[56, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[56, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[57, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[57, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[57, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[57, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[57, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[57, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[57, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[57, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[57, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[58, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[59, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[59, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[60, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[60, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[61, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[61, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[62, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[62, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[63, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[63, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[63, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[63, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[63, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[64, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[64, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[65, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[65, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[66, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[66, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[67, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[68, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[68, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[69, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[69, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[70, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[70, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[71, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[71, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[71, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[71, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[72, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[73, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[74, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[74, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[75, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[75, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[76, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[76, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[77, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[77, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "neural_compressor.tensorflow.algorithms": [[78, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[79, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[79, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[79, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[80, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[80, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[81, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[82, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[82, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[82, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[83, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "kerassurgery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[84, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[85, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[85, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[85, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[85, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[85, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[85, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[86, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[87, "module-neural_compressor.tensorflow.keras"]], "qconv2d (class in neural_compressor.tensorflow.keras.layers.conv2d)": [[88, "neural_compressor.tensorflow.keras.layers.conv2d.QConv2D"]], "initialize_int8_conv2d() (in module neural_compressor.tensorflow.keras.layers.conv2d)": [[88, "neural_compressor.tensorflow.keras.layers.conv2d.initialize_int8_conv2d"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[88, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "qdense (class in neural_compressor.tensorflow.keras.layers.dense)": [[89, "neural_compressor.tensorflow.keras.layers.dense.QDense"]], "initialize_int8_dense() (in module neural_compressor.tensorflow.keras.layers.dense)": [[89, "neural_compressor.tensorflow.keras.layers.dense.initialize_int8_dense"]], "neural_compressor.tensorflow.keras.layers.dense": [[89, "module-neural_compressor.tensorflow.keras.layers.dense"]], "qdepthwiseconv2d (class in neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[90, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.QDepthwiseConv2D"]], "initialize_int8_depthwise_conv2d() (in module neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[90, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.initialize_int8_depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[90, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[91, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[92, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "qavgpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[93, "neural_compressor.tensorflow.keras.layers.pool2d.QAvgPool2D"]], "qmaxpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[93, "neural_compressor.tensorflow.keras.layers.pool2d.QMaxPool2D"]], "initialize_int8_avgpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[93, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_avgpool"]], "initialize_int8_maxpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[93, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_maxpool"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[93, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "qseparableconv2d (class in neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[94, "neural_compressor.tensorflow.keras.layers.separable_conv2d.QSeparableConv2D"]], "initialize_int8_separable_conv2d() (in module neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[94, "neural_compressor.tensorflow.keras.layers.separable_conv2d.initialize_int8_separable_conv2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[94, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "operatorconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[95, "neural_compressor.tensorflow.keras.quantization.config.OperatorConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[95, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[95, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[95, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[95, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[96, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[97, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "smooth_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[97, "neural_compressor.tensorflow.quantization.algorithm_entry.smooth_quant_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[97, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[98, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "get_all_config_set() (in module neural_compressor.tensorflow.quantization.autotune)": [[98, "neural_compressor.tensorflow.quantization.autotune.get_all_config_set"]], "neural_compressor.tensorflow.quantization.autotune": [[98, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[99, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[99, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[99, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[99, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[99, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[100, "module-neural_compressor.tensorflow.quantization"]], "need_apply() (in module neural_compressor.tensorflow.quantization.quantize)": [[101, "neural_compressor.tensorflow.quantization.quantize.need_apply"]], "neural_compressor.tensorflow.quantization.quantize": [[101, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[101, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[101, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[102, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[102, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[103, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[104, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[106, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[107, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[108, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[109, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[110, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[111, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[112, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[113, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[114, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[115, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[116, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[117, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[118, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[122, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[123, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[123, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[123, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[123, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[124, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[125, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[126, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[127, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[128, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[130, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[131, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[132, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[133, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[134, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[135, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[136, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[137, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[138, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[139, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[141, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[142, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[143, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[144, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[145, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[146, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[146, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[146, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[146, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[148, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[149, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[150, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[151, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[153, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[154, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[155, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[155, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[156, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[156, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[156, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[157, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[159, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[160, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[161, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[162, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[163, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[164, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[165, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[167, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[168, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[168, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[169, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[170, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[171, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[172, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[173, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[174, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[175, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[175, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[176, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[177, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[179, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[180, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[180, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[181, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[181, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[182, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.BatchSampler"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.IndexFetcher"]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.IterableFetcher"]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.IterableSampler"]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.SequentialSampler"]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[183, "neural_compressor.tensorflow.utils.data.default_collate"]], "neural_compressor.tensorflow.utils.data": [[183, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[184, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[185, "neural_compressor.tensorflow.utils.model.Model"]], "tensorflowglobalconfig (class in neural_compressor.tensorflow.utils.model)": [[185, "neural_compressor.tensorflow.utils.model.TensorflowGlobalConfig"]], "neural_compressor.tensorflow.utils.model": [[185, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "get_tf_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.get_tf_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[186, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[186, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.TFSlimNetsFactory"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.deep_get"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "neural_compressor.tensorflow.utils.utility": [[187, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.singleton"]], "valid_keras_format() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.valid_keras_format"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[187, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "quantizer (class in neural_compressor.torch.algorithms.base_algorithm)": [[188, "neural_compressor.torch.algorithms.base_algorithm.Quantizer"]], "neural_compressor.torch.algorithms.base_algorithm": [[188, "module-neural_compressor.torch.algorithms.base_algorithm"]], "neural_compressor.torch.algorithms": [[189, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[190, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[191, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[191, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "pickleerror": [[192, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[192, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[192, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[192, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "qdqlayer (class in neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.QDQLayer"]], "clean_module_weight() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.clean_module_weight"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_module"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "load_value() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.load_value"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[193, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "register_weight_hooks() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.register_weight_hooks"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[193, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "halfprecisionconverter (class in neural_compressor.torch.algorithms.mixed_precision.half_precision_convert)": [[194, "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert.HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mixed_precision.half_precision_convert": [[194, "module-neural_compressor.torch.algorithms.mixed_precision.half_precision_convert"]], "neural_compressor.torch.algorithms.mixed_precision": [[195, "module-neural_compressor.torch.algorithms.mixed_precision"]], "halfprecisionmodulewrapper (class in neural_compressor.torch.algorithms.mixed_precision.module_wrappers)": [[196, "neural_compressor.torch.algorithms.mixed_precision.module_wrappers.HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.mixed_precision.module_wrappers": [[196, "module-neural_compressor.torch.algorithms.mixed_precision.module_wrappers"]], "neural_compressor.torch.algorithms.mx_quant": [[197, "module-neural_compressor.torch.algorithms.mx_quant"]], "mxlinear (class in neural_compressor.torch.algorithms.mx_quant.mx)": [[198, "neural_compressor.torch.algorithms.mx_quant.mx.MXLinear"]], "mxquantizer (class in neural_compressor.torch.algorithms.mx_quant.mx)": [[198, "neural_compressor.torch.algorithms.mx_quant.mx.MXQuantizer"]], "neural_compressor.torch.algorithms.mx_quant.mx": [[198, "module-neural_compressor.torch.algorithms.mx_quant.mx"]], "elemformat (class in neural_compressor.torch.algorithms.mx_quant.utils)": [[199, "neural_compressor.torch.algorithms.mx_quant.utils.ElemFormat"]], "roundingmode (class in neural_compressor.torch.algorithms.mx_quant.utils)": [[199, "neural_compressor.torch.algorithms.mx_quant.utils.RoundingMode"]], "neural_compressor.torch.algorithms.mx_quant.utils": [[199, "module-neural_compressor.torch.algorithms.mx_quant.utils"]], "quantize_elemwise_op() (in module neural_compressor.torch.algorithms.mx_quant.utils)": [[199, "neural_compressor.torch.algorithms.mx_quant.utils.quantize_elemwise_op"]], "quantize_mx_op() (in module neural_compressor.torch.algorithms.mx_quant.utils)": [[199, "neural_compressor.torch.algorithms.mx_quant.utils.quantize_mx_op"]], "w8a8pt2equantizer (class in neural_compressor.torch.algorithms.pt2e_quant.core)": [[200, "neural_compressor.torch.algorithms.pt2e_quant.core.W8A8PT2EQuantizer"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[200, "module-neural_compressor.torch.algorithms.pt2e_quant.core"]], "patternpair (class in neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair"]], "apply_single_pattern_pair() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.apply_single_pattern_pair"]], "fn (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.fn"]], "get_filter_fn() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_filter_fn"]], "get_half_precision_node_set() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_half_precision_node_set"]], "get_unquantized_node_set() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.get_unquantized_node_set"]], "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter": [[201, "module-neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter"]], "pattern_factory() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.pattern_factory"]], "replace_pattern (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.replace_pattern"]], "search_pattern (neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.patternpair attribute)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.PatternPair.search_pattern"]], "transformation() (in module neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter)": [[201, "neural_compressor.torch.algorithms.pt2e_quant.half_precision_rewriter.transformation"]], "neural_compressor.torch.algorithms.pt2e_quant": [[202, "module-neural_compressor.torch.algorithms.pt2e_quant"]], "load() (in module neural_compressor.torch.algorithms.pt2e_quant.save_load)": [[203, "neural_compressor.torch.algorithms.pt2e_quant.save_load.load"]], "neural_compressor.torch.algorithms.pt2e_quant.save_load": [[203, "module-neural_compressor.torch.algorithms.pt2e_quant.save_load"]], "save() (in module neural_compressor.torch.algorithms.pt2e_quant.save_load)": [[203, "neural_compressor.torch.algorithms.pt2e_quant.save_load.save"]], "create_quant_spec_from_config() (in module neural_compressor.torch.algorithms.pt2e_quant.utility)": [[204, "neural_compressor.torch.algorithms.pt2e_quant.utility.create_quant_spec_from_config"]], "create_xiq_quantizer_from_pt2e_config() (in module neural_compressor.torch.algorithms.pt2e_quant.utility)": [[204, "neural_compressor.torch.algorithms.pt2e_quant.utility.create_xiq_quantizer_from_pt2e_config"]], "neural_compressor.torch.algorithms.pt2e_quant.utility": [[204, "module-neural_compressor.torch.algorithms.pt2e_quant.utility"]], "neural_compressor.torch.algorithms.smooth_quant": [[205, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[206, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "recover_model_from_json() (in module neural_compressor.torch.algorithms.smooth_quant.save_load)": [[206, "neural_compressor.torch.algorithms.smooth_quant.save_load.recover_model_from_json"]], "smoothquantquantizer (class in neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[207, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.SmoothQuantQuantizer"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[207, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "qdq_quantize() (in module neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[207, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.qdq_quantize"]], "autoalpha (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.AutoAlpha"]], "calibration (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.Calibration"]], "graphtrace (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.GraphTrace"]], "sqlinearwrapper (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.SQLinearWrapper"]], "torchsmoothquant (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.TorchSmoothQuant"]], "wrapperlayer (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.WrapperLayer"]], "build_captured_dataloader() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.build_captured_dataloader"]], "cal_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.cal_scale"]], "cfg_to_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.cfg_to_qconfig"]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.check_cfg_and_qconfig"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.dump_model_op_stats"]], "enough_memo_store_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.enough_memo_store_scale"]], "forward_wrapper() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.forward_wrapper"]], "get_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.get_module"]], "get_parent() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.get_parent"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.get_quantizable_ops_recursively"]], "model_forward() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.model_forward"]], "model_forward_per_sample() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.model_forward_per_sample"]], "move_input_to_device() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.move_input_to_device"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[208, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "quant_dequant_w_v1() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.quant_dequant_w_v1"]], "quant_dequant_x_v1() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.quant_dequant_x_v1"]], "register_autotune() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.set_module"]], "update_sq_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[208, "neural_compressor.torch.algorithms.smooth_quant.utility.update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[209, "module-neural_compressor.torch.algorithms.static_quant"]], "load() (in module neural_compressor.torch.algorithms.static_quant.save_load)": [[210, "neural_compressor.torch.algorithms.static_quant.save_load.load"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[210, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "save() (in module neural_compressor.torch.algorithms.static_quant.save_load)": [[210, "neural_compressor.torch.algorithms.static_quant.save_load.save"]], "staticquantquantizer (class in neural_compressor.torch.algorithms.static_quant.static_quant)": [[211, "neural_compressor.torch.algorithms.static_quant.static_quant.StaticQuantQuantizer"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[211, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "cfg_to_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.cfg_to_qconfig"]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.check_cfg_and_qconfig"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "generate_activation_observer() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.generate_activation_observer"]], "generate_xpu_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.generate_xpu_qconfig"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[212, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "parse_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.parse_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[212, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "autoroundquantizer (class in neural_compressor.torch.algorithms.weight_only.autoround)": [[213, "neural_compressor.torch.algorithms.weight_only.autoround.AutoRoundQuantizer"]], "get_dataloader() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[213, "neural_compressor.torch.algorithms.weight_only.autoround.get_dataloader"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[213, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "awqquantizer (class in neural_compressor.torch.algorithms.weight_only.awq)": [[214, "neural_compressor.torch.algorithms.weight_only.awq.AWQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.awq": [[214, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "quantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.Quantizer"]], "rawgptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.RAWGPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[215, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[215, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "packer (class in neural_compressor.torch.algorithms.weight_only.hqq.bitpack)": [[216, "neural_compressor.torch.algorithms.weight_only.hqq.bitpack.Packer"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[216, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[217, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "qtensorconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[217, "neural_compressor.torch.algorithms.weight_only.hqq.config.QTensorConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[217, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "hqqlinear (class in neural_compressor.torch.algorithms.weight_only.hqq.core)": [[218, "neural_compressor.torch.algorithms.weight_only.hqq.core.HQQLinear"]], "hqqtensorhandle (class in neural_compressor.torch.algorithms.weight_only.hqq.core)": [[218, "neural_compressor.torch.algorithms.weight_only.hqq.core.HQQTensorHandle"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[218, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[219, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[220, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "optimize_weights_proximal_legacy() (in module neural_compressor.torch.algorithms.weight_only.hqq.optimizer)": [[220, "neural_compressor.torch.algorithms.weight_only.hqq.optimizer.optimize_weights_proximal_legacy"]], "qtensor (class in neural_compressor.torch.algorithms.weight_only.hqq.qtensor)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensor"]], "qtensormetainfo (class in neural_compressor.torch.algorithms.weight_only.hqq.qtensor)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo"]], "axis (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.axis"]], "group_size (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.group_size"]], "nbits (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.nbits"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[221, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "packing (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.packing"]], "shape (neural_compressor.torch.algorithms.weight_only.hqq.qtensor.qtensormetainfo attribute)": [[221, "neural_compressor.torch.algorithms.weight_only.hqq.qtensor.QTensorMetaInfo.shape"]], "hqquantizer (class in neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[222, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.HQQuantizer"]], "filter_fn() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[222, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.filter_fn"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[222, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "patch_hqq_moduile() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[222, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.patch_hqq_moduile"]], "replacement_fn() (in module neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[222, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.replacement_fn"]], "neural_compressor.torch.algorithms.weight_only": [[223, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[224, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[224, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "qdqlayer (class in neural_compressor.torch.algorithms.weight_only.modules)": [[224, "neural_compressor.torch.algorithms.weight_only.modules.QDQLayer"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[224, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "weightonlylinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[224, "neural_compressor.torch.algorithms.weight_only.modules.WeightOnlyLinear"]], "neural_compressor.torch.algorithms.weight_only.modules": [[224, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "rtnquantizer (class in neural_compressor.torch.algorithms.weight_only.rtn)": [[225, "neural_compressor.torch.algorithms.weight_only.rtn.RTNQuantizer"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[225, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "woqmodelloader (class in neural_compressor.torch.algorithms.weight_only.save_load)": [[226, "neural_compressor.torch.algorithms.weight_only.save_load.WOQModelLoader"]], "load() (in module neural_compressor.torch.algorithms.weight_only.save_load)": [[226, "neural_compressor.torch.algorithms.weight_only.save_load.load"]], "neural_compressor.torch.algorithms.weight_only.save_load": [[226, "module-neural_compressor.torch.algorithms.weight_only.save_load"]], "save() (in module neural_compressor.torch.algorithms.weight_only.save_load)": [[226, "neural_compressor.torch.algorithms.weight_only.save_load.save"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[227, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "trainableequivalenttransformation (class in neural_compressor.torch.algorithms.weight_only.teq)": [[227, "neural_compressor.torch.algorithms.weight_only.teq.TrainableEquivalentTransformation"]], "neural_compressor.torch.algorithms.weight_only.teq": [[227, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "graphtrace (class in neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.GraphTrace"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "forward_wrapper() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.forward_wrapper"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "get_parent() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.get_parent"]], "model_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.model_forward"]], "move_input_to_device() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.move_input_to_device"]], "neural_compressor.torch.algorithms.weight_only.utility": [[228, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "recover_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.recover_forward"]], "replace_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.replace_forward"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[228, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "neural_compressor.torch.export": [[229, "module-neural_compressor.torch.export"]], "export() (in module neural_compressor.torch.export.pt2e_export)": [[230, "neural_compressor.torch.export.pt2e_export.export"]], "export_model_for_pt2e_quant() (in module neural_compressor.torch.export.pt2e_export)": [[230, "neural_compressor.torch.export.pt2e_export.export_model_for_pt2e_quant"]], "neural_compressor.torch.export.pt2e_export": [[230, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[231, "module-neural_compressor.torch"]], "autoround_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.autoround_quantize_entry"]], "awq_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.gptq_entry"]], "hqq_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.hqq_entry"]], "mixed_precision_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.mixed_precision_entry"]], "mx_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.mx_quant_entry"]], "neural_compressor.torch.quantization.algorithm_entry": [[232, "module-neural_compressor.torch.quantization.algorithm_entry"]], "pt2e_dynamic_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.pt2e_dynamic_quant_entry"]], "pt2e_static_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.pt2e_static_quant_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "smooth_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.smooth_quant_entry"]], "static_quant_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.static_quant_entry"]], "teq_quantize_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[232, "neural_compressor.torch.quantization.algorithm_entry.teq_quantize_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[233, "neural_compressor.torch.quantization.autotune.autotune"]], "get_all_config_set() (in module neural_compressor.torch.quantization.autotune)": [[233, "neural_compressor.torch.quantization.autotune.get_all_config_set"]], "get_rtn_double_quant_config_set() (in module neural_compressor.torch.quantization.autotune)": [[233, "neural_compressor.torch.quantization.autotune.get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.autotune": [[233, "module-neural_compressor.torch.quantization.autotune"]], "awqconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.AWQConfig"]], "autoroundconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.AutoRoundConfig"]], "dynamicquantconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.DynamicQuantConfig"]], "fp8config (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.FP8Config"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.GPTQConfig"]], "hqqconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.HQQConfig"]], "mxquantconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.MXQuantConfig"]], "mixedprecisionconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.MixedPrecisionConfig"]], "operatorconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.OperatorConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.RTNConfig"]], "smoothquantconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.StaticQuantConfig"]], "teqconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.TEQConfig"]], "torchbaseconfig (class in neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.TorchBaseConfig"]], "get_all_registered_configs() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_all_registered_configs"]], "get_default_autoround_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_AutoRound_config"]], "get_default_awq_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_awq_config"]], "get_default_double_quant_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_double_quant_config"]], "get_default_dynamic_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_dynamic_config"]], "get_default_fp8_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_fp8_config"]], "get_default_fp8_config_set() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_fp8_config_set"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_mixed_precision_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config"]], "get_default_mixed_precision_config_set() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config_set"]], "get_default_mx_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_mx_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_sq_config"]], "get_default_static_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_static_config"]], "get_default_teq_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_default_teq_config"]], "get_woq_tuning_config() (in module neural_compressor.torch.quantization.config)": [[234, "neural_compressor.torch.quantization.config.get_woq_tuning_config"]], "neural_compressor.torch.quantization.config": [[234, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[235, "module-neural_compressor.torch.quantization"]], "load() (in module neural_compressor.torch.quantization.load_entry)": [[236, "neural_compressor.torch.quantization.load_entry.load"]], "neural_compressor.torch.quantization.load_entry": [[236, "module-neural_compressor.torch.quantization.load_entry"]], "convert() (in module neural_compressor.torch.quantization.quantize)": [[237, "neural_compressor.torch.quantization.quantize.convert"]], "need_apply() (in module neural_compressor.torch.quantization.quantize)": [[237, "neural_compressor.torch.quantization.quantize.need_apply"]], "neural_compressor.torch.quantization.quantize": [[237, "module-neural_compressor.torch.quantization.quantize"]], "prepare() (in module neural_compressor.torch.quantization.quantize)": [[237, "neural_compressor.torch.quantization.quantize.prepare"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[237, "neural_compressor.torch.quantization.quantize.quantize"]], "acceleratorregistry (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.AcceleratorRegistry"]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator"]], "hpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.HPU_Accelerator"]], "xpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.XPU_Accelerator"]], "auto_detect_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.auto_detect_accelerator"]], "neural_compressor.torch.utils.auto_accelerator": [[238, "module-neural_compressor.torch.utils.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[238, "neural_compressor.torch.utils.auto_accelerator.register_accelerator"]], "loadformat (class in neural_compressor.torch.utils.constants)": [[239, "neural_compressor.torch.utils.constants.LoadFormat"]], "neural_compressor.torch.utils.constants": [[239, "module-neural_compressor.torch.utils.constants"]], "device_synchronize() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.device_synchronize"]], "get_accelerator() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.get_accelerator"]], "get_ipex_version() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.get_ipex_version"]], "get_torch_version() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.get_torch_version"]], "is_hpex_available() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.is_hpex_available"]], "is_ipex_available() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.is_ipex_available"]], "is_ipex_imported() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.is_ipex_imported"]], "is_package_available() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.is_package_available"]], "is_transformers_imported() (in module neural_compressor.torch.utils.environ)": [[240, "neural_compressor.torch.utils.environ.is_transformers_imported"]], "neural_compressor.torch.utils.environ": [[240, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[241, "module-neural_compressor.torch.utils"]], "dowload_hf_model() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.dowload_hf_model"]], "dump_model_op_stats() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.dump_model_op_stats"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.fetch_module"]], "get_double_quant_config_dict() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.get_double_quant_config_dict"]], "get_model_device() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.get_model_device"]], "get_model_info() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.get_model_info"]], "get_processor_type_from_user_config() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.get_processor_type_from_user_config"]], "get_quantizer() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.get_quantizer"]], "load_empty_model() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.load_empty_model"]], "neural_compressor.torch.utils.utility": [[242, "module-neural_compressor.torch.utils.utility"]], "postprocess_model() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.postprocess_model"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[242, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[243, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[243, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[243, "neural_compressor.training.fit"]], "neural_compressor.training": [[243, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[243, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[244, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[244, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[245, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[246, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[246, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[247, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[248, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[248, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[248, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[249, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[249, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[249, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[250, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[250, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[251, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[252, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[252, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[253, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[253, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[253, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[253, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[254, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[254, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[255, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[255, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[256, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[256, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[256, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[256, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[256, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[257, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[257, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[258, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[258, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[258, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[259, "module-neural_compressor.version"]]}})